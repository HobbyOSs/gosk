---
- mnem: ADD
  opcd: '00'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Add
- mnem: ADD
  opcd: '01'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Add
- mnem: ADD
  opcd: '02'
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Add
- mnem: ADD
  opcd: '03'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Add
- mnem: ADD
  opcd: '04'
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add
- mnem: ADD
  opcd: '05'
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Add
- mnem: PUSH
  opcd: '06'
  op1:
  op2:
    src:
      operand_s: ES
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: '07'
  op1:
    dst:
      operand_s: ES
  op2:
  proc: 00+
  desc: Pop a Value from the Stack
- mnem: OR
  opcd: '08'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Logical Inclusive OR
- mnem: OR
  opcd: '09'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Logical Inclusive OR
- mnem: OR
  opcd: 0A
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Logical Inclusive OR
- mnem: OR
  opcd: 0B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Logical Inclusive OR
- mnem: OR
  opcd: 0C
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Inclusive OR
- mnem: OR
  opcd: 0D
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Inclusive OR
- mnem: PUSH
  opcd: 0E
  op1:
  op2:
    src:
      operand_s: CS
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: 0F
  op1:
    dst:
      operand_s: CS
  op2:
  proc: '00'
  desc: Pop a Value from the Stack
- mnem: ADC
  opcd: '10'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Add with Carry
- mnem: ADC
  opcd: '11'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Add with Carry
- mnem: ADC
  opcd: '12'
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Add with Carry
- mnem: ADC
  opcd: '13'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Add with Carry
- mnem: ADC
  opcd: '14'
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add with Carry
- mnem: ADC
  opcd: '15'
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Add with Carry
- mnem: PUSH
  opcd: '16'
  op1:
  op2:
    src:
      operand_s: SS
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: '17'
  op1:
    dst:
      operand_s: SS
  op2:
  proc: 00+
  desc: Pop a Value from the Stack
- mnem: SBB
  opcd: '18'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: SBB
  opcd: '19'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: SBB
  opcd: 1A
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: SBB
  opcd: 1B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: SBB
  opcd: 1C
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: SBB
  opcd: 1D
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: PUSH
  opcd: 1E
  op1:
  op2:
    src:
      operand_s: DS
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: 1F
  op1:
    dst:
      operand_s: DS
  op2:
  proc: 00+
  desc: Pop a Value from the Stack
- mnem: AND
  opcd: '20'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Logical AND
- mnem: AND
  opcd: '21'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Logical AND
- mnem: AND
  opcd: '22'
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Logical AND
- mnem: AND
  opcd: '23'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Logical AND
- mnem: AND
  opcd: '24'
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical AND
- mnem: AND
  opcd: '25'
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical AND
- mnem: ES
  opcd: '26'
  op1:
  op2:
  proc: 00+
  desc: ES segment override prefix
- mnem: DAA
  opcd: '27'
  op1:
  op2:
  proc: 00+
  desc: Decimal Adjust AL after Addition
- mnem: SUB
  opcd: '28'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Subtract
- mnem: SUB
  opcd: '29'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Subtract
- mnem: SUB
  opcd: 2A
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Subtract
- mnem: SUB
  opcd: 2B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Subtract
- mnem: SUB
  opcd: 2C
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Subtract
- mnem: SUB
  opcd: 2D
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Subtract
- mnem: CS
  opcd: 2E
  op1:
  op2:
  proc: 00+
  desc: CS segment override prefix
- mnem: NTAKEN
  opcd: 2E
  op1:
  op2:
  proc: '10'
  desc: Branch not taken prefix (only with Jcc instructions)
- mnem: DAS
  opcd: 2F
  op1:
  op2:
  proc: 00+
  desc: Decimal Adjust AL after Subtraction
- mnem: XOR
  opcd: '30'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Logical Exclusive OR
- mnem: XOR
  opcd: '31'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Logical Exclusive OR
- mnem: XOR
  opcd: '32'
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Logical Exclusive OR
- mnem: XOR
  opcd: '33'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Logical Exclusive OR
- mnem: XOR
  opcd: '34'
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Exclusive OR
- mnem: XOR
  opcd: '35'
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Exclusive OR
- mnem: SS
  opcd: '36'
  op1:
  op2:
  proc: 00+
  desc: SS segment override prefix
- mnem: AAA
  opcd: '37'
  op1:
  op2:
  proc: 00+
  desc: ASCII Adjust After Addition
- mnem: CMP
  opcd: '38'
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Compare Two Operands
- mnem: CMP
  opcd: '39'
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Compare Two Operands
- mnem: CMP
  opcd: 3A
  op1:
    src:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Compare Two Operands
- mnem: CMP
  opcd: 3B
  op1:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Compare Two Operands
- mnem: CMP
  opcd: 3C
  op1:
    src:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Compare Two Operands
- mnem: CMP
  opcd: 3D
  op1:
    src:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Compare Two Operands
- mnem: DS
  opcd: 3E
  op1:
  op2:
  proc: 00+
  desc: DS segment override prefix
- mnem: TAKEN
  opcd: 3E
  op1:
  op2:
  proc: '10'
  desc: Branch taken prefix (only with Jcc instructions)
- mnem: AAS
  opcd: 3F
  op1:
  op2:
  proc: 00+
  desc: ASCII Adjust AL After Subtraction
- mnem: INC
  opcd: '40'
  op1:
    dst:
      operand_s: r16/32
      a: Z
      t: v
  op2:
  proc: 00+
  desc: Increment by 1
- mnem: REX
  opcd: '40'
  op1:
  op2:
  proc: '10'
  desc: Access to new 8-bit registers
- mnem: REX.B
  opcd: '41'
  op1:
  op2:
  proc: '10'
  desc: Extension of r/m field, base field, or opcode reg field
- mnem: REX.X
  opcd: '42'
  op1:
  op2:
  proc: '10'
  desc: Extension of SIB index field
- mnem: REX.XB
  opcd: '43'
  op1:
  op2:
  proc: '10'
  desc: REX.X and REX.B combination
- mnem: REX.R
  opcd: '44'
  op1:
  op2:
  proc: '10'
  desc: Extension of ModR/M reg field
- mnem: REX.RB
  opcd: '45'
  op1:
  op2:
  proc: '10'
  desc: REX.R and REX.B combination
- mnem: REX.RX
  opcd: '46'
  op1:
  op2:
  proc: '10'
  desc: REX.R and REX.X combination
- mnem: REX.RXB
  opcd: '47'
  op1:
  op2:
  proc: '10'
  desc: REX.R, REX.X and REX.B combination
- mnem: DEC
  opcd: '48'
  op1:
    dst:
      operand_s: r16/32
      a: Z
      t: v
  op2:
  proc: 00+
  desc: Decrement by 1
- mnem: REX.W
  opcd: '48'
  op1:
  op2:
  proc: '10'
  desc: 64 Bit Operand Size
- mnem: REX.WB
  opcd: '49'
  op1:
  op2:
  proc: '10'
  desc: REX.W and REX.B combination
- mnem: REX.WX
  opcd: 4A
  op1:
  op2:
  proc: '10'
  desc: REX.W and REX.X combination
- mnem: REX.WXB
  opcd: 4B
  op1:
  op2:
  proc: '10'
  desc: REX.W, REX.X and REX.B combination
- mnem: REX.WR
  opcd: 4C
  op1:
  op2:
  proc: '10'
  desc: REX.W and REX.R combination
- mnem: REX.WRB
  opcd: 4D
  op1:
  op2:
  proc: '10'
  desc: REX.W, REX.R and REX.B combination
- mnem: REX.WRX
  opcd: 4E
  op1:
  op2:
  proc: '10'
  desc: REX.W, REX.R and REX.X combination
- mnem: REX.WRXB
  opcd: 4F
  op1:
  op2:
  proc: '10'
  desc: REX.W, REX.R, REX.X and REX.B combination
- mnem: PUSH
  opcd: '50'
  op1:
  op2:
    src:
      operand_s: r16/32
      a: Z
      t: v
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: PUSH
  opcd: '50'
  op1:
  op2:
    src:
      operand_s: r64/16
      a: Z
      t: vq
  proc: '10'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: '58'
  op1:
    dst:
      operand_s: r16/32
      a: Z
      t: v
  op2:
  proc: 00+
  desc: Pop a Value from the Stack
- mnem: POP
  opcd: '58'
  op1:
    dst:
      operand_s: r64/16
      a: Z
      t: vq
  op2:
  proc: '10'
  desc: Pop a Value from the Stack
- mnem: PUSHA
  opcd: '60'
  op1:
  op2:
  proc: '01'
  desc: Push All General-Purpose Registers
- mnem: PUSHAD
  opcd: '60'
  op1:
  op2:
  proc: '03'
  desc: Push All General-Purpose Registers
- mnem: POPA
  opcd: '61'
  op1:
  op2:
  proc: '01'
  desc: Pop All General-Purpose Registers
- mnem: POPAD
  opcd: '61'
  op1:
  op2:
  proc: '03'
  desc: Pop All General-Purpose Registers
- mnem: BOUND
  opcd: '62'
  op1:
  op2:
    src:
      operand_s: r16/32
      a: G
      t: v
  proc: '01'
  desc: Check Array Index Against Bounds
- mnem: ARPL
  opcd: '63'
  op1:
    src:
      operand_s: r/m16
      a: E
      t: w
  op2:
    src:
      operand_s: r16
      a: G
      t: w
  proc: '02'
  desc: Adjust RPL Field of Segment Selector
- mnem: MOVSXD
  opcd: '63'
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '10'
  desc: Move with Sign-Extension
- mnem: FS
  opcd: '64'
  op1:
  op2:
  proc: '03'
  desc: FS segment override prefix
- mnem: ALTER
  opcd: '64'
  op1:
  op2:
  proc: '10'
  desc: Alternating branch prefix (only with Jcc instructions)
- mnem: GS
  opcd: '65'
  op1:
  op2:
  proc: '03'
  desc: GS segment override prefix
- mnem: PUSH
  opcd: '68'
  op1:
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vs
  proc: '01'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: IMUL
  opcd: '69'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '01'
  desc: Signed Multiply
- mnem: PUSH
  opcd: 6A
  op1:
  op2:
    src:
      operand_s: imm8
      a: I
      t: bss
  proc: '01'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: IMUL
  opcd: 6B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '01'
  desc: Signed Multiply
- mnem: INSB
  opcd: 6C
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: DX
  proc: '01'
  desc: Input from Port to String
- mnem: INSW
  opcd: 6D
  op1:
    dst:
      operand_s: ES:[DI]
  op2:
    src:
      operand_s: DX
  proc: '01'
  desc: Input from Port to String
- mnem: INSD
  opcd: 6D
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: DX
  proc: '03'
  desc: Input from Port to String
- mnem: OUTSB
  opcd: 6E
  op1:
    dst:
      operand_s: DX
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: '01'
  desc: Output String to Port
- mnem: OUTSW
  opcd: 6F
  op1:
    dst:
      operand_s: DX
  op2:
    src:
      operand_s: DS:[SI]
  proc: '01'
  desc: Output String to Port
- mnem: OUTSD
  opcd: 6F
  op1:
    dst:
      operand_s: DX
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: '03'
  desc: Output String to Port
- mnem: JO
  opcd: '70'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump short if overflow (OF=1)
- mnem: JNO
  opcd: '71'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump short if not overflow (OF=0)
- mnem: JC
  opcd: '72'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if below/not above or equal/carry (CF=1)
- mnem: JNC
  opcd: '73'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not below/above or equal/not carry (CF=0)
- mnem: JE
  opcd: '74'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if zero/equal (ZF=1)
- mnem: JNE
  opcd: '75'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not zero/not equal (ZF=0)
- mnem: JNA
  opcd: '76'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if below or equal/not above (CF=1 OR ZF=1)
- mnem: JA
  opcd: '77'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not below or equal/above (CF=0 AND ZF=0)
- mnem: JS
  opcd: '78'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump short if sign (SF=1)
- mnem: JNS
  opcd: '79'
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump short if not sign (SF=0)
- mnem: JPE
  opcd: 7A
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if parity/parity even (PF=1)
- mnem: JPO
  opcd: 7B
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not parity/parity odd (PF=0)
- mnem: JNGE
  opcd: 7C
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if less/not greater (SF!=OF)
- mnem: JGE
  opcd: 7D
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not less/greater or equal (SF=OF)
- mnem: JNG
  opcd: 7E
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))
- mnem: JG
  opcd: 7F
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))
- mnem: ADD
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add
- mnem: OR
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Inclusive OR
- mnem: ADC
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add with Carry
- mnem: SBB
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: AND
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical AND
- mnem: SUB
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Subtract
- mnem: XOR
  opcd: '80'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Exclusive OR
- mnem: CMP
  opcd: '80'
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Compare Two Operands
- mnem: ADD
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Add
- mnem: OR
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Inclusive OR
- mnem: ADC
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Add with Carry
- mnem: SBB
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: AND
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical AND
- mnem: SUB
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Subtract
- mnem: XOR
  opcd: '81'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Exclusive OR
- mnem: CMP
  opcd: '81'
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Compare Two Operands
- mnem: ADD
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add
- mnem: OR
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Inclusive OR
- mnem: ADC
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Add with Carry
- mnem: SBB
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: AND
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical AND
- mnem: SUB
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Subtract
- mnem: XOR
  opcd: '82'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Exclusive OR
- mnem: CMP
  opcd: '82'
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Compare Two Operands
- mnem: ADD
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: 00+
  desc: Add
- mnem: OR
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: '03'
  desc: Logical Inclusive OR
- mnem: ADC
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: 00+
  desc: Add with Carry
- mnem: SBB
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: 00+
  desc: Integer Subtraction with Borrow
- mnem: AND
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: '03'
  desc: Logical AND
- mnem: SUB
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: 00+
  desc: Subtract
- mnem: XOR
  opcd: '83'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: '03'
  desc: Logical Exclusive OR
- mnem: CMP
  opcd: '83'
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: bs
  proc: 00+
  desc: Compare Two Operands
- mnem: TEST
  opcd: '84'
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Logical Compare
- mnem: TEST
  opcd: '85'
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Logical Compare
- mnem: XCHG
  opcd: '86'
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Exchange Register/Memory with Register
- mnem: XCHG
  opcd: '87'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Exchange Register/Memory with Register
- mnem: MOV
  opcd: '88'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: r8
      a: G
      t: b
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: '89'
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: 8A
  op1:
    dst:
      operand_s: r8
      a: G
      t: b
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: 8B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: 8C
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
    src:
      operand_s: Sreg16
      a: S
      t: w
  proc: 00+
  desc: Move
- mnem: LEA
  opcd: 8D
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: m
      a: M
      t:
  proc: 00+
  desc: Load Effective Address
- mnem: MOV
  opcd: 8E
  op1:
    dst:
      operand_s: Sreg16
      a: S
      t: w
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: 00+
  desc: Move
- mnem: POP
  opcd: 8F
  op1:
    dst:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: 00+
  desc: Pop a Value from the Stack
- mnem: POP
  opcd: 8F
  op1:
    dst:
      operand_s: r/m64/16
      a: E
      t: vq
  op2:
  proc: '10'
  desc: Pop a Value from the Stack
- mnem: XCHG
  opcd: '90'
  op1:
    dst:
      operand_s: r16/32/64
      a: Z
      t: vqp
  op2:
    dst:
      operand_s: rAX
  proc: 00+
  desc: Exchange Register/Memory with Register
- mnem: NOP
  opcd: '90'
  op1:
  op2:
  proc: 00+
  desc: No Operation
- mnem: NOP
  opcd: '90'
  op1:
  op2:
  proc: 00+
  desc: No Operation
- mnem: PAUSE
  opcd: '90'
  op1:
  op2:
  proc: '10'
  desc: Spin Loop Hint
- mnem: CBW
  opcd: '98'
  op1:
  op2:
  proc: 00+
  desc: Convert Byte to Word
- mnem: CWDE
  opcd: '98'
  op1:
  op2:
  proc: '03'
  desc: Convert Word to Doubleword
- mnem: CDQE
  opcd: '98'
  op1:
  op2:
  proc: '10'
  desc: Convert
- mnem: CWD
  opcd: '99'
  op1:
  op2:
  proc: 00+
  desc: Convert Word to Doubleword
- mnem: CDQ
  opcd: '99'
  op1:
  op2:
  proc: '03'
  desc: Convert Doubleword to Quadword
- mnem: CQO
  opcd: '99'
  op1:
  op2:
  proc: '10'
  desc: Convert
- mnem: CALLF
  opcd: 9A
  op1:
  op2:
    src:
      operand_s: ptr16:16/32
      a: A
      t: p
  proc: 00+
  desc: Call Procedure
- mnem: WAIT
  opcd: 9B
  op1:
  op2:
  proc: 00+
  desc: Check pending unmasked floating-point exceptions
- mnem: PUSHF
  opcd: 9C
  op1:
  op2:
  proc: 00+
  desc: Push FLAGS Register onto the Stack
- mnem: PUSHFD
  opcd: 9C
  op1:
  op2:
  proc: '03'
  desc: Push eFLAGS Register onto the Stack
- mnem: PUSHFQ
  opcd: 9C
  op1:
  op2:
  proc: '10'
  desc: Push rFLAGS Register onto the Stack
- mnem: POPF
  opcd: 9D
  op1:
  op2:
  proc: 00+
  desc: Pop Stack into FLAGS Register
- mnem: POPFD
  opcd: 9D
  op1:
  op2:
  proc: '03'
  desc: Pop Stack into eFLAGS Register
- mnem: POPFQ
  opcd: 9D
  op1:
  op2:
  proc: '10'
  desc: Pop Stack into rFLAGS Register
- mnem: SAHF
  opcd: 9E
  op1:
  op2:
  proc: 00+
  desc: Store AH into Flags
- mnem: LAHF
  opcd: 9F
  op1:
  op2:
  proc: 00+
  desc: Load Status Flags into AH Register
- mnem: MOV
  opcd: A0
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: '8'
      a: O
      t: b
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: A1
  op1:
    dst:
      operand_s: rAX
  op2:
    src:
      operand_s: 16/32/64
      a: O
      t: vqp
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: A2
  op1:
    dst:
      operand_s: '8'
      a: O
      t: b
  op2:
    src:
      operand_s: AL
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: A3
  op1:
    dst:
      operand_s: 16/32/64
      a: O
      t: vqp
  op2:
    src:
      operand_s: rAX
  proc: 00+
  desc: Move
- mnem: MOVSB
  opcd: A4
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: 00+
  desc: Move Data from String to String
- mnem: MOVSW
  opcd: A5
  op1:
    dst:
      operand_s: ES:[DI]
  op2:
    src:
      operand_s: DS:[SI]
  proc: 00+
  desc: Move Data from String to String
- mnem: MOVSD
  opcd: A5
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: '03'
  desc: Move Data from String to String
- mnem: MOVSQ
  opcd: A5
  op1:
    dst:
      operand_s: "[rDI]"
  op2:
    src:
      operand_s: "[rSI]"
  proc: '10'
  desc: Move Data from String to String
- mnem: CMPSB
  opcd: A6
  op1:
    src:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: 00+
  desc: Compare String Operands
- mnem: CMPSW
  opcd: A7
  op1:
    src:
      operand_s: ES:[DI]
  op2:
    src:
      operand_s: DS:[SI]
  proc: 00+
  desc: Compare String Operands
- mnem: CMPSD
  opcd: A7
  op1:
    src:
      operand_s: "(ES:)[rDI]"
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: '03'
  desc: Compare String Operands
- mnem: CMPSQ
  opcd: A7
  op1:
    src:
      operand_s: "[rDI]"
  op2:
    src:
      operand_s: "[rSI]"
  proc: '10'
  desc: Compare String Operands
- mnem: TEST
  opcd: A8
  op1:
    src:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Compare
- mnem: TEST
  opcd: A9
  op1:
    src:
      operand_s: rAX
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Compare
- mnem: STOSB
  opcd: AA
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
  proc: 00+
  desc: Store String
- mnem: STOSW
  opcd: AB
  op1:
    dst:
      operand_s: ES:[DI]
  op2:
  proc: 00+
  desc: Store String
- mnem: STOSD
  opcd: AB
  op1:
    dst:
      operand_s: "(ES:)[rDI]"
  op2:
  proc: '03'
  desc: Store String
- mnem: STOSQ
  opcd: AB
  op1:
    dst:
      operand_s: "[rDI]"
  op2:
  proc: '10'
  desc: Store String
- mnem: LODSB
  opcd: AC
  op1:
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: 00+
  desc: Load String
- mnem: LODSW
  opcd: AD
  op1:
  op2:
    src:
      operand_s: DS:[SI]
  proc: 00+
  desc: Load String
- mnem: LODSD
  opcd: AD
  op1:
  op2:
    src:
      operand_s: "(DS:)[rSI]"
  proc: '03'
  desc: Load String
- mnem: LODSQ
  opcd: AD
  op1:
  op2:
    src:
      operand_s: "[rSI]"
  proc: '10'
  desc: Load String
- mnem: SCASB
  opcd: AE
  op1:
    src:
      operand_s: "(ES:)[rDI]"
  op2:
  proc: 00+
  desc: Scan String
- mnem: SCASW
  opcd: AF
  op1:
    src:
      operand_s: ES:[DI]
  op2:
  proc: 00+
  desc: Scan String
- mnem: SCASD
  opcd: AF
  op1:
    src:
      operand_s: "(ES:)[rDI]"
  op2:
  proc: '03'
  desc: Scan String
- mnem: SCASQ
  opcd: AF
  op1:
    src:
      operand_s: "[rDI]"
  op2:
  proc: '10'
  desc: Scan String
- mnem: MOV
  opcd: B0
  op1:
    dst:
      operand_s: r8
      a: Z
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: B8
  op1:
    dst:
      operand_s: r16/32/64
      a: Z
      t: vqp
  op2:
    src:
      operand_s: imm16/32/64
      a: I
      t: vqp
  proc: 00+
  desc: Move
- mnem: ROL
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: ROL
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Shift
- mnem: RETN
  opcd: C2
  op1:
  op2:
    src:
      operand_s: imm16
      a: I
      t: w
  proc: 00+
  desc: Return from procedure
- mnem: RETN
  opcd: C3
  op1:
  op2:
  proc: 00+
  desc: Return from procedure
- mnem: LES
  opcd: C4
  op1:
  op2:
    dst:
      operand_s: r16/32
      a: G
      t: v
  proc: 00+
  desc: Load Far Pointer
- mnem: LDS
  opcd: C5
  op1:
  op2:
    dst:
      operand_s: r16/32
      a: G
      t: v
  proc: 00+
  desc: Load Far Pointer
- mnem: MOV
  opcd: C6
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Move
- mnem: MOV
  opcd: C7
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Move
- mnem: ENTER
  opcd: C8
  op1:
  op2:
  proc: '01'
  desc: Make Stack Frame for Procedure Parameters
- mnem: ENTER
  opcd: C8
  op1:
  op2:
  proc: '10'
  desc: Make Stack Frame for Procedure Parameters
- mnem: LEAVE
  opcd: C9
  op1:
  op2:
  proc: '01'
  desc: High Level Procedure Exit
- mnem: LEAVE
  opcd: C9
  op1:
  op2:
  proc: '10'
  desc: High Level Procedure Exit
- mnem: RETF
  opcd: CA
  op1:
    src:
      operand_s: imm16
      a: I
      t: w
  op2:
  proc: 00+
  desc: Return from procedure
- mnem: RETF
  opcd: CB
  op1:
  op2:
  proc: 00+
  desc: Return from procedure
- mnem: INT
  opcd: CC
  op1:
  op2:
    src:
      operand_s: '3'
  proc: 00+
  desc: Call to Interrupt Procedure
- mnem: INT
  opcd: CD
  op1:
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Call to Interrupt Procedure
- mnem: INTO
  opcd: CE
  op1:
  op2:
  proc: 00+
  desc: Call to Interrupt Procedure
- mnem: IRET
  opcd: CF
  op1:
  op2:
  proc: 00+
  desc: Interrupt Return
- mnem: IRETD
  opcd: CF
  op1:
  op2:
  proc: '03'
  desc: Interrupt Return
- mnem: IRETQ
  opcd: CF
  op1:
  op2:
  proc: 00+
  desc: Interrupt Return
- mnem: ROL
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: D0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: ROL
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: D1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: '1'
  proc: 00+
  desc: Shift
- mnem: ROL
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: D2
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: ROL
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: ROR
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: RCL
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: RCR
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Rotate
- mnem: SAL
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SHR
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SHL
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: SAR
  opcd: D3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: CL
  proc: 00+
  desc: Shift
- mnem: AAM
  opcd: D4
  op1:
  op2:
  proc: 00+
  desc: ASCII Adjust AX After Multiply
- mnem: AMX
  opcd: D4
  op1:
  op2:
  proc: 00+
  desc: Adjust AX After Multiply
- mnem: AAD
  opcd: D5
  op1:
  op2:
  proc: 00+
  desc: ASCII Adjust AX Before Division
- mnem: ADX
  opcd: D5
  op1:
  op2:
  proc: 00+
  desc: Adjust AX Before Division
- mnem: SETALC
  opcd: D6
  op1:
  op2:
  proc: '02'
  desc: Set AL If Carry
- mnem: XLATB
  opcd: D7
  op1:
  op2:
    src:
      operand_s: "(DS:)[rBX+AL]"
  proc: 00+
  desc: Table Look-up Translation
- mnem: FADD
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Add
- mnem: FMUL
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Multiply
- mnem: FCOM
  opcd: D8
  op1:
  op2:
    src:
      operand_s: STi/m32real
      a: ES
      t: sr
  proc: 00+
  desc: Compare Real
- mnem: FCOM
  opcd: D8
  op1:
  op2:
  proc: 00+
  desc: Compare Real
- mnem: FCOMP
  opcd: D8
  op1:
  op2:
    src:
      operand_s: STi/m32real
      a: ES
      t: sr
  proc: 00+
  desc: Compare Real and Pop
- mnem: FCOMP
  opcd: D8
  op1:
  op2:
  proc: 00+
  desc: Compare Real and Pop
- mnem: FSUB
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Subtract
- mnem: FSUBR
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Reverse Subtract
- mnem: FDIV
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Divide
- mnem: FDIVR
  opcd: D8
  op1:
  op2:
    src:
      operand_s: m32real
      a: M
      t: sr
  proc: 00+
  desc: Reverse Divide
- mnem: FLD
  opcd: D9
  op1:
  op2:
    src:
      operand_s: STi/m32real
      a: ES
      t: sr
  proc: 00+
  desc: Load Floating Point Value
- mnem: FXCH
  opcd: D9
  op1:
  op2:
    dst:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Exchange Register Contents
- mnem: FXCH
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Exchange Register Contents
- mnem: FST
  opcd: D9
  op1:
    dst:
      operand_s: m32real
      a: M
      t: sr
  op2:
  proc: 00+
  desc: Store Floating Point Value
- mnem: FNOP
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: No Operation
- mnem: FSTP
  opcd: D9
  op1:
    dst:
      operand_s: m32real
      a: M
      t: sr
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FSTP1
  opcd: D9
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FSTP1
  opcd: D9
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: '03'
  desc: Store Floating Point Value and Pop
- mnem: FLDENV
  opcd: D9
  op1:
    src:
      operand_s: m14/28
      a: M
      t: e
  op2:
  proc: 00+
  desc: Load x87 FPU Environment
- mnem: FCHS
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Change Sign
- mnem: FABS
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Absolute Value
- mnem: FTST
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Test
- mnem: FXAM
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Examine
- mnem: FLDCW
  opcd: D9
  op1:
    src:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Load x87 FPU Control Word
- mnem: FLD1
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant +1.0
- mnem: FLDL2T
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant log
- mnem: FLDL2E
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant log
- mnem: FLDPI
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant π
- mnem: FLDLG2
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant log
- mnem: FLDLN2
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant log
- mnem: FLDZ
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Load Constant +0.0
- mnem: FNSTENV
  opcd: D9
  op1:
    dst:
      operand_s: m14/28
      a: M
      t: e
  op2:
  proc: 00+
  desc: Store x87 FPU Environment
- mnem: FSTENV
  opcd: D9
  op1:
    dst:
      operand_s: m14/28
      a: M
      t: e
  op2:
  proc: 00+
  desc: Store x87 FPU Environment
- mnem: F2XM1
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Compute 2
- mnem: FYL2X
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Compute y × log
- mnem: FPTAN
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Partial Tangent
- mnem: FPATAN
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Partial Arctangent and Pop
- mnem: FXTRACT
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Extract Exponent and Significand
- mnem: FPREM1
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: IEEE Partial Remainder
- mnem: FDECSTP
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Decrement Stack-Top Pointer
- mnem: FINCSTP
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Increment Stack-Top Pointer
- mnem: FNSTCW
  opcd: D9
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store x87 FPU Control Word
- mnem: FSTCW
  opcd: D9
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store x87 FPU Control Word
- mnem: FPREM
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Partial Remainder (for compatibility with i8087 and i287)
- mnem: FYL2XP1
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Compute y × log
- mnem: FSQRT
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Square Root
- mnem: FSINCOS
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Sine and Cosine
- mnem: FRNDINT
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Round to Integer
- mnem: FSCALE
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Scale
- mnem: FSIN
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Sine
- mnem: FCOS
  opcd: D9
  op1:
  op2:
  proc: 00+
  desc: Cosine
- mnem: FIADD
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Add
- mnem: FCMOVB
  opcd: DA
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - below (CF=1)
- mnem: FIMUL
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Multiply
- mnem: FCMOVE
  opcd: DA
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - equal (ZF=1)
- mnem: FICOM
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Compare Integer
- mnem: FCMOVBE
  opcd: DA
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - below or equal (CF=1 or ZF=1)
- mnem: FICOMP
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Compare Integer and Pop
- mnem: FCMOVU
  opcd: DA
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - unordered (PF=1)
- mnem: FISUB
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Subtract
- mnem: FISUBR
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Reverse Subtract
- mnem: FUCOMPP
  opcd: DA
  op1:
  op2:
  proc: '03'
  desc: Unordered Compare Floating Point Values and Pop Twice
- mnem: FIDIV
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Divide
- mnem: FIDIVR
  opcd: DA
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Reverse Divide
- mnem: FILD
  opcd: DB
  op1:
  op2:
    src:
      operand_s: m32int
      a: M
      t: di
  proc: 00+
  desc: Load Integer
- mnem: FCMOVNB
  opcd: DB
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - not below (CF=0)
- mnem: FISTTP
  opcd: DB
  op1:
    dst:
      operand_s: m32int
      a: M
      t: di
  op2:
  proc: '10'
  desc: Store Integer with Truncation and Pop
- mnem: FCMOVNE
  opcd: DB
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - not equal (ZF=0)
- mnem: FIST
  opcd: DB
  op1:
    dst:
      operand_s: m32int
      a: M
      t: di
  op2:
  proc: 00+
  desc: Store Integer
- mnem: FCMOVNBE
  opcd: DB
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - below or equal (CF=0 and ZF=0)
- mnem: FISTP
  opcd: DB
  op1:
    dst:
      operand_s: m32int
      a: M
      t: di
  op2:
  proc: 00+
  desc: Store Integer and Pop
- mnem: FCMOVNU
  opcd: DB
  op1:
    dst:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: FP Conditional Move - not unordered (PF=0)
- mnem: FNENI
  opcd: DB
  op1:
  op2:
  proc: '00'
  desc: Enable NPX Interrupt
- mnem: FENI
  opcd: DB
  op1:
  op2:
  proc: '00'
  desc: Enable NPX Interrupt
- mnem: FNENI
  opcd: DB
  op1:
  op2:
  proc: '01'
  desc: Treated as Integer NOP
- mnem: FNDISI
  opcd: DB
  op1:
  op2:
  proc: '00'
  desc: Disable NPX Interrupt
- mnem: FDISI
  opcd: DB
  op1:
  op2:
  proc: '00'
  desc: Disable NPX Interrupt
- mnem: FNDISI
  opcd: DB
  op1:
  op2:
  proc: '01'
  desc: Treated as Integer NOP
- mnem: FNCLEX
  opcd: DB
  op1:
  op2:
  proc: 00+
  desc: Clear Exceptions
- mnem: FCLEX
  opcd: DB
  op1:
  op2:
  proc: 00+
  desc: Clear Exceptions
- mnem: FNINIT
  opcd: DB
  op1:
  op2:
  proc: 00+
  desc: Initialize Floating-Point Unit
- mnem: FINIT
  opcd: DB
  op1:
  op2:
  proc: 00+
  desc: Initialize Floating-Point Unit
- mnem: FNSETPM
  opcd: DB
  op1:
  op2:
  proc: '02'
  desc: Set Protected Mode
- mnem: FSETPM
  opcd: DB
  op1:
  op2:
  proc: '02'
  desc: Set Protected Mode
- mnem: FNSETPM
  opcd: DB
  op1:
  op2:
  proc: '03'
  desc: Treated as Integer NOP
- mnem: FLD
  opcd: DB
  op1:
  op2:
    src:
      operand_s: m80real
      a: M
      t: er
  proc: 00+
  desc: Load Floating Point Value
- mnem: FUCOMI
  opcd: DB
  op1:
    src:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: Unordered Compare Floating Point Values and Set EFLAGS
- mnem: FCOMI
  opcd: DB
  op1:
    src:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: Compare Floating Point Values and Set EFLAGS
- mnem: FSTP
  opcd: DB
  op1:
    dst:
      operand_s: m80real
      a: M
      t: er
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FADD
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Add
- mnem: FADD
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Add
- mnem: FMUL
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Multiply
- mnem: FMUL
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Multiply
- mnem: FCOM
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Compare Real
- mnem: FCOM2
  opcd: DC
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Compare Real
- mnem: FCOM2
  opcd: DC
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Compare Real
- mnem: FCOMP
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Compare Real and Pop
- mnem: FCOMP3
  opcd: DC
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Compare Real and Pop
- mnem: FCOMP3
  opcd: DC
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Compare Real and Pop
- mnem: FSUB
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Subtract
- mnem: FSUBR
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Reverse Subtract
- mnem: FSUBR
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Reverse Subtract
- mnem: FSUB
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Subtract
- mnem: FDIV
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Divide
- mnem: FDIVR
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Reverse Divide
- mnem: FDIVR
  opcd: DC
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Reverse Divide
- mnem: FDIV
  opcd: DC
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Divide and Pop
- mnem: FLD
  opcd: DD
  op1:
  op2:
    src:
      operand_s: m64real
      a: M
      t: dr
  proc: 00+
  desc: Load Floating Point Value
- mnem: FFREE
  opcd: DD
  op1:
    src:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: 00+
  desc: Free Floating-Point Register
- mnem: FISTTP
  opcd: DD
  op1:
    dst:
      operand_s: m64int
      a: M
      t: qi
  op2:
  proc: '10'
  desc: Store Integer with Truncation and Pop
- mnem: FXCH4
  opcd: DD
  op1:
  op2:
    dst:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Exchange Register Contents
- mnem: FXCH4
  opcd: DD
  op1:
  op2:
    dst:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Exchange Register Contents
- mnem: FST
  opcd: DD
  op1:
    dst:
      operand_s: m64real
      a: M
      t: dr
  op2:
  proc: 00+
  desc: Store Floating Point Value
- mnem: FST
  opcd: DD
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Store Floating Point Value
- mnem: FSTP
  opcd: DD
  op1:
    dst:
      operand_s: m64real
      a: M
      t: dr
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FSTP
  opcd: DD
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FRSTOR
  opcd: DD
  op1:
  op2:
  proc: 00+
  desc: Restore x87 FPU State
- mnem: FUCOM
  opcd: DD
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Unordered Compare Floating Point Values
- mnem: FUCOM
  opcd: DD
  op1:
  op2:
  proc: '03'
  desc: Unordered Compare Floating Point Values
- mnem: FUCOMP
  opcd: DD
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Unordered Compare Floating Point Values and Pop
- mnem: FUCOMP
  opcd: DD
  op1:
  op2:
  proc: '03'
  desc: Unordered Compare Floating Point Values and Pop
- mnem: FNSAVE
  opcd: DD
  op1:
    dst:
      operand_s: m94/108
      a: M
      t: st
  op2:
  proc: 00+
  desc: Store x87 FPU State
- mnem: FSAVE
  opcd: DD
  op1:
    dst:
      operand_s: m94/108
      a: M
      t: st
  op2:
  proc: 00+
  desc: Store x87 FPU State
- mnem: FNSTSW
  opcd: DD
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store x87 FPU Status Word
- mnem: FSTSW
  opcd: DD
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store x87 FPU Status Word
- mnem: FIADD
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Add
- mnem: FADDP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Add and Pop
- mnem: FADDP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Add and Pop
- mnem: FIMUL
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Multiply
- mnem: FMULP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Multiply and Pop
- mnem: FMULP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Multiply and Pop
- mnem: FICOM
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Compare Integer
- mnem: FCOMP5
  opcd: DE
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Compare Real and Pop
- mnem: FCOMP5
  opcd: DE
  op1:
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Compare Real and Pop
- mnem: FICOMP
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Compare Integer and Pop
- mnem: FCOMPP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Compare Real and Pop Twice
- mnem: FISUB
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Subtract
- mnem: FSUBRP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Reverse Subtract and Pop
- mnem: FSUBRP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Reverse Subtract and Pop
- mnem: FISUBR
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Reverse Subtract
- mnem: FSUBP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Subtract and Pop
- mnem: FSUBP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Subtract and Pop
- mnem: FIDIV
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Divide
- mnem: FDIVRP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Reverse Divide and Pop
- mnem: FDIVRP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Reverse Divide and Pop
- mnem: FIDIVR
  opcd: DE
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Reverse Divide
- mnem: FDIVP
  opcd: DE
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
    src:
      operand_s: ST
  proc: 00+
  desc: Divide and Pop
- mnem: FDIVP
  opcd: DE
  op1:
  op2:
  proc: 00+
  desc: Divide and Pop
- mnem: FILD
  opcd: DF
  op1:
  op2:
    src:
      operand_s: m16int
      a: M
      t: wi
  proc: 00+
  desc: Load Integer
- mnem: FFREEP
  opcd: DF
  op1:
    src:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: 00+
  desc: Free Floating-Point Register and Pop
- mnem: FISTTP
  opcd: DF
  op1:
    dst:
      operand_s: m16int
      a: M
      t: wi
  op2:
  proc: '10'
  desc: Store Integer with Truncation and Pop
- mnem: FXCH7
  opcd: DF
  op1:
  op2:
    dst:
      operand_s: STi
      a: EST
      t:
  proc: 00+
  desc: Exchange Register Contents
- mnem: FXCH7
  opcd: DF
  op1:
  op2:
    dst:
      operand_s: STi
      a: EST
      t:
  proc: '03'
  desc: Exchange Register Contents
- mnem: FIST
  opcd: DF
  op1:
    dst:
      operand_s: m16int
      a: M
      t: wi
  op2:
  proc: 00+
  desc: Store Integer
- mnem: FSTP8
  opcd: DF
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FSTP8
  opcd: DF
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: '03'
  desc: Store Floating Point Value and Pop
- mnem: FISTP
  opcd: DF
  op1:
    dst:
      operand_s: m16int
      a: M
      t: wi
  op2:
  proc: 00+
  desc: Store Integer and Pop
- mnem: FSTP9
  opcd: DF
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: 00+
  desc: Store Floating Point Value and Pop
- mnem: FSTP9
  opcd: DF
  op1:
    dst:
      operand_s: STi
      a: EST
      t:
  op2:
  proc: '03'
  desc: Store Floating Point Value and Pop
- mnem: FBLD
  opcd: DF
  op1:
  op2:
    src:
      operand_s: m80dec
      a: M
      t: bcd
  proc: 00+
  desc: Load Binary Coded Decimal
- mnem: FNSTSW
  opcd: DF
  op1:
    dst:
      operand_s: AX
  op2:
  proc: '02'
  desc: Store x87 FPU Status Word
- mnem: FSTSW
  opcd: DF
  op1:
    dst:
      operand_s: AX
  op2:
  proc: '02'
  desc: Store x87 FPU Status Word
- mnem: FILD
  opcd: DF
  op1:
  op2:
    src:
      operand_s: m64int
      a: M
      t: qi
  proc: 00+
  desc: Load Integer
- mnem: FUCOMIP
  opcd: DF
  op1:
    src:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: Unordered Compare Floating Point Values and Set EFLAGS and Pop
- mnem: FBSTP
  opcd: DF
  op1:
    dst:
      operand_s: m80dec
      a: M
      t: bcd
  op2:
  proc: 00+
  desc: Store BCD Integer and Pop
- mnem: FCOMIP
  opcd: DF
  op1:
    src:
      operand_s: ST
  op2:
    src:
      operand_s: STi
      a: EST
      t:
  proc: '07'
  desc: Compare Floating Point Values and Set EFLAGS and Pop
- mnem: FISTP
  opcd: DF
  op1:
    dst:
      operand_s: m64int
      a: M
      t: qi
  op2:
  proc: 00+
  desc: Store Integer and Pop
- mnem: LOOPNE
  opcd: E0
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Decrement count; Jump short if count!=0 and ZF=0
- mnem: LOOPNE
  opcd: E0
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: '10'
  desc: Decrement count; Jump short if count!=0 and ZF=0
- mnem: LOOPE
  opcd: E1
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Decrement count; Jump short if count!=0 and ZF=1
- mnem: LOOPE
  opcd: E1
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: '10'
  desc: Decrement count; Jump short if count!=0 and ZF=1
- mnem: LOOP
  opcd: E2
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: 00+
  desc: Decrement count; Jump short if count!=0
- mnem: LOOP
  opcd: E2
  op1:
  op2:
    src:
      operand_s: rel8
      a: J
      t: bs
  proc: '10'
  desc: Decrement count; Jump short if count!=0
- mnem: JECXZ
  opcd: E3
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump short if eCX register is 0
- mnem: JRCXZ
  opcd: E3
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: '10'
  desc: Jump short if rCX register is 0
- mnem: IN
  opcd: E4
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Input from Port
- mnem: IN
  opcd: E5
  op1:
    dst:
      operand_s: eAX
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Input from Port
- mnem: OUT
  opcd: E6
  op1:
    dst:
      operand_s: imm8
      a: I
      t: b
  op2:
    src:
      operand_s: AL
  proc: 00+
  desc: Output to Port
- mnem: OUT
  opcd: E7
  op1:
    dst:
      operand_s: imm8
      a: I
      t: b
  op2:
    src:
      operand_s: eAX
  proc: 00+
  desc: Output to Port
- mnem: CALL
  opcd: E8
  op1:
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: 00+
  desc: Call Procedure
- mnem: JMP
  opcd: E9
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
  proc: 00+
  desc: Jump
- mnem: JMPF
  opcd: EA
  op1:
    src:
      operand_s: ptr16:16/32
      a: A
      t: p
  op2:
  proc: 00+
  desc: Jump
- mnem: JMP
  opcd: EB
  op1:
    src:
      operand_s: rel8
      a: J
      t: bs
  op2:
  proc: 00+
  desc: Jump
- mnem: IN
  opcd: EC
  op1:
    dst:
      operand_s: AL
  op2:
    src:
      operand_s: DX
  proc: 00+
  desc: Input from Port
- mnem: IN
  opcd: ED
  op1:
    dst:
      operand_s: eAX
  op2:
    src:
      operand_s: DX
  proc: 00+
  desc: Input from Port
- mnem: OUT
  opcd: EE
  op1:
    dst:
      operand_s: DX
  op2:
    src:
      operand_s: AL
  proc: 00+
  desc: Output to Port
- mnem: OUT
  opcd: EF
  op1:
    dst:
      operand_s: DX
  op2:
    src:
      operand_s: eAX
  proc: 00+
  desc: Output to Port
- mnem: LOCK
  opcd: F0
  op1:
  op2:
  proc: 00+
  desc: Assert LOCK# Signal Prefix
- mnem: ICEBP
  opcd: F1
  op1:
  op2:
  proc: '03'
  desc: Call to Interrupt Procedure
- mnem: REPNE
  opcd: F2
  op1:
  op2:
  proc: 00+
  desc: Repeat String Operation Prefix
- mnem: REP
  opcd: F2
  op1:
  op2:
  proc: 00+
  desc: Repeat String Operation Prefix
- mnem: REPNE
  opcd: F2
  op1:
  op2:
  proc: '10'
  desc: Repeat String Operation Prefix
- mnem: REP
  opcd: F2
  op1:
  op2:
  proc: '10'
  desc: Repeat String Operation Prefix
- mnem: REPE
  opcd: F3
  op1:
  op2:
  proc: 00+
  desc: Repeat String Operation Prefix
- mnem: REP
  opcd: F3
  op1:
  op2:
  proc: 00+
  desc: Repeat String Operation Prefix
- mnem: REPE
  opcd: F3
  op1:
  op2:
  proc: '10'
  desc: Repeat String Operation Prefix
- mnem: REP
  opcd: F3
  op1:
  op2:
  proc: '10'
  desc: Repeat String Operation Prefix
- mnem: HLT
  opcd: F4
  op1:
  op2:
  proc: 00+
  desc: Halt
- mnem: CMC
  opcd: F5
  op1:
  op2:
  proc: 00+
  desc: Complement Carry Flag
- mnem: TEST
  opcd: F6
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Compare
- mnem: TEST
  opcd: F6
  op1:
    src:
      operand_s: r/m8
      a: E
      t: b
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Logical Compare
- mnem: NOT
  opcd: F6
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: 00+
  desc: One's Complement Negation
- mnem: NEG
  opcd: F6
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: 00+
  desc: Two's Complement Negation
- mnem: MUL
  opcd: F6
  op1:
  op2:
  proc: 00+
  desc: Unsigned Multiply
- mnem: IMUL
  opcd: F6
  op1:
  op2:
  proc: 00+
  desc: Signed Multiply
- mnem: DIV
  opcd: F6
  op1:
  op2:
  proc: 00+
  desc: Unsigned Divide
- mnem: IDIV
  opcd: F6
  op1:
  op2:
  proc: 00+
  desc: Signed Divide
- mnem: TEST
  opcd: F7
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Compare
- mnem: TEST
  opcd: F7
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm16/32
      a: I
      t: vds
  proc: 00+
  desc: Logical Compare
- mnem: NOT
  opcd: F7
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
  proc: 00+
  desc: One's Complement Negation
- mnem: NEG
  opcd: F7
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
  proc: 00+
  desc: Two's Complement Negation
- mnem: MUL
  opcd: F7
  op1:
  op2:
  proc: 00+
  desc: Unsigned Multiply
- mnem: IMUL
  opcd: F7
  op1:
  op2:
  proc: 00+
  desc: Signed Multiply
- mnem: DIV
  opcd: F7
  op1:
  op2:
  proc: 00+
  desc: Unsigned Divide
- mnem: IDIV
  opcd: F7
  op1:
  op2:
  proc: 00+
  desc: Signed Divide
- mnem: CLC
  opcd: F8
  op1:
  op2:
  proc: 00+
  desc: Clear Carry Flag
- mnem: STC
  opcd: F9
  op1:
  op2:
  proc: 00+
  desc: Set Carry Flag
- mnem: CLI
  opcd: FA
  op1:
  op2:
  proc: 00+
  desc: Clear Interrupt Flag
- mnem: STI
  opcd: FB
  op1:
  op2:
  proc: 00+
  desc: Set Interrupt Flag
- mnem: CLD
  opcd: FC
  op1:
  op2:
  proc: 00+
  desc: Clear Direction Flag
- mnem: STD
  opcd: FD
  op1:
  op2:
  proc: 00+
  desc: Set Direction Flag
- mnem: INC
  opcd: FE
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: 00+
  desc: Increment by 1
- mnem: DEC
  opcd: FE
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: 00+
  desc: Decrement by 1
- mnem: INC
  opcd: FF
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
  proc: 00+
  desc: Increment by 1
- mnem: DEC
  opcd: FF
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
  proc: 00+
  desc: Decrement by 1
- mnem: CALL
  opcd: FF
  op1:
  op2:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  proc: 00+
  desc: Call Procedure
- mnem: CALL
  opcd: FF
  op1:
  op2:
    src:
      operand_s: r/m64
      a: E
      t: q
  proc: '10'
  desc: Call Procedure
- mnem: CALLF
  opcd: FF
  op1:
  op2:
    src:
      operand_s: m16:16/32/64
      a: M
      t: ptp
  proc: 00+
  desc: Call Procedure
- mnem: JMP
  opcd: FF
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: 00+
  desc: Jump
- mnem: JMP
  opcd: FF
  op1:
    src:
      operand_s: r/m64
      a: E
      t: q
  op2:
  proc: '10'
  desc: Jump
- mnem: JMPF
  opcd: FF
  op1:
    src:
      operand_s: m16:16/32/64
      a: M
      t: ptp
  op2:
  proc: 00+
  desc: Jump
- mnem: PUSH
  opcd: FF
  op1:
  op2:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  proc: 00+
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: PUSH
  opcd: FF
  op1:
  op2:
    src:
      operand_s: r/m64/16
      a: E
      t: vq
  proc: '10'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: SLDT
  opcd: '00'
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store Local Descriptor Table Register
- mnem: STR
  opcd: '00'
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store Task Register
- mnem: LLDT
  opcd: '00'
  op1:
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: 00+
  desc: Load Local Descriptor Table Register
- mnem: LTR
  opcd: '00'
  op1:
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: 00+
  desc: Load Task Register
- mnem: VERR
  opcd: '00'
  op1:
    src:
      operand_s: r/m16
      a: E
      t: w
  op2:
  proc: 00+
  desc: Verify a Segment for Reading
- mnem: VERW
  opcd: '00'
  op1:
    src:
      operand_s: r/m16
      a: E
      t: w
  op2:
  proc: 00+
  desc: Verify a Segment for Writing
- mnem: JMPE
  opcd: '00'
  op1:
  op2:
  proc: '99'
  desc: Jump to IA-64 Instruction Set
- mnem: SGDT
  opcd: '01'
  op1:
    dst:
      operand_s: m-
      a: M
      t: s
  op2:
  proc: 00+
  desc: Store Global Descriptor Table Register
- mnem: VMCALL
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Call to VM Monitor
- mnem: VMLAUNCH
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Launch Virtual Machine
- mnem: VMRESUME
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Resume Virtual Machine
- mnem: VMXOFF
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Leave VMX Operation
- mnem: SIDT
  opcd: '01'
  op1:
    dst:
      operand_s: m-
      a: M
      t: s
  op2:
  proc: 00+
  desc: Store Interrupt Descriptor Table Register
- mnem: MONITOR
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Set Up Monitor Address
- mnem: MWAIT
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Monitor Wait
- mnem: LGDT
  opcd: '01'
  op1:
  op2:
    src:
      operand_s: m-
      a: M
      t: s
  proc: 00+
  desc: Load Global Descriptor Table Register
- mnem: XGETBV
  opcd: '01'
  op1:
  op2:
  proc: '12'
  desc: Get Value of Extended Control Register
- mnem: XSETBV
  opcd: '01'
  op1:
  op2:
  proc: '12'
  desc: Set Extended Control Register
- mnem: LIDT
  opcd: '01'
  op1:
  op2:
    src:
      operand_s: m-
      a: M
      t: s
  proc: 00+
  desc: Load Interrupt Descriptor Table Register
- mnem: SMSW
  opcd: '01'
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
  proc: 00+
  desc: Store Machine Status Word
- mnem: LMSW
  opcd: '01'
  op1:
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: 00+
  desc: Load Machine Status Word
- mnem: INVLPG
  opcd: '01'
  op1:
    src:
      operand_s: m
      a: M
      t:
  op2:
  proc: '04'
  desc: Invalidate TLB Entry
- mnem: SWAPGS
  opcd: '01'
  op1:
  op2:
  proc: '10'
  desc: Swap GS Base Register
- mnem: RDTSCP
  opcd: '01'
  op1:
  op2:
  proc: '13'
  desc: Read Time-Stamp Counter and Processor ID
- mnem: LAR
  opcd: '02'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: m16
      a: M
      t: w
  proc: '02'
  desc: Load Access Rights Byte
- mnem: LSL
  opcd: '03'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: m16
      a: M
      t: w
  proc: '02'
  desc: Load Segment Limit
- mnem: LOADALL
  opcd: '05'
  op1:
  op2:
  proc: '02'
  desc: Load All of the CPU Registers
- mnem: SYSCALL
  opcd: '05'
  op1:
  op2:
  proc: '10'
  desc: Fast System Call
- mnem: CLTS
  opcd: '06'
  op1:
  op2:
  proc: '02'
  desc: Clear Task-Switched Flag in CR0
- mnem: LOADALL
  opcd: '07'
  op1:
  op2:
  proc: '03'
  desc: Load All of the CPU Registers
- mnem: SYSRET
  opcd: '07'
  op1:
  op2:
  proc: '10'
  desc: Return From Fast System Call
- mnem: INVD
  opcd: '08'
  op1:
  op2:
  proc: '04'
  desc: Invalidate Internal Caches
- mnem: WBINVD
  opcd: '09'
  op1:
  op2:
  proc: '04'
  desc: Write Back and Invalidate Cache
- mnem: UD2
  opcd: 0B
  op1:
  op2:
  proc: '02'
  desc: Undefined Instruction
- mnem: NOP
  opcd: 0D
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: No Operation
- mnem: MOVUPS
  opcd: '10'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Move Unaligned Packed Single-FP Values
- mnem: MOVSS
  opcd: '10'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Move Scalar Single-FP Values
- mnem: MOVUPD
  opcd: '10'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Move Unaligned Packed Double-FP Value
- mnem: MOVSD
  opcd: '10'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Move Scalar Double-FP Value
- mnem: MOVUPS
  opcd: '11'
  op1:
    dst:
      operand_s: xmm/m(128)
      a: W
      t: ps
  op2:
    src:
      operand_s: xmm(128)
      a: V
      t: ps
  proc: '09'
  desc: Move Unaligned Packed Single-FP Values
- mnem: MOVSS
  opcd: '11'
  op1:
    dst:
      operand_s: xmm/m-
      a: W
      t: ss
  op2:
    src:
      operand_s: xmm-
      a: V
      t: ss
  proc: '09'
  desc: Move Scalar Single-FP Values
- mnem: MOVUPD
  opcd: '11'
  op1:
    dst:
      operand_s: xmm/m
      a: W
      t: pd
  op2:
    src:
      operand_s: xmm
      a: V
      t: pd
  proc: '10'
  desc: Move Unaligned Packed Double-FP Values
- mnem: MOVSD
  opcd: '11'
  op1:
    dst:
      operand_s: xmm/m-
      a: W
      t: sd
  op2:
    src:
      operand_s: xmm-
      a: V
      t: sd
  proc: '10'
  desc: Move Scalar Double-FP Value
- mnem: MOVHLPS
  opcd: '12'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm64
      a: U
      t: q
  proc: '09'
  desc: Move Packed Single-FP Values High to Low
- mnem: MOVLPS
  opcd: '12'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '09'
  desc: Move Low Packed Single-FP Values
- mnem: MOVLPD
  opcd: '12'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '10'
  desc: Move Low Packed Double-FP Value
- mnem: MOVDDUP
  opcd: '12'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '10'
  desc: Move One Double-FP and Duplicate
- mnem: MOVSLDUP
  opcd: '12'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '10'
  desc: Move Packed Single-FP Low and Duplicate
- mnem: MOVLPS
  opcd: '13'
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
    src:
      operand_s: xmm64
      a: V
      t: q
  proc: '09'
  desc: Move Low Packed Single-FP Values
- mnem: MOVLPD
  opcd: '13'
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
    src:
      operand_s: xmm64
      a: V
      t: q
  proc: '10'
  desc: Move Low Packed Double-FP Value
- mnem: UNPCKLPS
  opcd: '14'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '09'
  desc: Unpack and Interleave Low Packed Single-FP Values
- mnem: UNPCKLPD
  opcd: '14'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Unpack and Interleave Low Packed Double-FP Values
- mnem: UNPCKHPS
  opcd: '15'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '09'
  desc: Unpack and Interleave High Packed Single-FP Values
- mnem: UNPCKHPD
  opcd: '15'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Unpack and Interleave High Packed Double-FP Values
- mnem: MOVLHPS
  opcd: '16'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm64
      a: U
      t: q
  proc: '09'
  desc: Move Packed Single-FP Values Low to High
- mnem: MOVHPS
  opcd: '16'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '09'
  desc: Move High Packed Single-FP Values
- mnem: MOVHPD
  opcd: '16'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '10'
  desc: Move High Packed Double-FP Value
- mnem: MOVSHDUP
  opcd: '16'
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '10'
  desc: Move Packed Single-FP High and Duplicate
- mnem: MOVHPS
  opcd: '17'
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
    src:
      operand_s: xmm64
      a: V
      t: q
  proc: '09'
  desc: Move High Packed Single-FP Values
- mnem: MOVHPD
  opcd: '17'
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
    src:
      operand_s: xmm64
      a: V
      t: q
  proc: '10'
  desc: Move High Packed Double-FP Value
- mnem: HINT_NOP
  opcd: '18'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: PREFETCHNTA
  opcd: '18'
  op1:
    src:
      operand_s: m8
      a: M
      t: b
  op2:
  proc: '09'
  desc: Prefetch Data Into Caches
- mnem: PREFETCHT0
  opcd: '18'
  op1:
    src:
      operand_s: m8
      a: M
      t: b
  op2:
  proc: '09'
  desc: Prefetch Data Into Caches
- mnem: PREFETCHT1
  opcd: '18'
  op1:
    src:
      operand_s: m8
      a: M
      t: b
  op2:
  proc: '09'
  desc: Prefetch Data Into Caches
- mnem: PREFETCHT2
  opcd: '18'
  op1:
    src:
      operand_s: m8
      a: M
      t: b
  op2:
  proc: '09'
  desc: Prefetch Data Into Caches
- mnem: HINT_NOP
  opcd: '18'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: '18'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: '18'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: '18'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: '19'
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1A
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1B
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1C
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1D
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1E
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '10'
  desc: No Operation
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: HINT_NOP
  opcd: 1F
  op1:
    src:
      operand_s: r/m16/32
      a: E
      t: v
  op2:
  proc: '07'
  desc: Hintable NOP
- mnem: MOV
  opcd: '20'
  op1:
    dst:
      operand_s: r32
      a: R
      t: d
  op2:
    src:
      operand_s: CRn32
      a: C
      t: d
  proc: '03'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '20'
  op1:
    dst:
      operand_s: r32
      a: H
      t: d
  op2:
    src:
      operand_s: CRn32
      a: C
      t: d
  proc: '03'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '20'
  op1:
    dst:
      operand_s: r64
      a: R
      t: q
  op2:
    src:
      operand_s: CRn64
      a: C
      t: q
  proc: '10'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '20'
  op1:
    dst:
      operand_s: r64
      a: H
      t: q
  op2:
    src:
      operand_s: CRn64
      a: C
      t: q
  proc: '10'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '21'
  op1:
    dst:
      operand_s: r32
      a: R
      t: d
  op2:
    src:
      operand_s: DRn32
      a: D
      t: d
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '21'
  op1:
    dst:
      operand_s: r32
      a: H
      t: d
  op2:
    src:
      operand_s: DRn32
      a: D
      t: d
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '21'
  op1:
    dst:
      operand_s: r64
      a: R
      t: q
  op2:
    src:
      operand_s: DRn64
      a: D
      t: q
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '21'
  op1:
    dst:
      operand_s: r64
      a: H
      t: q
  op2:
    src:
      operand_s: DRn64
      a: D
      t: q
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '22'
  op1:
    dst:
      operand_s: CRn32
      a: C
      t: d
  op2:
    src:
      operand_s: r32
      a: R
      t: d
  proc: '03'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '22'
  op1:
    dst:
      operand_s: CRn32
      a: C
      t: d
  op2:
    src:
      operand_s: r32
      a: H
      t: d
  proc: '03'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '22'
  op1:
    dst:
      operand_s: CRn64
      a: C
      t: q
  op2:
    src:
      operand_s: r64
      a: R
      t: q
  proc: '10'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '22'
  op1:
    dst:
      operand_s: CRn64
      a: C
      t: q
  op2:
    src:
      operand_s: r64
      a: H
      t: q
  proc: '10'
  desc: Move to/from Control Registers
- mnem: MOV
  opcd: '23'
  op1:
    dst:
      operand_s: DRn32
      a: D
      t: d
  op2:
    src:
      operand_s: r32
      a: R
      t: d
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '23'
  op1:
    dst:
      operand_s: DRn64
      a: D
      t: q
  op2:
    src:
      operand_s: r64
      a: H
      t: q
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '23'
  op1:
    dst:
      operand_s: DRn64
      a: D
      t: q
  op2:
    src:
      operand_s: r64
      a: R
      t: q
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '23'
  op1:
    dst:
      operand_s: DRn64
      a: D
      t: q
  op2:
    src:
      operand_s: r64
      a: H
      t: q
  proc: '03'
  desc: Move to/from Debug Registers
- mnem: MOV
  opcd: '24'
  op1:
    dst:
      operand_s: r32
      a: R
      t: d
  op2:
    src:
      operand_s: TRn32
      a: T
      t: d
  proc: '03'
  desc: Move to/from Test Registers
- mnem: MOV
  opcd: '24'
  op1:
    dst:
      operand_s: r32
      a: H
      t: d
  op2:
    src:
      operand_s: TRn32
      a: T
      t: d
  proc: '03'
  desc: Move to/from Test Registers
- mnem: MOV
  opcd: '26'
  op1:
    dst:
      operand_s: TRn32
      a: T
      t: d
  op2:
    src:
      operand_s: r32
      a: R
      t: d
  proc: '03'
  desc: Move to/from Test Registers
- mnem: MOV
  opcd: '26'
  op1:
    dst:
      operand_s: TRn32
      a: T
      t: d
  op2:
    src:
      operand_s: r32
      a: H
      t: d
  proc: '03'
  desc: Move to/from Test Registers
- mnem: MOVAPS
  opcd: '28'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Move Aligned Packed Single-FP Values
- mnem: MOVAPD
  opcd: '28'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Move Aligned Packed Double-FP Values
- mnem: MOVAPS
  opcd: '29'
  op1:
    dst:
      operand_s: xmm/m(128)
      a: W
      t: ps
  op2:
    src:
      operand_s: xmm(128)
      a: V
      t: ps
  proc: '09'
  desc: Move Aligned Packed Single-FP Values
- mnem: MOVAPD
  opcd: '29'
  op1:
    dst:
      operand_s: xmm/m
      a: W
      t: pd
  op2:
    src:
      operand_s: xmm
      a: V
      t: pd
  proc: '10'
  desc: Move Aligned Packed Double-FP Values
- mnem: CVTPI2PS
  opcd: 2A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: mm/m64(64)
      a: Q
      t: pi
  proc: '09'
  desc: 'Convert Packed DW Integers to '
- mnem: CVTSI2SS
  opcd: 2A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: r/m32/64
      a: E
      t: dqp
  proc: '09'
  desc: Convert DW Integer to Scalar Single-FP Value
- mnem: CVTPI2PD
  opcd: 2A
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: mm/m64(64)
      a: Q
      t: pi
  proc: '10'
  desc: 'Convert Packed DW Integers to '
- mnem: CVTSI2SD
  opcd: 2A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: r/m32/64
      a: E
      t: dqp
  proc: '10'
  desc: Convert DW Integer to Scalar Double-FP Value
- mnem: MOVNTPS
  opcd: 2B
  op1:
    dst:
      operand_s: m(128)
      a: M
      t: ps
  op2:
    src:
      operand_s: xmm(128)
      a: V
      t: ps
  proc: '09'
  desc: Store Packed Single-FP Values Using Non-Temporal Hint
- mnem: MOVNTPD
  opcd: 2B
  op1:
    dst:
      operand_s: m
      a: M
      t: pd
  op2:
    src:
      operand_s: xmm
      a: V
      t: pd
  proc: '10'
  desc: Store Packed Double-FP Values Using Non-Temporal Hint
- mnem: CVTTPS2PI
  opcd: 2C
  op1:
    dst:
      operand_s: mm(64)
      a: P
      t: pi
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: psq
  proc: '09'
  desc: 'Convert with Trunc. Packed Single-FP Values to '
- mnem: CVTTSS2SI
  opcd: 2C
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Convert with Trunc. Scalar Single-FP Value to DW Integer
- mnem: CVTTPD2PI
  opcd: 2C
  op1:
    dst:
      operand_s: mm(64)
      a: P
      t: pi
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: 'Convert with Trunc. Packed Double-FP Values to '
- mnem: CVTTSD2SI
  opcd: 2C
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Conv. with Trunc. Scalar Double-FP Value to Signed DW Int
- mnem: CVTPS2PI
  opcd: 2D
  op1:
    dst:
      operand_s: mm(64)
      a: P
      t: pi
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: psq
  proc: '09'
  desc: 'Convert Packed Single-FP Values to '
- mnem: CVTSS2SI
  opcd: 2D
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Convert Scalar Single-FP Value to DW Integer
- mnem: CVTPD2PI
  opcd: 2D
  op1:
    dst:
      operand_s: mm(64)
      a: P
      t: pi
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: 'Convert Packed Double-FP Values to '
- mnem: CVTSD2SI
  opcd: 2D
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Convert Scalar Double-FP Value to DW Integer
- mnem: UCOMISS
  opcd: 2E
  op1:
    src:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Unordered Compare Scalar Single-FP Values and Set EFLAGS
- mnem: UCOMISD
  opcd: 2E
  op1:
    src:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Unordered Compare Scalar Double-FP Values and Set EFLAGS
- mnem: COMISS
  opcd: 2F
  op1:
    src:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Compare Scalar Ordered Single-FP Values and Set EFLAGS
- mnem: COMISD
  opcd: 2F
  op1:
    src:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Compare Scalar Ordered Double-FP Values and Set EFLAGS
- mnem: WRMSR
  opcd: '30'
  op1:
  op2:
  proc: '05'
  desc: Write to Model Specific Register
- mnem: RDTSC
  opcd: '31'
  op1:
  op2:
  proc: '05'
  desc: Read Time-Stamp Counter
- mnem: RDMSR
  opcd: '32'
  op1:
  op2:
  proc: '05'
  desc: Read from Model Specific Register
- mnem: RDPMC
  opcd: '33'
  op1:
  op2:
  proc: '06'
  desc: Read Performance-Monitoring Counters
- mnem: SYSENTER
  opcd: '34'
  op1:
  op2:
  proc: '08'
  desc: Fast System Call
- mnem: SYSENTER
  opcd: '34'
  op1:
  op2:
  proc: '10'
  desc: Fast System Call
- mnem: SYSEXIT
  opcd: '35'
  op1:
  op2:
  proc: '08'
  desc: Fast Return from Fast System Call
- mnem: GETSEC
  opcd: '37'
  op1:
  op2:
  proc: '12'
  desc: GETSEC Leaf Functions
- mnem: PSHUFB
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Shuffle Bytes
- mnem: PSHUFB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Shuffle Bytes
- mnem: PHADDW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Add
- mnem: PHADDW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Add
- mnem: PHADDD
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Add
- mnem: PHADDD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Add
- mnem: PHADDSW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Add and Saturate
- mnem: PHADDSW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Add and Saturate
- mnem: PMADDUBSW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Multiply and Add Packed Signed and Unsigned Bytes
- mnem: PMADDUBSW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Multiply and Add Packed Signed and Unsigned Bytes
- mnem: PHSUBW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Subtract
- mnem: PHSUBW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Subtract
- mnem: PHSUBD
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Subtract
- mnem: PHSUBD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Subtract
- mnem: PHSUBSW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Horizontal Subtract and Saturate
- mnem: PHSUBSW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Subtract and Saturate
- mnem: PSIGNB
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed SIGN
- mnem: PSIGNB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed SIGN
- mnem: PSIGNW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed SIGN
- mnem: PSIGNW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed SIGN
- mnem: PSIGND
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed SIGN
- mnem: PSIGND
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed SIGN
- mnem: PMULHRSW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Multiply High with Round and Scale
- mnem: PMULHRSW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Multiply High with Round and Scale
- mnem: PBLENDVB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Variable Blend Packed Bytes
- mnem: BLENDVPS
  opcd: '38'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '12'
  desc: Variable Blend Packed Single-FP Values
- mnem: BLENDVPD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '12'
  desc: Variable Blend Packed Double-FP Values
- mnem: PTEST
  opcd: '38'
  op1:
    src:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Logical Compare
- mnem: PABSB
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Absolute Value
- mnem: PABSB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Absolute Value
- mnem: PABSW
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Absolute Value
- mnem: PABSW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Absolute Value
- mnem: PABSD
  opcd: '38'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Absolute Value
- mnem: PABSD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Absolute Value
- mnem: PMOVSXBW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMOVSXBD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m32
      a: M
      t: d
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMOVSXBQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m16
      a: M
      t: w
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMOVSXWD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMOVSXWQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m32
      a: M
      t: d
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMOVSXDQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Sign Extend
- mnem: PMULDQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Multiply Packed Signed Dword Integers
- mnem: PCMPEQQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Compare Packed Qword Data for Equal
- mnem: MOVNTDQA
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '12'
  desc: Load Double Quadword Non-Temporal Aligned Hint
- mnem: PACKUSDW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Pack with Unsigned Saturation
- mnem: PMOVZXBW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PMOVZXBD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m32
      a: M
      t: d
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PMOVZXBQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m16
      a: M
      t: w
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PMOVZXWD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PMOVZXWQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m32
      a: M
      t: d
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PMOVZXDQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m64
      a: M
      t: q
  proc: '12'
  desc: Packed Move with Zero Extend
- mnem: PCMPGTQ
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Compare Packed Qword Data for Greater Than
- mnem: PMINSB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Minimum of Packed Signed Byte Integers
- mnem: PMINSD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Minimum of Packed Signed Dword Integers
- mnem: PMINUW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Minimum of Packed Unsigned Word Integers
- mnem: PMINUD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Minimum of Packed Unsigned Dword Integers
- mnem: PMAXSB
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Maximum of Packed Signed Byte Integers
- mnem: PMAXSD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Maximum of Packed Signed Dword Integers
- mnem: PMAXUW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Maximum of Packed Unsigned Word Integers
- mnem: PMAXUD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Maximum of Packed Unsigned Dword Integers
- mnem: PMULLD
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Multiply Packed Signed Dword Integers and Store Low Result
- mnem: PHMINPOSUW
  opcd: '38'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Horizontal Word Minimum
- mnem: INVEPT
  opcd: '38'
  op1:
    src:
      operand_s: r32
      a: G
      t: d
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '12'
  desc: Invalidate Translations Derived from EPT
- mnem: INVEPT
  opcd: '38'
  op1:
    src:
      operand_s: r64
      a: G
      t: q
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '12'
  desc: Invalidate Translations Derived from EPT
- mnem: INVVPID
  opcd: '38'
  op1:
    src:
      operand_s: r32
      a: G
      t: d
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '12'
  desc: Invalidate Translations Based on VPID
- mnem: INVVPID
  opcd: '38'
  op1:
    src:
      operand_s: r64
      a: G
      t: q
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '12'
  desc: Invalidate Translations Based on VPID
- mnem: MOVBE
  opcd: '38'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: m16/32/64
      a: M
      t: vqp
  proc: '12'
  desc: Move Data After Swapping Bytes
- mnem: CRC32
  opcd: '38'
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: '12'
  desc: Accumulate CRC32 Value
- mnem: MOVBE
  opcd: '38'
  op1:
    dst:
      operand_s: m16/32/64
      a: M
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '12'
  desc: Move Data After Swapping Bytes
- mnem: CRC32
  opcd: '38'
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '12'
  desc: Accumulate CRC32 Value
- mnem: ROUNDPS
  opcd: 3A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '12'
  desc: Round Packed Single-FP Values
- mnem: ROUNDPD
  opcd: 3A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '12'
  desc: Round Packed Double-FP Values
- mnem: ROUNDSS
  opcd: 3A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '12'
  desc: Round Scalar Single-FP Values
- mnem: ROUNDSD
  opcd: 3A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '12'
  desc: Round Scalar Double-FP Values
- mnem: BLENDPS
  opcd: 3A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '12'
  desc: Blend Packed Single-FP Values
- mnem: BLENDPD
  opcd: 3A
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '12'
  desc: Blend Packed Double-FP Values
- mnem: PBLENDW
  opcd: 3A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Blend Packed Words
- mnem: PALIGNR
  opcd: 3A
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '12'
  desc: Packed Align Right
- mnem: PALIGNR
  opcd: 3A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Packed Align Right
- mnem: PEXTRB
  opcd: 3A
  op1:
    dst:
      operand_s: m8
      a: M
      t: b
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Extract Byte
- mnem: PEXTRW
  opcd: 3A
  op1:
    dst:
      operand_s: m16
      a: M
      t: w
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Extract Word
- mnem: PEXTRQ
  opcd: 3A
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Extract Dword/Qword
- mnem: EXTRACTPS
  opcd: 3A
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Extract Packed Single-FP Value
- mnem: PINSRB
  opcd: 3A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m8
      a: M
      t: b
  proc: '12'
  desc: Insert Byte
- mnem: INSERTPS
  opcd: 3A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: m32
      a: M
      t: d
  proc: '12'
  desc: Insert Packed Single-FP Value
- mnem: PINSRQ
  opcd: 3A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '12'
  desc: Insert Dword/Qword
- mnem: DPPS
  opcd: 3A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '12'
  desc: Dot Product of Packed Single-FP Values
- mnem: DPPD
  opcd: 3A
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '12'
  desc: Dot Product of Packed Double-FP Values
- mnem: MPSADBW
  opcd: 3A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '12'
  desc: Compute Multiple Packed Sums of Absolute Difference
- mnem: PCMPESTRM
  opcd: 3A
  op1:
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Packed Compare Explicit Length Strings, Return Mask
- mnem: PCMPESTRI
  opcd: 3A
  op1:
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Packed Compare Explicit Length Strings, Return Index
- mnem: PCMPISTRM
  opcd: 3A
  op1:
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Packed Compare Implicit Length Strings, Return Mask
- mnem: PCMPISTRI
  opcd: 3A
  op1:
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '12'
  desc: Packed Compare Implicit Length Strings, Return Index
- mnem: CMOVO
  opcd: '40'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - overflow (OF=1)
- mnem: CMOVNO
  opcd: '41'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not overflow (OF=0)
- mnem: CMOVC
  opcd: '42'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - below/not above or equal/carry (CF=1)
- mnem: CMOVNC
  opcd: '43'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not below/above or equal/not carry (CF=0)
- mnem: CMOVE
  opcd: '44'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - zero/equal (ZF=1)
- mnem: CMOVNE
  opcd: '45'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not zero/not equal (ZF=0)
- mnem: CMOVNA
  opcd: '46'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - below or equal/not above (CF=1 OR ZF=1)
- mnem: CMOVA
  opcd: '47'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not below or equal/above (CF=0 AND ZF=0)
- mnem: CMOVS
  opcd: '48'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - sign (SF=1)
- mnem: CMOVNS
  opcd: '49'
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not sign (SF=0)
- mnem: CMOVPE
  opcd: 4A
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - parity/parity even (PF=1)
- mnem: CMOVPO
  opcd: 4B
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not parity/parity odd (PF=0)
- mnem: CMOVNGE
  opcd: 4C
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - less/not greater (SF!=OF)
- mnem: CMOVGE
  opcd: 4D
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not less/greater or equal (SF=OF)
- mnem: CMOVNG
  opcd: 4E
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - less or equal/not greater ((ZF=1) OR (SF!=OF))
- mnem: CMOVG
  opcd: 4F
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '07'
  desc: Conditional Move - not less nor equal/greater ((ZF=0) AND (SF=OF))
- mnem: MOVMSKPS
  opcd: '50'
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm(128)
      a: U
      t: ps
  proc: '09'
  desc: Extract Packed Single-FP Sign Mask
- mnem: MOVMSKPD
  opcd: '50'
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm
      a: U
      t: pd
  proc: '10'
  desc: Extract Packed Double-FP Sign Mask
- mnem: SQRTPS
  opcd: '51'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Compute Square Roots of Packed Single-FP Values
- mnem: SQRTSS
  opcd: '51'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Compute Square Root of Scalar Single-FP Value
- mnem: SQRTPD
  opcd: '51'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Compute Square Roots of Packed Double-FP Values
- mnem: SQRTSD
  opcd: '51'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Compute Square Root of Scalar Double-FP Value
- mnem: RSQRTPS
  opcd: '52'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Compute Recipr. of Square Roots of Packed Single-FP Values
- mnem: RSQRTSS
  opcd: '52'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Compute Recipr. of Square Root of Scalar Single-FP Value
- mnem: RCPPS
  opcd: '53'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Compute Reciprocals of Packed Single-FP Values
- mnem: RCPSS
  opcd: '53'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Compute Reciprocal of Scalar Single-FP Values
- mnem: ANDPS
  opcd: '54'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Bitwise Logical AND of Packed Single-FP Values
- mnem: ANDPD
  opcd: '54'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Bitwise Logical AND of Packed Double-FP Values
- mnem: ANDNPS
  opcd: '55'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Bitwise Logical AND NOT of Packed Single-FP Values
- mnem: ANDNPD
  opcd: '55'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Bitwise Logical AND NOT of Packed Double-FP Values
- mnem: ORPS
  opcd: '56'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Bitwise Logical OR of Single-FP Values
- mnem: ORPD
  opcd: '56'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Bitwise Logical OR of Double-FP Values
- mnem: XORPS
  opcd: '57'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Bitwise Logical XOR for Single-FP Values
- mnem: XORPD
  opcd: '57'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Bitwise Logical XOR for Double-FP Values
- mnem: ADDPS
  opcd: '58'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Add Packed Single-FP Values
- mnem: ADDSS
  opcd: '58'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Add Scalar Single-FP Values
- mnem: ADDPD
  opcd: '58'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Add Packed Double-FP Values
- mnem: ADDSD
  opcd: '58'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Add Scalar Double-FP Values
- mnem: MULPS
  opcd: '59'
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Multiply Packed Single-FP Values
- mnem: MULSS
  opcd: '59'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Multiply Scalar Single-FP Value
- mnem: MULPD
  opcd: '59'
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Multiply Packed Double-FP Values
- mnem: MULSD
  opcd: '59'
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Multiply Scalar Double-FP Values
- mnem: CVTPS2PD
  opcd: 5A
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: 'Convert Packed Single-FP Values to '
- mnem: CVTPD2PS
  opcd: 5A
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: 'Convert Packed Double-FP Values to '
- mnem: CVTSS2SD
  opcd: 5A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '10'
  desc: 'Convert Scalar Single-FP Value to Scalar Double-FP Value '
- mnem: CVTSD2SS
  opcd: 5A
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Convert Scalar Double-FP Value to Scalar Single-FP Value
- mnem: CVTDQ2PS
  opcd: 5B
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: 'Convert Packed DW Integers to '
- mnem: CVTPS2DQ
  opcd: 5B
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: 'Convert Packed Single-FP Values to '
- mnem: CVTTPS2DQ
  opcd: 5B
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: 'Convert with Trunc. Packed Single-FP Values to '
- mnem: SUBPS
  opcd: 5C
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Subtract Packed Single-FP Values
- mnem: SUBSS
  opcd: 5C
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Subtract Scalar Single-FP Values
- mnem: SUBPD
  opcd: 5C
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Subtract Packed Double-FP Values
- mnem: SUBSD
  opcd: 5C
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Subtract Scalar Double-FP Values
- mnem: MINPS
  opcd: 5D
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Return Minimum Packed Single-FP Values
- mnem: MINSS
  opcd: 5D
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Return Minimum Scalar Single-FP Value
- mnem: MINPD
  opcd: 5D
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Return Minimum Packed Double-FP Values
- mnem: MINSD
  opcd: 5D
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Return Minimum Scalar Double-FP Value
- mnem: DIVPS
  opcd: 5E
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Divide Packed Single-FP Values
- mnem: DIVSS
  opcd: 5E
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Divide Scalar Single-FP Values
- mnem: DIVPD
  opcd: 5E
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Divide Packed Double-FP Values
- mnem: DIVSD
  opcd: 5E
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Divide Scalar Double-FP Values
- mnem: MAXPS
  opcd: 5F
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Return Maximum Packed Single-FP Values
- mnem: MAXSS
  opcd: 5F
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Return Maximum Scalar Single-FP Value
- mnem: MAXPD
  opcd: 5F
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Return Maximum Packed Double-FP Values
- mnem: MAXSD
  opcd: 5F
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Return Maximum Scalar Double-FP Value
- mnem: PUNPCKLBW
  opcd: '60'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Unpack Low Data
- mnem: PUNPCKLBW
  opcd: '60'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack Low Data
- mnem: PUNPCKLWD
  opcd: '61'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Unpack Low Data
- mnem: PUNPCKLWD
  opcd: '61'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack Low Data
- mnem: PUNPCKLDQ
  opcd: '62'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Unpack Low Data
- mnem: PUNPCKLDQ
  opcd: '62'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack Low Data
- mnem: PACKSSWB
  opcd: '63'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Pack with Signed Saturation
- mnem: PACKSSWB
  opcd: '63'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Pack with Signed Saturation
- mnem: PCMPGTB
  opcd: '64'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PCMPGTB
  opcd: '64'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PCMPGTW
  opcd: '65'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PCMPGTW
  opcd: '65'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PCMPGTD
  opcd: '66'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PCMPGTD
  opcd: '66'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Signed Integers for Greater Than
- mnem: PACKUSWB
  opcd: '67'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Pack with Unsigned Saturation
- mnem: PACKUSWB
  opcd: '67'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Pack with Unsigned Saturation
- mnem: PUNPCKHBW
  opcd: '68'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Unpack High Data
- mnem: PUNPCKHBW
  opcd: '68'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack High Data
- mnem: PUNPCKHWD
  opcd: '69'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Unpack High Data
- mnem: PUNPCKHWD
  opcd: '69'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack High Data
- mnem: PUNPCKHDQ
  opcd: 6A
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Unpack High Data
- mnem: PUNPCKHDQ
  opcd: 6A
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack High Data
- mnem: PACKSSDW
  opcd: 6B
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Pack with Signed Saturation
- mnem: PACKSSDW
  opcd: 6B
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Pack with Signed Saturation
- mnem: PUNPCKLQDQ
  opcd: 6C
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack Low Data
- mnem: PUNPCKHQDQ
  opcd: 6D
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Unpack High Data
- mnem: MOVD
  opcd: 6E
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '06'
  desc: Move Doubleword
- mnem: MOVQ
  opcd: 6E
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '10'
  desc: Move Doubleword/Quadword
- mnem: MOVD
  opcd: 6E
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '10'
  desc: Move Doubleword
- mnem: MOVQ
  opcd: 6E
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '10'
  desc: Move Doubleword/Quadword
- mnem: MOVQ
  opcd: 6F
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Move Quadword
- mnem: MOVDQA
  opcd: 6F
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Move Aligned Double Quadword
- mnem: MOVDQU
  opcd: 6F
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Move Unaligned Double Quadword
- mnem: PSHUFW
  opcd: '70'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Shuffle Packed Words
- mnem: PSHUFLW
  opcd: '70'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shuffle Packed Low Words
- mnem: PSHUFHW
  opcd: '70'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shuffle Packed High Words
- mnem: PSHUFD
  opcd: '70'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shuffle Packed Doublewords
- mnem: PSRLW
  opcd: '71'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Right Logical
- mnem: PSRLW
  opcd: '71'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Right Logical
- mnem: PSRAW
  opcd: '71'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSRAW
  opcd: '71'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSLLW
  opcd: '71'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLW
  opcd: '71'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PSRLD
  opcd: '72'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Double Quadword Right Logical
- mnem: PSRLD
  opcd: '72'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Double Quadword Right Logical
- mnem: PSRAD
  opcd: '72'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSRAD
  opcd: '72'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSLLD
  opcd: '72'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLD
  opcd: '72'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PSRLQ
  opcd: '73'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Right Logical
- mnem: PSRLQ
  opcd: '73'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Right Logical
- mnem: PSRLDQ
  opcd: '73'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Double Quadword Right Logical
- mnem: PSLLQ
  opcd: '73'
  op1:
    dst:
      operand_s: mm64
      a: N
      t: q
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLQ
  opcd: '73'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PSLLDQ
  opcd: '73'
  op1:
    dst:
      operand_s: xmm128
      a: U
      t: dq
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: '10'
  desc: Shift Double Quadword Left Logical
- mnem: PCMPEQB
  opcd: '74'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Compare Packed Data for Equal
- mnem: PCMPEQB
  opcd: '74'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Data for Equal
- mnem: PCMPEQW
  opcd: '75'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Compare Packed Data for Equal
- mnem: PCMPEQW
  opcd: '75'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Data for Equal
- mnem: PCMPEQD
  opcd: '76'
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Compare Packed Data for Equal
- mnem: PCMPEQD
  opcd: '76'
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Compare Packed Data for Equal
- mnem: EMMS
  opcd: '77'
  op1:
  op2:
  proc: '06'
  desc: Empty MMX Technology State
- mnem: VMREAD
  opcd: '78'
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: r32
      a: G
      t: d
  proc: '10'
  desc: Read Field from Virtual-Machine Control Structure
- mnem: VMREAD
  opcd: '78'
  op1:
    dst:
      operand_s: r/m64
      a: E
      t: q
  op2:
    src:
      operand_s: r64
      a: G
      t: q
  proc: '10'
  desc: Read Field from Virtual-Machine Control Structure
- mnem: VMWRITE
  opcd: '79'
  op1:
    src:
      operand_s: r32
      a: G
      t: d
  op2:
    src:
      operand_s: r/m32
      a: E
      t: d
  proc: '10'
  desc: Write Field to Virtual-Machine Control Structure
- mnem: VMWRITE
  opcd: '79'
  op1:
    src:
      operand_s: r64
      a: G
      t: q
  op2:
    src:
      operand_s: r/m64
      a: E
      t: q
  proc: '10'
  desc: Write Field to Virtual-Machine Control Structure
- mnem: HADDPD
  opcd: 7C
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Packed Double-FP Horizontal Add
- mnem: HADDPS
  opcd: 7C
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: Packed Single-FP Horizontal Add
- mnem: HSUBPD
  opcd: 7D
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Packed Double-FP Horizontal Subtract
- mnem: HSUBPS
  opcd: 7D
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: Packed Single-FP Horizontal Subtract
- mnem: MOVD
  opcd: 7E
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: mm64
      a: P
      t: q
  proc: '06'
  desc: Move Doubleword
- mnem: MOVQ
  opcd: 7E
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: mm64
      a: P
      t: q
  proc: '10'
  desc: Move Doubleword/Quadword
- mnem: MOVD
  opcd: 7E
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Move Doubleword
- mnem: MOVQ
  opcd: 7E
  op1:
    dst:
      operand_s: r/m32
      a: E
      t: d
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Move Doubleword/Quadword
- mnem: MOVQ
  opcd: 7E
  op1:
    dst:
      operand_s: xmm64
      a: V
      t: q
  op2:
    src:
      operand_s: xmm/m64
      a: W
      t: q
  proc: '10'
  desc: Move Quadword
- mnem: MOVQ
  opcd: 7F
  op1:
    dst:
      operand_s: mm/m6464
      a: Q
      t: q
  op2:
    src:
      operand_s: mm64
      a: P
      t: q
  proc: '06'
  desc: Move Quadword
- mnem: MOVDQA
  opcd: 7F
  op1:
    dst:
      operand_s: xmm/m128
      a: W
      t: dq
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Move Aligned Double Quadword
- mnem: MOVDQU
  opcd: 7F
  op1:
    dst:
      operand_s: xmm/m128
      a: W
      t: dq
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Move Unaligned Double Quadword
- mnem: JO
  opcd: '80'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
  proc: '03'
  desc: Jump near if overflow (OF=1)
- mnem: JNO
  opcd: '81'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
  proc: '03'
  desc: Jump near if not overflow (OF=0)
- mnem: JC
  opcd: '82'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if below/not above or equal/carry (CF=1)
- mnem: JNC
  opcd: '83'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not below/above or equal/not carry (CF=0)
- mnem: JE
  opcd: '84'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if zero/equal (ZF=1)
- mnem: JNE
  opcd: '85'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not zero/not equal (ZF=0)
- mnem: JNA
  opcd: '86'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if below or equal/not above (CF=1 OR ZF=1)
- mnem: JA
  opcd: '87'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not below or equal/above (CF=0 AND ZF=0)
- mnem: JS
  opcd: '88'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
  proc: '03'
  desc: Jump near if sign (SF=1)
- mnem: JNS
  opcd: '89'
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
  proc: '03'
  desc: Jump near if not sign (SF=0)
- mnem: JPE
  opcd: 8A
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if parity/parity even (PF=1)
- mnem: JPO
  opcd: 8B
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not parity/parity odd (PF=0)
- mnem: JNGE
  opcd: 8C
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if less/not greater (SF!=OF)
- mnem: JGE
  opcd: 8D
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not less/greater or equal (SF=OF)
- mnem: JNG
  opcd: 8E
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if less or equal/not greater ((ZF=1) OR (SF!=OF))
- mnem: JG
  opcd: 8F
  op1:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  op2:
    src:
      operand_s: rel16/32
      a: J
      t: vds
  proc: '03'
  desc: Jump near if not less nor equal/greater ((ZF=0) AND (SF=OF))
- mnem: SETO
  opcd: '90'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: '03'
  desc: Set Byte on Condition - overflow (OF=1)
- mnem: SETNO
  opcd: '91'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: '03'
  desc: Set Byte on Condition - not overflow (OF=0)
- mnem: SETC
  opcd: '92'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - below/not above or equal/carry (CF=1)
- mnem: SETNC
  opcd: '93'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not below/above or equal/not carry (CF=0)
- mnem: SETE
  opcd: '94'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - zero/equal (ZF=1)
- mnem: SETNE
  opcd: '95'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not zero/not equal (ZF=0)
- mnem: SETNA
  opcd: '96'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - below or equal/not above (CF=1 OR ZF=1)
- mnem: SETA
  opcd: '97'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not below or equal/above (CF=0 AND ZF=0)
- mnem: SETS
  opcd: '98'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: '03'
  desc: Set Byte on Condition - sign (SF=1)
- mnem: SETNS
  opcd: '99'
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: '03'
  desc: Set Byte on Condition - not sign (SF=0)
- mnem: SETPE
  opcd: 9A
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - parity/parity even (PF=1)
- mnem: SETPO
  opcd: 9B
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not parity/parity odd (PF=0)
- mnem: SETNGE
  opcd: 9C
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - less/not greater (SF!=OF)
- mnem: SETGE
  opcd: 9D
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not less/greater or equal (SF=OF)
- mnem: SETNG
  opcd: 9E
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - less or equal/not greater ((ZF=1) OR (SF!=OF))
- mnem: SETG
  opcd: 9F
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Set Byte on Condition - not less nor equal/greater ((ZF=0) AND (SF=OF))
- mnem: PUSH
  opcd: A0
  op1:
  op2:
    src:
      operand_s: FS
  proc: '03'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: A1
  op1:
    dst:
      operand_s: FS
  op2:
  proc: '03'
  desc: Pop a Value from the Stack
- mnem: CPUID
  opcd: A2
  op1:
  op2:
  proc: '04'
  desc: CPU Identification
- mnem: BT
  opcd: A3
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Bit Test
- mnem: SHLD
  opcd: A4
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Double Precision Shift Left
- mnem: SHLD
  opcd: A5
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Double Precision Shift Left
- mnem: PUSH
  opcd: A8
  op1:
  op2:
    src:
      operand_s: GS
  proc: '03'
  desc: Push Word, Doubleword or Quadword Onto the Stack
- mnem: POP
  opcd: A9
  op1:
    dst:
      operand_s: GS
  op2:
  proc: '03'
  desc: Pop a Value from the Stack
- mnem: RSM
  opcd: AA
  op1:
  op2:
  proc: '03'
  desc: Resume from System Management Mode
- mnem: BTS
  opcd: AB
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Bit Test and Set
- mnem: SHRD
  opcd: AC
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Double Precision Shift Right
- mnem: SHRD
  opcd: AD
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Double Precision Shift Right
- mnem: FXSAVE
  opcd: AE
  op1:
    dst:
      operand_s: m512
      a: M
      t: stx
  op2:
  proc: '08'
  desc: Save x87 FPU, MMX, XMM, and MXCSR State
- mnem: FXSAVE
  opcd: AE
  op1:
    dst:
      operand_s: m512
      a: M
      t: stx
  op2:
  proc: '10'
  desc: Save x87 FPU, MMX, XMM, and MXCSR State
- mnem: FXRSTOR
  opcd: AE
  op1:
  op2:
  proc: '08'
  desc: Restore x87 FPU, MMX, XMM, and MXCSR State
- mnem: FXRSTOR
  opcd: AE
  op1:
  op2:
  proc: '10'
  desc: Restore x87 FPU, MMX, XMM, and MXCSR State
- mnem: LDMXCSR
  opcd: AE
  op1:
    src:
      operand_s: m32
      a: M
      t: d
  op2:
  proc: '09'
  desc: Load MXCSR Register
- mnem: STMXCSR
  opcd: AE
  op1:
    dst:
      operand_s: m32
      a: M
      t: d
  op2:
  proc: '09'
  desc: Store MXCSR Register State
- mnem: XSAVE
  opcd: AE
  op1:
    dst:
      operand_s: m
      a: M
      t:
  op2:
  proc: '12'
  desc: Save Processor Extended States
- mnem: XSAVE
  opcd: AE
  op1:
    dst:
      operand_s: m
      a: M
      t:
  op2:
  proc: '12'
  desc: Save Processor Extended States
- mnem: LFENCE
  opcd: AE
  op1:
  op2:
  proc: '10'
  desc: Load Fence
- mnem: XRSTOR
  opcd: AE
  op1:
  op2:
  proc: '12'
  desc: Restore Processor Extended States
- mnem: XRSTOR
  opcd: AE
  op1:
  op2:
  proc: '12'
  desc: Restore Processor Extended States
- mnem: MFENCE
  opcd: AE
  op1:
  op2:
  proc: '10'
  desc: Memory Fence
- mnem: SFENCE
  opcd: AE
  op1:
  op2:
  proc: '09'
  desc: Store Fence
- mnem: CLFLUSH
  opcd: AE
  op1:
    src:
      operand_s: m8
      a: M
      t: b
  op2:
  proc: '10'
  desc: Flush Cache Line
- mnem: IMUL
  opcd: AF
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '03'
  desc: Signed Multiply
- mnem: CMPXCHG
  opcd: B0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
  proc: '04'
  desc: Compare and Exchange
- mnem: CMPXCHG
  opcd: B1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
  proc: '04'
  desc: Compare and Exchange
- mnem: LSS
  opcd: B2
  op1:
  op2:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Load Far Pointer
- mnem: BTR
  opcd: B3
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Bit Test and Reset
- mnem: LFS
  opcd: B4
  op1:
  op2:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Load Far Pointer
- mnem: LGS
  opcd: B5
  op1:
  op2:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Load Far Pointer
- mnem: MOVZX
  opcd: B6
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Move with Zero-Extend
- mnem: MOVZX
  opcd: B7
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: '03'
  desc: Move with Zero-Extend
- mnem: JMPE
  opcd: B8
  op1:
  op2:
  proc: '99'
  desc: Jump to IA-64 Instruction Set
- mnem: POPCNT
  opcd: B8
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '12'
  desc: Bit Population Count
- mnem: UD
  opcd: B9
  op1:
    src:
      operand_s: r
      a: G
      t:
  op2:
    src:
      operand_s: r/m
      a: E
      t:
  proc: '02'
  desc: Undefined Instruction
- mnem: BT
  opcd: BA
  op1:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Bit Test
- mnem: BTS
  opcd: BA
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Bit Test and Set
- mnem: BTR
  opcd: BA
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Bit Test and Reset
- mnem: BTC
  opcd: BA
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: imm8
      a: I
      t: b
  proc: 00+
  desc: Bit Test and Complement
- mnem: BTC
  opcd: BB
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    src:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '03'
  desc: Bit Test and Complement
- mnem: BSF
  opcd: BC
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '03'
  desc: Bit Scan Forward
- mnem: BSR
  opcd: BD
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  proc: '03'
  desc: Bit Scan Reverse
- mnem: MOVSX
  opcd: BE
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m8
      a: E
      t: b
  proc: '03'
  desc: Move with Sign-Extension
- mnem: MOVSX
  opcd: BF
  op1:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  op2:
    src:
      operand_s: r/m16
      a: E
      t: w
  proc: '03'
  desc: Move with Sign-Extension
- mnem: XADD
  opcd: C0
  op1:
    dst:
      operand_s: r/m8
      a: E
      t: b
  op2:
    dst:
      operand_s: r8
      a: G
      t: b
  proc: '04'
  desc: Exchange and Add
- mnem: XADD
  opcd: C1
  op1:
    dst:
      operand_s: r/m16/32/64
      a: E
      t: vqp
  op2:
    dst:
      operand_s: r16/32/64
      a: G
      t: vqp
  proc: '04'
  desc: Exchange and Add
- mnem: CMPPS
  opcd: C2
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Compare Packed Single-FP Values
- mnem: CMPSS
  opcd: C2
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: ss
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: ss
  proc: '09'
  desc: Compare Scalar Single-FP Values
- mnem: CMPPD
  opcd: C2
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Compare Packed Double-FP Values
- mnem: CMPSD
  opcd: C2
  op1:
    dst:
      operand_s: xmm-
      a: V
      t: sd
  op2:
    src:
      operand_s: xmm/m-
      a: W
      t: sd
  proc: '10'
  desc: Compare Scalar Double-FP Values
- mnem: MOVNTI
  opcd: C3
  op1:
    dst:
      operand_s: m32/64
      a: M
      t: dqp
  op2:
    src:
      operand_s: r32/64
      a: G
      t: dqp
  proc: '10'
  desc: Store Doubleword Using Non-Temporal Hint
- mnem: PINSRW
  opcd: C4
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: r32/64
      a: R
      t: dqp
  proc: '09'
  desc: Insert Word
- mnem: PINSRW
  opcd: C4
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: r32/64
      a: R
      t: dqp
  proc: '09'
  desc: Insert Word
- mnem: PEXTRW
  opcd: C5
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: mm64
      a: N
      t: q
  proc: '09'
  desc: Extract Word
- mnem: PEXTRW
  opcd: C5
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm128
      a: U
      t: dq
  proc: '09'
  desc: Extract Word
- mnem: SHUFPS
  opcd: C6
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '09'
  desc: Shuffle Packed Single-FP Values
- mnem: SHUFPD
  opcd: C6
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Shuffle Packed Double-FP Values
- mnem: CMPXCHG8B
  opcd: C7
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '05'
  desc: Compare and Exchange Bytes
- mnem: CMPXCHG16B
  opcd: C7
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '10'
  desc: Compare and Exchange Bytes
- mnem: VMPTRLD
  opcd: C7
  op1:
    src:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '10'
  desc: Load Pointer to Virtual-Machine Control Structure
- mnem: VMCLEAR
  opcd: C7
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '10'
  desc: Clear Virtual-Machine Control Structure
- mnem: VMXON
  opcd: C7
  op1:
    src:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '10'
  desc: Enter VMX Operation
- mnem: VMPTRST
  opcd: C7
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
  proc: '10'
  desc: Store Pointer to Virtual-Machine Control Structure
- mnem: BSWAP
  opcd: C8
  op1:
    dst:
      operand_s: r16/32/64
      a: Z
      t: vqp
  op2:
  proc: '04'
  desc: Byte Swap
- mnem: ADDSUBPD
  opcd: D0
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: Packed Double-FP Add/Subtract
- mnem: ADDSUBPS
  opcd: D0
  op1:
    dst:
      operand_s: xmm(128)
      a: V
      t: ps
  op2:
    src:
      operand_s: xmm/m(128)
      a: W
      t: ps
  proc: '10'
  desc: Packed Single-FP Add/Subtract
- mnem: PSRLW
  opcd: D1
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Right Logical
- mnem: PSRLW
  opcd: D1
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Right Logical
- mnem: PSRLD
  opcd: D2
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Right Logical
- mnem: PSRLD
  opcd: D2
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Right Logical
- mnem: PSRLQ
  opcd: D3
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Right Logical
- mnem: PSRLQ
  opcd: D3
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Right Logical
- mnem: PADDQ
  opcd: D4
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Quadword Integers
- mnem: PADDQ
  opcd: D4
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Quadword Integers
- mnem: PMULLW
  opcd: D5
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Multiply Packed Signed Integers and Store Low Result
- mnem: PMULLW
  opcd: D5
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Multiply Packed Signed Integers and Store Low Result
- mnem: MOVQ
  opcd: D6
  op1:
    dst:
      operand_s: xmm/m64
      a: W
      t: q
  op2:
    src:
      operand_s: xmm64
      a: V
      t: q
  proc: '10'
  desc: Move Quadword
- mnem: MOVQ2DQ
  opcd: D6
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: mm64
      a: N
      t: q
  proc: '10'
  desc: Move Quadword from MMX Technology to XMM Register
- mnem: MOVDQ2Q
  opcd: D6
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: xmm64
      a: U
      t: q
  proc: '10'
  desc: Move Quadword from XMM to MMX Technology Register
- mnem: PMOVMSKB
  opcd: D7
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: mm64
      a: N
      t: q
  proc: '09'
  desc: Move Byte Mask
- mnem: PMOVMSKB
  opcd: D7
  op1:
    dst:
      operand_s: r32/64
      a: G
      t: dqp
  op2:
    src:
      operand_s: xmm128
      a: U
      t: dq
  proc: '09'
  desc: Move Byte Mask
- mnem: PSUBUSB
  opcd: D8
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Unsigned Integers with Unsigned Saturation
- mnem: PSUBUSB
  opcd: D8
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Unsigned Integers with Unsigned Saturation
- mnem: PSUBUSW
  opcd: D9
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Unsigned Integers with Unsigned Saturation
- mnem: PSUBUSW
  opcd: D9
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '06'
  desc: Subtract Packed Unsigned Integers with Unsigned Saturation
- mnem: PMINUB
  opcd: DA
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Minimum of Packed Unsigned Byte Integers
- mnem: PMINUB
  opcd: DA
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Minimum of Packed Unsigned Byte Integers
- mnem: PAND
  opcd: DB
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Logical AND
- mnem: PAND
  opcd: DB
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Logical AND
- mnem: PADDUSB
  opcd: DC
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Unsigned Integers with Unsigned Saturation
- mnem: PADDUSB
  opcd: DC
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Unsigned Integers with Unsigned Saturation
- mnem: PADDUSW
  opcd: DD
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Unsigned Integers with Unsigned Saturation
- mnem: PADDUSW
  opcd: DD
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Unsigned Integers with Unsigned Saturation
- mnem: PMAXUB
  opcd: DE
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Maximum of Packed Unsigned Byte Integers
- mnem: PMAXUB
  opcd: DE
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Maximum of Packed Unsigned Byte Integers
- mnem: PANDN
  opcd: DF
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Logical AND NOT
- mnem: PANDN
  opcd: DF
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Logical AND NOT
- mnem: PAVGB
  opcd: E0
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Average Packed Integers
- mnem: PAVGB
  opcd: E0
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Average Packed Integers
- mnem: PSRAW
  opcd: E1
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSRAW
  opcd: E1
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSRAD
  opcd: E2
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Right Arithmetic
- mnem: PSRAD
  opcd: E2
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Right Arithmetic
- mnem: PAVGW
  opcd: E3
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Average Packed Integers
- mnem: PAVGW
  opcd: E3
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Average Packed Integers
- mnem: PMULHUW
  opcd: E4
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Multiply Packed Unsigned Integers and Store High Result
- mnem: PMULHUW
  opcd: E4
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Multiply Packed Unsigned Integers and Store High Result
- mnem: PMULHW
  opcd: E5
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Multiply Packed Signed Integers and Store High Result
- mnem: PMULHW
  opcd: E5
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Multiply Packed Signed Integers and Store High Result
- mnem: CVTPD2DQ
  opcd: E6
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: 'Convert Packed Double-FP Values to '
- mnem: CVTTPD2DQ
  opcd: E6
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m
      a: W
      t: pd
  proc: '10'
  desc: 'Convert with Trunc. Packed Double-FP Values to '
- mnem: CVTDQ2PD
  opcd: E6
  op1:
    dst:
      operand_s: xmm
      a: V
      t: pd
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: 'Convert Packed DW Integers to '
- mnem: MOVNTQ
  opcd: E7
  op1:
    dst:
      operand_s: m64
      a: M
      t: q
  op2:
    src:
      operand_s: mm64
      a: P
      t: q
  proc: '09'
  desc: Store of Quadword Using Non-Temporal Hint
- mnem: MOVNTDQ
  opcd: E7
  op1:
    dst:
      operand_s: m128
      a: M
      t: dq
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Store Double Quadword Using Non-Temporal Hint
- mnem: PSUBSB
  opcd: E8
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Signed Integers with Signed Saturation
- mnem: PSUBSB
  opcd: E8
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Signed Integers with Signed Saturation
- mnem: PSUBSW
  opcd: E9
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Signed Integers with Signed Saturation
- mnem: PSUBSW
  opcd: E9
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Signed Integers with Signed Saturation
- mnem: PMINSW
  opcd: EA
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Minimum of Packed Signed Word Integers
- mnem: PMINSW
  opcd: EA
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Minimum of Packed Signed Word Integers
- mnem: POR
  opcd: EB
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Bitwise Logical OR
- mnem: POR
  opcd: EB
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Bitwise Logical OR
- mnem: PADDSB
  opcd: EC
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Signed Integers with Signed Saturation
- mnem: PADDSB
  opcd: EC
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Signed Integers with Signed Saturation
- mnem: PADDSW
  opcd: ED
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Signed Integers with Signed Saturation
- mnem: PADDSW
  opcd: ED
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Signed Integers with Signed Saturation
- mnem: PMAXSW
  opcd: EE
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Maximum of Packed Signed Word Integers
- mnem: PMAXSW
  opcd: EE
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Maximum of Packed Signed Word Integers
- mnem: PXOR
  opcd: EF
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Logical Exclusive OR
- mnem: PXOR
  opcd: EF
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Logical Exclusive OR
- mnem: LDDQU
  opcd: F0
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: m128
      a: M
      t: dq
  proc: '10'
  desc: Load Unaligned Integer 128 Bits
- mnem: PSLLW
  opcd: F1
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLW
  opcd: F1
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PSLLD
  opcd: F2
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLD
  opcd: F2
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PSLLQ
  opcd: F3
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Shift Packed Data Left Logical
- mnem: PSLLQ
  opcd: F3
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Shift Packed Data Left Logical
- mnem: PMULUDQ
  opcd: F4
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '10'
  desc: Multiply Packed Unsigned DW Integers
- mnem: PMULUDQ
  opcd: F4
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Multiply Packed Unsigned DW Integers
- mnem: PMADDWD
  opcd: F5
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6432
      a: Q
      t: d
  proc: '06'
  desc: Multiply and Add Packed Integers
- mnem: PMADDWD
  opcd: F5
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Multiply and Add Packed Integers
- mnem: PSADBW
  opcd: F6
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '09'
  desc: Compute Sum of Absolute Differences
- mnem: PSADBW
  opcd: F6
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '09'
  desc: Compute Sum of Absolute Differences
- mnem: MASKMOVQ
  opcd: F7
  op1:
  op2:
    dst:
      operand_s: mm64
      a: P
      t: q
  proc: '09'
  desc: Store Selected Bytes of Quadword
- mnem: MASKMOVDQU
  opcd: F7
  op1:
  op2:
    src:
      operand_s: xmm128
      a: V
      t: dq
  proc: '10'
  desc: Store Selected Bytes of Double Quadword
- mnem: PSUBB
  opcd: F8
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Integers
- mnem: PSUBB
  opcd: F8
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Integers
- mnem: PSUBW
  opcd: F9
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Integers
- mnem: PSUBW
  opcd: F9
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Integers
- mnem: PSUBD
  opcd: FA
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Subtract Packed Integers
- mnem: PSUBD
  opcd: FA
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Integers
- mnem: PSUBQ
  opcd: FB
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '10'
  desc: Subtract Packed Quadword Integers
- mnem: PSUBQ
  opcd: FB
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Subtract Packed Quadword Integers
- mnem: PADDB
  opcd: FC
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Integers
- mnem: PADDB
  opcd: FC
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Integers
- mnem: PADDW
  opcd: FD
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Integers
- mnem: PADDW
  opcd: FD
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Integers
- mnem: PADDD
  opcd: FE
  op1:
    dst:
      operand_s: mm64
      a: P
      t: q
  op2:
    src:
      operand_s: mm/m6464
      a: Q
      t: q
  proc: '06'
  desc: Add Packed Integers
- mnem: PADDD
  opcd: FE
  op1:
    dst:
      operand_s: xmm128
      a: V
      t: dq
  op2:
    src:
      operand_s: xmm/m128
      a: W
      t: dq
  proc: '10'
  desc: Add Packed Integers
