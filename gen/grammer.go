// Code generated by pigeon; DO NOT EDIT.

package gen

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"reflect"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/hangingman/gosk/ast"
	"github.com/harakeishi/gats"
	"github.com/morikuni/failure"
)

func toAnySlice(v any) []any {
	if v == nil {
		return nil
	}
	return v.([]any)
}

func parseError(message string) error {
	return failure.New(ParseError,
		failure.Context{"message": message},
		failure.Message("Parse error"),
	)
}

func convertAnyToString(value any) string {
	v := reflect.ValueOf(value)
	switch v.Kind() {
	case reflect.Slice, reflect.Array:
		// 特別な処理: []byte型を検出した場合は文字列として変換
		if v.Type().Elem().Kind() == reflect.Uint8 {
			return string(value.([]byte))
		}

		var result []string // 文字列のスライスとして結果を保持
		for i := 0; i < v.Len(); i++ {
			// スライスまたは配列の各要素に対して再帰的にこの関数を適用
			elementStr := convertAnyToString(v.Index(i).Interface())
			result = append(result, elementStr)
		}
		return "[" + strings.Join(result, ", ") + "]"
	default:
		// スライスまたは配列でない場合は、fmt.Sprintfを使用して文字列に変換
		return fmt.Sprintf("%v", value)
	}
}

const (
	ParseError failure.StringCode = "ParseError"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Program",
			pos:  position{line: 53, col: 1, offset: 1244},
			expr: &actionExpr{
				pos: position{line: 53, col: 12, offset: 1255},
				run: (*parser).callonProgram1,
				expr: &seqExpr{
					pos: position{line: 53, col: 12, offset: 1255},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 53, col: 12, offset: 1255},
							label: "list",
							expr: &zeroOrMoreExpr{
								pos: position{line: 53, col: 17, offset: 1260},
								expr: &ruleRefExpr{
									pos:  position{line: 53, col: 17, offset: 1260},
									name: "Statement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 28, offset: 1271},
							name: "END",
						},
					},
				},
			},
		},
		{
			name: "Statement",
			pos:  position{line: 65, col: 1, offset: 1586},
			expr: &choiceExpr{
				pos: position{line: 65, col: 14, offset: 1599},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 65, col: 14, offset: 1599},
						name: "LabelStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 5, offset: 1615},
						name: "DeclareStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 5, offset: 1633},
						name: "ExportSymStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 5, offset: 1653},
						name: "ExternSymStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 5, offset: 1673},
						name: "ConfigStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 70, col: 5, offset: 1690},
						name: "MnemonicStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 71, col: 5, offset: 1709},
						name: "OpcodeStmt",
					},
				},
			},
		},
		{
			name: "LabelStmt",
			pos:  position{line: 73, col: 1, offset: 1721},
			expr: &actionExpr{
				pos: position{line: 73, col: 14, offset: 1734},
				run: (*parser).callonLabelStmt1,
				expr: &seqExpr{
					pos: position{line: 73, col: 14, offset: 1734},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 73, col: 14, offset: 1734},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 16, offset: 1736},
								name: "Label",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 22, offset: 1742},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Label",
			pos:  position{line: 81, col: 1, offset: 1935},
			expr: &actionExpr{
				pos: position{line: 81, col: 10, offset: 1944},
				run: (*parser).callonLabel1,
				expr: &seqExpr{
					pos: position{line: 81, col: 10, offset: 1944},
					exprs: []any{
						&notExpr{
							pos: position{line: 81, col: 10, offset: 1944},
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 1945},
								name: "ReservedWord",
							},
						},
						&notExpr{
							pos: position{line: 81, col: 24, offset: 1958},
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 25, offset: 1959},
								name: "Opcode",
							},
						},
						&labeledExpr{
							pos:   position{line: 81, col: 32, offset: 1966},
							label: "l",
							expr: &seqExpr{
								pos: position{line: 81, col: 35, offset: 1969},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 81, col: 35, offset: 1969},
										val:        "[a-zA-Z$_.]",
										chars:      []rune{'$', '_', '.'},
										ranges:     []rune{'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 81, col: 47, offset: 1981},
										expr: &charClassMatcher{
											pos:        position{line: 81, col: 47, offset: 1981},
											val:        "[a-zA-Z$_.0-9]",
											chars:      []rune{'$', '_', '.'},
											ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&litMatcher{
										pos:        position{line: 81, col: 63, offset: 1997},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 81, col: 68, offset: 2002},
							name: "TrailingWsEOL",
						},
					},
				},
			},
		},
		{
			name: "DeclareStmt",
			pos:  position{line: 92, col: 1, offset: 2270},
			expr: &actionExpr{
				pos: position{line: 92, col: 16, offset: 2285},
				run: (*parser).callonDeclareStmt1,
				expr: &seqExpr{
					pos: position{line: 92, col: 16, offset: 2285},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 92, col: 16, offset: 2285},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 18, offset: 2287},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 20, offset: 2289},
								name: "IdentFactor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 32, offset: 2301},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 92, col: 34, offset: 2303},
							val:        "EQU",
							ignoreCase: false,
							want:       "\"EQU\"",
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 40, offset: 2309},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 42, offset: 2311},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 44, offset: 2313},
								name: "Exp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 48, offset: 2317},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ExportSymStmt",
			pos:  position{line: 104, col: 1, offset: 2599},
			expr: &actionExpr{
				pos: position{line: 104, col: 18, offset: 2616},
				run: (*parser).callonExportSymStmt1,
				expr: &seqExpr{
					pos: position{line: 104, col: 18, offset: 2616},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 104, col: 18, offset: 2616},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 104, col: 20, offset: 2618},
							val:        "GLOBAL",
							ignoreCase: false,
							want:       "\"GLOBAL\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 29, offset: 2627},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 104, col: 31, offset: 2629},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 36, offset: 2634},
								name: "IdentFactor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 48, offset: 2646},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 104, col: 50, offset: 2648},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 55, offset: 2653},
								expr: &seqExpr{
									pos: position{line: 104, col: 56, offset: 2654},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 104, col: 56, offset: 2654},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 104, col: 58, offset: 2656},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 104, col: 62, offset: 2660},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 104, col: 64, offset: 2662},
											name: "IdentFactor",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 78, offset: 2676},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ExternSymStmt",
			pos:  position{line: 127, col: 1, offset: 3289},
			expr: &actionExpr{
				pos: position{line: 127, col: 18, offset: 3306},
				run: (*parser).callonExternSymStmt1,
				expr: &seqExpr{
					pos: position{line: 127, col: 18, offset: 3306},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 127, col: 18, offset: 3306},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 20, offset: 3308},
							val:        "EXTERN",
							ignoreCase: false,
							want:       "\"EXTERN\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 29, offset: 3317},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 31, offset: 3319},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 3324},
								name: "IdentFactor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 48, offset: 3336},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 50, offset: 3338},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 55, offset: 3343},
								expr: &seqExpr{
									pos: position{line: 127, col: 56, offset: 3344},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 127, col: 56, offset: 3344},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 127, col: 58, offset: 3346},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 127, col: 62, offset: 3350},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 127, col: 64, offset: 3352},
											name: "IdentFactor",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 78, offset: 3366},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConfigStmt",
			pos:  position{line: 150, col: 1, offset: 3979},
			expr: &actionExpr{
				pos: position{line: 150, col: 15, offset: 3993},
				run: (*parser).callonConfigStmt1,
				expr: &seqExpr{
					pos: position{line: 150, col: 15, offset: 3993},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 150, col: 15, offset: 3993},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 150, col: 17, offset: 3995},
							label: "config",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 24, offset: 4002},
								name: "ConfigType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 150, col: 35, offset: 4013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 150, col: 37, offset: 4015},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 39, offset: 4017},
								name: "Factor",
							},
						},
						&litMatcher{
							pos:        position{line: 150, col: 46, offset: 4024},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 150, col: 50, offset: 4028},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConfigType",
			pos:  position{line: 162, col: 1, offset: 4331},
			expr: &actionExpr{
				pos: position{line: 162, col: 15, offset: 4345},
				run: (*parser).callonConfigType1,
				expr: &seqExpr{
					pos: position{line: 162, col: 15, offset: 4345},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 162, col: 15, offset: 4345},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 162, col: 19, offset: 4349},
							label: "conf",
							expr: &ruleRefExpr{
								pos:  position{line: 162, col: 24, offset: 4354},
								name: "Conf",
							},
						},
						&andExpr{
							pos: position{line: 162, col: 29, offset: 4359},
							expr: &seqExpr{
								pos: position{line: 162, col: 31, offset: 4361},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 162, col: 31, offset: 4361},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 162, col: 33, offset: 4363},
										name: "Factor",
									},
									&litMatcher{
										pos:        position{line: 162, col: 40, offset: 4370},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Conf",
			pos:  position{line: 175, col: 1, offset: 4623},
			expr: &choiceExpr{
				pos: position{line: 175, col: 8, offset: 4630},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 175, col: 8, offset: 4630},
						val:        "BITS",
						ignoreCase: false,
						want:       "\"BITS\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 17, offset: 4639},
						val:        "INSTRSET",
						ignoreCase: false,
						want:       "\"INSTRSET\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 30, offset: 4652},
						val:        "OPTIMIZE",
						ignoreCase: false,
						want:       "\"OPTIMIZE\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 43, offset: 4665},
						val:        "FORMAT",
						ignoreCase: false,
						want:       "\"FORMAT\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 54, offset: 4676},
						val:        "PADDING",
						ignoreCase: false,
						want:       "\"PADDING\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 66, offset: 4688},
						val:        "PADSET",
						ignoreCase: false,
						want:       "\"PADSET\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 77, offset: 4699},
						val:        "SECTION",
						ignoreCase: false,
						want:       "\"SECTION\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 89, offset: 4711},
						val:        "ABSOLUTE",
						ignoreCase: false,
						want:       "\"ABSOLUTE\"",
					},
					&litMatcher{
						pos:        position{line: 175, col: 102, offset: 4724},
						val:        "FILE",
						ignoreCase: false,
						want:       "\"FILE\"",
					},
				},
			},
		},
		{
			name: "MnemonicStmt",
			pos:  position{line: 177, col: 1, offset: 4734},
			expr: &actionExpr{
				pos: position{line: 177, col: 17, offset: 4750},
				run: (*parser).callonMnemonicStmt1,
				expr: &seqExpr{
					pos: position{line: 177, col: 17, offset: 4750},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 177, col: 17, offset: 4750},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 19, offset: 4752},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 21, offset: 4754},
								name: "Opcode",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 28, offset: 4761},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 31, offset: 4764},
							label: "tail",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 36, offset: 4769},
								name: "OperandList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 48, offset: 4781},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "OperandList",
			pos:  position{line: 191, col: 1, offset: 5137},
			expr: &actionExpr{
				pos: position{line: 191, col: 16, offset: 5152},
				run: (*parser).callonOperandList1,
				expr: &seqExpr{
					pos: position{line: 191, col: 16, offset: 5152},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 191, col: 16, offset: 5152},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 191, col: 21, offset: 5157},
								name: "Operand",
							},
						},
						&labeledExpr{
							pos:   position{line: 191, col: 29, offset: 5165},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 191, col: 34, offset: 5170},
								expr: &seqExpr{
									pos: position{line: 191, col: 35, offset: 5171},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 191, col: 35, offset: 5171},
											name: "WS",
										},
										&litMatcher{
											pos:        position{line: 191, col: 38, offset: 5174},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 191, col: 42, offset: 5178},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 191, col: 45, offset: 5181},
											name: "Operand",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OpcodeStmt",
			pos:  position{line: 212, col: 1, offset: 5653},
			expr: &actionExpr{
				pos: position{line: 212, col: 15, offset: 5667},
				run: (*parser).callonOpcodeStmt1,
				expr: &seqExpr{
					pos: position{line: 212, col: 15, offset: 5667},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 212, col: 15, offset: 5667},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 17, offset: 5669},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 19, offset: 5671},
								name: "Opcode",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 26, offset: 5678},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 221, col: 1, offset: 5928},
			expr: &ruleRefExpr{
				pos:  position{line: 221, col: 12, offset: 5939},
				name: "Exp",
			},
		},
		{
			name: "Exp",
			pos:  position{line: 223, col: 1, offset: 5944},
			expr: &choiceExpr{
				pos: position{line: 223, col: 8, offset: 5951},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 223, col: 8, offset: 5951},
						name: "MemoryAddrExp",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 24, offset: 5967},
						name: "SegmentExp",
					},
				},
			},
		},
		{
			name: "Opcode",
			pos:  position{line: 226, col: 1, offset: 6115},
			expr: &choiceExpr{
				pos: position{line: 226, col: 10, offset: 6124},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 226, col: 10, offset: 6124},
						val:        "FYL2XP1",
						ignoreCase: false,
						want:       "\"FYL2XP1\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 22, offset: 6136},
						val:        "FXTRACT",
						ignoreCase: false,
						want:       "\"FXTRACT\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 34, offset: 6148},
						val:        "FUCOMPP",
						ignoreCase: false,
						want:       "\"FUCOMPP\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 46, offset: 6160},
						val:        "FSINCOS",
						ignoreCase: false,
						want:       "\"FSINCOS\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 58, offset: 6172},
						val:        "FRNDINT",
						ignoreCase: false,
						want:       "\"FRNDINT\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 70, offset: 6184},
						val:        "FNSTENV",
						ignoreCase: false,
						want:       "\"FNSTENV\"",
					},
					&litMatcher{
						pos:        position{line: 226, col: 82, offset: 6196},
						val:        "FINCSTP",
						ignoreCase: false,
						want:       "\"FINCSTP\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 5, offset: 6212},
						val:        "FDECSTP",
						ignoreCase: false,
						want:       "\"FDECSTP\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 17, offset: 6224},
						val:        "CMPXCHG",
						ignoreCase: false,
						want:       "\"CMPXCHG\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 29, offset: 6236},
						val:        "WBINVD",
						ignoreCase: false,
						want:       "\"WBINVD\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 40, offset: 6247},
						val:        "SETNLE",
						ignoreCase: false,
						want:       "\"SETNLE\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 51, offset: 6258},
						val:        "SETNGE",
						ignoreCase: false,
						want:       "\"SETNGE\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 62, offset: 6269},
						val:        "SETNBE",
						ignoreCase: false,
						want:       "\"SETNBE\"",
					},
					&litMatcher{
						pos:        position{line: 227, col: 73, offset: 6280},
						val:        "SETNAE",
						ignoreCase: false,
						want:       "\"SETNAE\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 5, offset: 6295},
						val:        "PUSHFW",
						ignoreCase: false,
						want:       "\"PUSHFW\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 16, offset: 6306},
						val:        "PUSHFD",
						ignoreCase: false,
						want:       "\"PUSHFD\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 27, offset: 6317},
						val:        "PUSHAW",
						ignoreCase: false,
						want:       "\"PUSHAW\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 38, offset: 6328},
						val:        "PUSHAD",
						ignoreCase: false,
						want:       "\"PUSHAD\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 49, offset: 6339},
						val:        "LOOPNZ",
						ignoreCase: false,
						want:       "\"LOOPNZ\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 60, offset: 6350},
						val:        "LOOPNE",
						ignoreCase: false,
						want:       "\"LOOPNE\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 71, offset: 6361},
						val:        "INVLPG",
						ignoreCase: false,
						want:       "\"INVLPG\"",
					},
					&litMatcher{
						pos:        position{line: 228, col: 82, offset: 6372},
						val:        "FUCOMP",
						ignoreCase: false,
						want:       "\"FUCOMP\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 5, offset: 6387},
						val:        "FSUBRP",
						ignoreCase: false,
						want:       "\"FSUBRP\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 16, offset: 6398},
						val:        "FSTENV",
						ignoreCase: false,
						want:       "\"FSTENV\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 27, offset: 6409},
						val:        "FSETPM",
						ignoreCase: false,
						want:       "\"FSETPM\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 38, offset: 6420},
						val:        "FSCALE",
						ignoreCase: false,
						want:       "\"FSCALE\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 49, offset: 6431},
						val:        "FRSTOR",
						ignoreCase: false,
						want:       "\"FRSTOR\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 60, offset: 6442},
						val:        "FPREM1",
						ignoreCase: false,
						want:       "\"FPREM1\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 71, offset: 6453},
						val:        "FPATAN",
						ignoreCase: false,
						want:       "\"FPATAN\"",
					},
					&litMatcher{
						pos:        position{line: 229, col: 82, offset: 6464},
						val:        "FNSTSW",
						ignoreCase: false,
						want:       "\"FNSTSW\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 5, offset: 6479},
						val:        "FNSTCW",
						ignoreCase: false,
						want:       "\"FNSTCW\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 16, offset: 6490},
						val:        "FNSAVE",
						ignoreCase: false,
						want:       "\"FNSAVE\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 27, offset: 6501},
						val:        "FNINIT",
						ignoreCase: false,
						want:       "\"FNINIT\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 38, offset: 6512},
						val:        "FNDISI",
						ignoreCase: false,
						want:       "\"FNDISI\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 49, offset: 6523},
						val:        "FNCLEX",
						ignoreCase: false,
						want:       "\"FNCLEX\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 60, offset: 6534},
						val:        "FLDLN2",
						ignoreCase: false,
						want:       "\"FLDLN2\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 71, offset: 6545},
						val:        "FLDLG2",
						ignoreCase: false,
						want:       "\"FLDLG2\"",
					},
					&litMatcher{
						pos:        position{line: 230, col: 82, offset: 6556},
						val:        "FLDL2T",
						ignoreCase: false,
						want:       "\"FLDL2T\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 5, offset: 6571},
						val:        "FLDL2E",
						ignoreCase: false,
						want:       "\"FLDL2E\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 16, offset: 6582},
						val:        "FLDENV",
						ignoreCase: false,
						want:       "\"FLDENV\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 27, offset: 6593},
						val:        "FISUBR",
						ignoreCase: false,
						want:       "\"FISUBR\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 38, offset: 6604},
						val:        "FIDIVR",
						ignoreCase: false,
						want:       "\"FIDIVR\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 49, offset: 6615},
						val:        "FICOMP",
						ignoreCase: false,
						want:       "\"FICOMP\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 60, offset: 6626},
						val:        "FDIVRP",
						ignoreCase: false,
						want:       "\"FDIVRP\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 71, offset: 6637},
						val:        "FCOMPP",
						ignoreCase: false,
						want:       "\"FCOMPP\"",
					},
					&litMatcher{
						pos:        position{line: 231, col: 82, offset: 6648},
						val:        "ALIGNB",
						ignoreCase: false,
						want:       "\"ALIGNB\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 5, offset: 6663},
						val:        "XLATB",
						ignoreCase: false,
						want:       "\"XLATB\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 15, offset: 6673},
						val:        "WRMSR",
						ignoreCase: false,
						want:       "\"WRMSR\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 25, offset: 6683},
						val:        "TIMES",
						ignoreCase: false,
						want:       "\"TIMES\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 35, offset: 6693},
						val:        "STOSW",
						ignoreCase: false,
						want:       "\"STOSW\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 45, offset: 6703},
						val:        "STOSD",
						ignoreCase: false,
						want:       "\"STOSD\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 55, offset: 6713},
						val:        "STOSB",
						ignoreCase: false,
						want:       "\"STOSB\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 65, offset: 6723},
						val:        "SETPO",
						ignoreCase: false,
						want:       "\"SETPO\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 75, offset: 6733},
						val:        "SETPE",
						ignoreCase: false,
						want:       "\"SETPE\"",
					},
					&litMatcher{
						pos:        position{line: 232, col: 85, offset: 6743},
						val:        "SETNZ",
						ignoreCase: false,
						want:       "\"SETNZ\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 5, offset: 6757},
						val:        "SETNS",
						ignoreCase: false,
						want:       "\"SETNS\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 15, offset: 6767},
						val:        "SETNP",
						ignoreCase: false,
						want:       "\"SETNP\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 25, offset: 6777},
						val:        "SETNO",
						ignoreCase: false,
						want:       "\"SETNO\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 35, offset: 6787},
						val:        "SETNL",
						ignoreCase: false,
						want:       "\"SETNL\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 45, offset: 6797},
						val:        "SETNG",
						ignoreCase: false,
						want:       "\"SETNG\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 55, offset: 6807},
						val:        "SETNE",
						ignoreCase: false,
						want:       "\"SETNE\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 65, offset: 6817},
						val:        "SETNC",
						ignoreCase: false,
						want:       "\"SETNC\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 75, offset: 6827},
						val:        "SETNB",
						ignoreCase: false,
						want:       "\"SETNB\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 85, offset: 6837},
						val:        "SETNA",
						ignoreCase: false,
						want:       "\"SETNA\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 5, offset: 6851},
						val:        "SETLE",
						ignoreCase: false,
						want:       "\"SETLE\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 15, offset: 6861},
						val:        "SETGE",
						ignoreCase: false,
						want:       "\"SETGE\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 25, offset: 6871},
						val:        "SETBE",
						ignoreCase: false,
						want:       "\"SETBE\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 35, offset: 6881},
						val:        "SETAE",
						ignoreCase: false,
						want:       "\"SETAE\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 45, offset: 6891},
						val:        "SCASW",
						ignoreCase: false,
						want:       "\"SCASW\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 55, offset: 6901},
						val:        "SCASD",
						ignoreCase: false,
						want:       "\"SCASD\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 65, offset: 6911},
						val:        "SCASB",
						ignoreCase: false,
						want:       "\"SCASB\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 75, offset: 6921},
						val:        "REPNZ",
						ignoreCase: false,
						want:       "\"REPNZ\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 85, offset: 6931},
						val:        "REPNE",
						ignoreCase: false,
						want:       "\"REPNE\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 5, offset: 6945},
						val:        "RDPMC",
						ignoreCase: false,
						want:       "\"RDPMC\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 15, offset: 6955},
						val:        "RDMSR",
						ignoreCase: false,
						want:       "\"RDMSR\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 25, offset: 6965},
						val:        "PUSHF",
						ignoreCase: false,
						want:       "\"PUSHF\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 35, offset: 6975},
						val:        "PUSHD",
						ignoreCase: false,
						want:       "\"PUSHD\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 45, offset: 6985},
						val:        "PUSHA",
						ignoreCase: false,
						want:       "\"PUSHA\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 55, offset: 6995},
						val:        "POPFW",
						ignoreCase: false,
						want:       "\"POPFW\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 65, offset: 7005},
						val:        "POPFD",
						ignoreCase: false,
						want:       "\"POPFD\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 75, offset: 7015},
						val:        "POPAW",
						ignoreCase: false,
						want:       "\"POPAW\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 85, offset: 7025},
						val:        "POPAD",
						ignoreCase: false,
						want:       "\"POPAD\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 5, offset: 7039},
						val:        "OUTSW",
						ignoreCase: false,
						want:       "\"OUTSW\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 15, offset: 7049},
						val:        "OUTSD",
						ignoreCase: false,
						want:       "\"OUTSD\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 25, offset: 7059},
						val:        "OUTSB",
						ignoreCase: false,
						want:       "\"OUTSB\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 35, offset: 7069},
						val:        "MOVZX",
						ignoreCase: false,
						want:       "\"MOVZX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 45, offset: 7079},
						val:        "MOVSX",
						ignoreCase: false,
						want:       "\"MOVSX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 55, offset: 7089},
						val:        "MOVSW",
						ignoreCase: false,
						want:       "\"MOVSW\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 65, offset: 7099},
						val:        "MOVSD",
						ignoreCase: false,
						want:       "\"MOVSD\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 75, offset: 7109},
						val:        "MOVSB",
						ignoreCase: false,
						want:       "\"MOVSB\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 85, offset: 7119},
						val:        "LOOPZ",
						ignoreCase: false,
						want:       "\"LOOPZ\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 5, offset: 7133},
						val:        "LOOPE",
						ignoreCase: false,
						want:       "\"LOOPE\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 15, offset: 7143},
						val:        "LODSW",
						ignoreCase: false,
						want:       "\"LODSW\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 25, offset: 7153},
						val:        "LODSD",
						ignoreCase: false,
						want:       "\"LODSD\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 35, offset: 7163},
						val:        "LODSB",
						ignoreCase: false,
						want:       "\"LODSB\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 45, offset: 7173},
						val:        "LEAVE",
						ignoreCase: false,
						want:       "\"LEAVE\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 55, offset: 7183},
						val:        "JECXZ",
						ignoreCase: false,
						want:       "\"JECXZ\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 65, offset: 7193},
						val:        "IRETW",
						ignoreCase: false,
						want:       "\"IRETW\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 75, offset: 7203},
						val:        "IRETD",
						ignoreCase: false,
						want:       "\"IRETD\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 85, offset: 7213},
						val:        "FYL2X",
						ignoreCase: false,
						want:       "\"FYL2X\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 5, offset: 7227},
						val:        "FUCOM",
						ignoreCase: false,
						want:       "\"FUCOM\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 15, offset: 7237},
						val:        "FSUBR",
						ignoreCase: false,
						want:       "\"FSUBR\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 25, offset: 7247},
						val:        "FSUBP",
						ignoreCase: false,
						want:       "\"FSUBP\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 35, offset: 7257},
						val:        "FSTSW",
						ignoreCase: false,
						want:       "\"FSTSW\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 45, offset: 7267},
						val:        "FSTCW",
						ignoreCase: false,
						want:       "\"FSTCW\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 55, offset: 7277},
						val:        "FSQRT",
						ignoreCase: false,
						want:       "\"FSQRT\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 65, offset: 7287},
						val:        "FSAVE",
						ignoreCase: false,
						want:       "\"FSAVE\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 75, offset: 7297},
						val:        "FPTAN",
						ignoreCase: false,
						want:       "\"FPTAN\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 85, offset: 7307},
						val:        "FPREM",
						ignoreCase: false,
						want:       "\"FPREM\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 5, offset: 7321},
						val:        "FNENI",
						ignoreCase: false,
						want:       "\"FNENI\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 15, offset: 7331},
						val:        "FMULP",
						ignoreCase: false,
						want:       "\"FMULP\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 25, offset: 7341},
						val:        "FLDPI",
						ignoreCase: false,
						want:       "\"FLDPI\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 35, offset: 7351},
						val:        "FLDCW",
						ignoreCase: false,
						want:       "\"FLDCW\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 45, offset: 7361},
						val:        "FISUB",
						ignoreCase: false,
						want:       "\"FISUB\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 55, offset: 7371},
						val:        "FISTP",
						ignoreCase: false,
						want:       "\"FISTP\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 65, offset: 7381},
						val:        "FINIT",
						ignoreCase: false,
						want:       "\"FINIT\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 75, offset: 7391},
						val:        "FIMUL",
						ignoreCase: false,
						want:       "\"FIMUL\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 85, offset: 7401},
						val:        "FIDIV",
						ignoreCase: false,
						want:       "\"FIDIV\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 5, offset: 7415},
						val:        "FICOM",
						ignoreCase: false,
						want:       "\"FICOM\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 15, offset: 7425},
						val:        "FIADD",
						ignoreCase: false,
						want:       "\"FIADD\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 25, offset: 7435},
						val:        "FFREE",
						ignoreCase: false,
						want:       "\"FFREE\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 35, offset: 7445},
						val:        "FDIVR",
						ignoreCase: false,
						want:       "\"FDIVR\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 45, offset: 7455},
						val:        "FDIVP",
						ignoreCase: false,
						want:       "\"FDIVP\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 55, offset: 7465},
						val:        "FDISI",
						ignoreCase: false,
						want:       "\"FDISI\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 65, offset: 7475},
						val:        "FCOMP",
						ignoreCase: false,
						want:       "\"FCOMP\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 75, offset: 7485},
						val:        "FCLEX",
						ignoreCase: false,
						want:       "\"FCLEX\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 85, offset: 7495},
						val:        "FBSTP",
						ignoreCase: false,
						want:       "\"FBSTP\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 5, offset: 7509},
						val:        "FADDP",
						ignoreCase: false,
						want:       "\"FADDP\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 15, offset: 7519},
						val:        "F2XM1",
						ignoreCase: false,
						want:       "\"F2XM1\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 25, offset: 7529},
						val:        "ENTER",
						ignoreCase: false,
						want:       "\"ENTER\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 35, offset: 7539},
						val:        "CPUID",
						ignoreCase: false,
						want:       "\"CPUID\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 45, offset: 7549},
						val:        "CMPSW",
						ignoreCase: false,
						want:       "\"CMPSW\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 55, offset: 7559},
						val:        "CMPSD",
						ignoreCase: false,
						want:       "\"CMPSD\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 65, offset: 7569},
						val:        "CMPSB",
						ignoreCase: false,
						want:       "\"CMPSB\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 75, offset: 7579},
						val:        "BSWAP",
						ignoreCase: false,
						want:       "\"BSWAP\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 85, offset: 7589},
						val:        "BOUND",
						ignoreCase: false,
						want:       "\"BOUND\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 5, offset: 7603},
						val:        "ALIGN",
						ignoreCase: false,
						want:       "\"ALIGN\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 15, offset: 7613},
						val:        "XCHG",
						ignoreCase: false,
						want:       "\"XCHG\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 24, offset: 7622},
						val:        "XADD",
						ignoreCase: false,
						want:       "\"XADD\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 33, offset: 7631},
						val:        "WAIT",
						ignoreCase: false,
						want:       "\"WAIT\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 42, offset: 7640},
						val:        "VERW",
						ignoreCase: false,
						want:       "\"VERW\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 51, offset: 7649},
						val:        "VERR",
						ignoreCase: false,
						want:       "\"VERR\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 60, offset: 7658},
						val:        "TEST",
						ignoreCase: false,
						want:       "\"TEST\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 69, offset: 7667},
						val:        "SMSW",
						ignoreCase: false,
						want:       "\"SMSW\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 78, offset: 7676},
						val:        "SLDT",
						ignoreCase: false,
						want:       "\"SLDT\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 87, offset: 7685},
						val:        "SIDT",
						ignoreCase: false,
						want:       "\"SIDT\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 5, offset: 7698},
						val:        "SHRD",
						ignoreCase: false,
						want:       "\"SHRD\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 14, offset: 7707},
						val:        "SHLD",
						ignoreCase: false,
						want:       "\"SHLD\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 23, offset: 7716},
						val:        "SGDT",
						ignoreCase: false,
						want:       "\"SGDT\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 32, offset: 7725},
						val:        "SETZ",
						ignoreCase: false,
						want:       "\"SETZ\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 41, offset: 7734},
						val:        "SETS",
						ignoreCase: false,
						want:       "\"SETS\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 50, offset: 7743},
						val:        "SETP",
						ignoreCase: false,
						want:       "\"SETP\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 59, offset: 7752},
						val:        "SETO",
						ignoreCase: false,
						want:       "\"SETO\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 68, offset: 7761},
						val:        "SETL",
						ignoreCase: false,
						want:       "\"SETL\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 77, offset: 7770},
						val:        "SETG",
						ignoreCase: false,
						want:       "\"SETG\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 86, offset: 7779},
						val:        "SETE",
						ignoreCase: false,
						want:       "\"SETE\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 5, offset: 7792},
						val:        "SETC",
						ignoreCase: false,
						want:       "\"SETC\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 14, offset: 7801},
						val:        "SETB",
						ignoreCase: false,
						want:       "\"SETB\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 23, offset: 7810},
						val:        "SETA",
						ignoreCase: false,
						want:       "\"SETA\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 32, offset: 7819},
						val:        "SAHF",
						ignoreCase: false,
						want:       "\"SAHF\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 41, offset: 7828},
						val:        "RETN",
						ignoreCase: false,
						want:       "\"RETN\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 50, offset: 7837},
						val:        "RETF",
						ignoreCase: false,
						want:       "\"RETF\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 59, offset: 7846},
						val:        "RESW",
						ignoreCase: false,
						want:       "\"RESW\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 68, offset: 7855},
						val:        "REST",
						ignoreCase: false,
						want:       "\"REST\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 77, offset: 7864},
						val:        "RESQ",
						ignoreCase: false,
						want:       "\"RESQ\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 86, offset: 7873},
						val:        "RESD",
						ignoreCase: false,
						want:       "\"RESD\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 5, offset: 7886},
						val:        "RESB",
						ignoreCase: false,
						want:       "\"RESB\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 14, offset: 7895},
						val:        "REPZ",
						ignoreCase: false,
						want:       "\"REPZ\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 23, offset: 7904},
						val:        "REPE",
						ignoreCase: false,
						want:       "\"REPE\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 32, offset: 7913},
						val:        "PUSH",
						ignoreCase: false,
						want:       "\"PUSH\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 41, offset: 7922},
						val:        "POPF",
						ignoreCase: false,
						want:       "\"POPF\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 50, offset: 7931},
						val:        "POPA",
						ignoreCase: false,
						want:       "\"POPA\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 59, offset: 7940},
						val:        "LOOP",
						ignoreCase: false,
						want:       "\"LOOP\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 68, offset: 7949},
						val:        "LOCK",
						ignoreCase: false,
						want:       "\"LOCK\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 77, offset: 7958},
						val:        "LMSW",
						ignoreCase: false,
						want:       "\"LMSW\"",
					},
					&litMatcher{
						pos:        position{line: 245, col: 86, offset: 7967},
						val:        "LLDT",
						ignoreCase: false,
						want:       "\"LLDT\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 5, offset: 7980},
						val:        "LIDT",
						ignoreCase: false,
						want:       "\"LIDT\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 14, offset: 7989},
						val:        "LGDT",
						ignoreCase: false,
						want:       "\"LGDT\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 23, offset: 7998},
						val:        "LAHF",
						ignoreCase: false,
						want:       "\"LAHF\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 32, offset: 8007},
						val:        "JNLE",
						ignoreCase: false,
						want:       "\"JNLE\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 41, offset: 8016},
						val:        "JNGE",
						ignoreCase: false,
						want:       "\"JNGE\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 50, offset: 8025},
						val:        "JNBE",
						ignoreCase: false,
						want:       "\"JNBE\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 59, offset: 8034},
						val:        "JNAE",
						ignoreCase: false,
						want:       "\"JNAE\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 68, offset: 8043},
						val:        "JCXZ",
						ignoreCase: false,
						want:       "\"JCXZ\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 77, offset: 8052},
						val:        "IRET",
						ignoreCase: false,
						want:       "\"IRET\"",
					},
					&litMatcher{
						pos:        position{line: 246, col: 86, offset: 8061},
						val:        "INVD",
						ignoreCase: false,
						want:       "\"INVD\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 5, offset: 8074},
						val:        "INTO",
						ignoreCase: false,
						want:       "\"INTO\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 14, offset: 8083},
						val:        "INT3",
						ignoreCase: false,
						want:       "\"INT3\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 23, offset: 8092},
						val:        "INSW",
						ignoreCase: false,
						want:       "\"INSW\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 32, offset: 8101},
						val:        "INSD",
						ignoreCase: false,
						want:       "\"INSD\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 41, offset: 8110},
						val:        "INSB",
						ignoreCase: false,
						want:       "\"INSB\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 50, offset: 8119},
						val:        "INCO",
						ignoreCase: false,
						want:       "\"INCO\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 59, offset: 8128},
						val:        "IMUL",
						ignoreCase: false,
						want:       "\"IMUL\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 68, offset: 8137},
						val:        "IDIV",
						ignoreCase: false,
						want:       "\"IDIV\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 77, offset: 8146},
						val:        "FXCH",
						ignoreCase: false,
						want:       "\"FXCH\"",
					},
					&litMatcher{
						pos:        position{line: 247, col: 86, offset: 8155},
						val:        "FXAM",
						ignoreCase: false,
						want:       "\"FXAM\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 5, offset: 8168},
						val:        "FTST",
						ignoreCase: false,
						want:       "\"FTST\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 14, offset: 8177},
						val:        "FSUB",
						ignoreCase: false,
						want:       "\"FSUB\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 23, offset: 8186},
						val:        "FSTP",
						ignoreCase: false,
						want:       "\"FSTP\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 32, offset: 8195},
						val:        "FSIN",
						ignoreCase: false,
						want:       "\"FSIN\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 41, offset: 8204},
						val:        "FNOP",
						ignoreCase: false,
						want:       "\"FNOP\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 50, offset: 8213},
						val:        "FMUL",
						ignoreCase: false,
						want:       "\"FMUL\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 59, offset: 8222},
						val:        "FLDZ",
						ignoreCase: false,
						want:       "\"FLDZ\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 68, offset: 8231},
						val:        "FLD1",
						ignoreCase: false,
						want:       "\"FLD1\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 77, offset: 8240},
						val:        "FIST",
						ignoreCase: false,
						want:       "\"FIST\"",
					},
					&litMatcher{
						pos:        position{line: 248, col: 86, offset: 8249},
						val:        "FILD",
						ignoreCase: false,
						want:       "\"FILD\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 5, offset: 8262},
						val:        "FENI",
						ignoreCase: false,
						want:       "\"FENI\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 14, offset: 8271},
						val:        "FDIV",
						ignoreCase: false,
						want:       "\"FDIV\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 23, offset: 8280},
						val:        "FCOS",
						ignoreCase: false,
						want:       "\"FCOS\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 32, offset: 8289},
						val:        "FCOM",
						ignoreCase: false,
						want:       "\"FCOM\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 41, offset: 8298},
						val:        "FCHS",
						ignoreCase: false,
						want:       "\"FCHS\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 50, offset: 8307},
						val:        "FBLD",
						ignoreCase: false,
						want:       "\"FBLD\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 59, offset: 8316},
						val:        "FADD",
						ignoreCase: false,
						want:       "\"FADD\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 68, offset: 8325},
						val:        "FABS",
						ignoreCase: false,
						want:       "\"FABS\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 77, offset: 8334},
						val:        "CWDE",
						ignoreCase: false,
						want:       "\"CWDE\"",
					},
					&litMatcher{
						pos:        position{line: 249, col: 86, offset: 8343},
						val:        "CLTS",
						ignoreCase: false,
						want:       "\"CLTS\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 5, offset: 8356},
						val:        "CALL",
						ignoreCase: false,
						want:       "\"CALL\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 14, offset: 8365},
						val:        "ARPL",
						ignoreCase: false,
						want:       "\"ARPL\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 23, offset: 8374},
						val:        "XOR",
						ignoreCase: false,
						want:       "\"XOR\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 31, offset: 8382},
						val:        "UD2",
						ignoreCase: false,
						want:       "\"UD2\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 39, offset: 8390},
						val:        "SUB",
						ignoreCase: false,
						want:       "\"SUB\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 47, offset: 8398},
						val:        "STR",
						ignoreCase: false,
						want:       "\"STR\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 55, offset: 8406},
						val:        "STI",
						ignoreCase: false,
						want:       "\"STI\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 63, offset: 8414},
						val:        "STD",
						ignoreCase: false,
						want:       "\"STD\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 71, offset: 8422},
						val:        "STC",
						ignoreCase: false,
						want:       "\"STC\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 79, offset: 8430},
						val:        "SHR",
						ignoreCase: false,
						want:       "\"SHR\"",
					},
					&litMatcher{
						pos:        position{line: 250, col: 87, offset: 8438},
						val:        "SHL",
						ignoreCase: false,
						want:       "\"SHL\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 5, offset: 8450},
						val:        "SBB",
						ignoreCase: false,
						want:       "\"SBB\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 13, offset: 8458},
						val:        "SAR",
						ignoreCase: false,
						want:       "\"SAR\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 21, offset: 8466},
						val:        "SAL",
						ignoreCase: false,
						want:       "\"SAL\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 29, offset: 8474},
						val:        "RSM",
						ignoreCase: false,
						want:       "\"RSM\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 37, offset: 8482},
						val:        "ROR",
						ignoreCase: false,
						want:       "\"ROR\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 45, offset: 8490},
						val:        "ROL",
						ignoreCase: false,
						want:       "\"ROL\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 53, offset: 8498},
						val:        "RET",
						ignoreCase: false,
						want:       "\"RET\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 61, offset: 8506},
						val:        "REP",
						ignoreCase: false,
						want:       "\"REP\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 69, offset: 8514},
						val:        "RCR",
						ignoreCase: false,
						want:       "\"RCR\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 77, offset: 8522},
						val:        "RCL",
						ignoreCase: false,
						want:       "\"RCL\"",
					},
					&litMatcher{
						pos:        position{line: 251, col: 85, offset: 8530},
						val:        "POP",
						ignoreCase: false,
						want:       "\"POP\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 5, offset: 8542},
						val:        "OUT",
						ignoreCase: false,
						want:       "\"OUT\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 13, offset: 8550},
						val:        "ORG",
						ignoreCase: false,
						want:       "\"ORG\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 21, offset: 8558},
						val:        "NOT",
						ignoreCase: false,
						want:       "\"NOT\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 29, offset: 8566},
						val:        "NOP",
						ignoreCase: false,
						want:       "\"NOP\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 37, offset: 8574},
						val:        "NEG",
						ignoreCase: false,
						want:       "\"NEG\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 45, offset: 8582},
						val:        "MUL",
						ignoreCase: false,
						want:       "\"MUL\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 53, offset: 8590},
						val:        "MOV",
						ignoreCase: false,
						want:       "\"MOV\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 61, offset: 8598},
						val:        "LTR",
						ignoreCase: false,
						want:       "\"LTR\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 69, offset: 8606},
						val:        "LSS",
						ignoreCase: false,
						want:       "\"LSS\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 77, offset: 8614},
						val:        "LSL",
						ignoreCase: false,
						want:       "\"LSL\"",
					},
					&litMatcher{
						pos:        position{line: 252, col: 85, offset: 8622},
						val:        "LGS",
						ignoreCase: false,
						want:       "\"LGS\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 5, offset: 8634},
						val:        "LFS",
						ignoreCase: false,
						want:       "\"LFS\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 13, offset: 8642},
						val:        "LES",
						ignoreCase: false,
						want:       "\"LES\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 21, offset: 8650},
						val:        "LEA",
						ignoreCase: false,
						want:       "\"LEA\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 29, offset: 8658},
						val:        "LDS",
						ignoreCase: false,
						want:       "\"LDS\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 37, offset: 8666},
						val:        "LAR",
						ignoreCase: false,
						want:       "\"LAR\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 45, offset: 8674},
						val:        "JPO",
						ignoreCase: false,
						want:       "\"JPO\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 53, offset: 8682},
						val:        "JPE",
						ignoreCase: false,
						want:       "\"JPE\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 61, offset: 8690},
						val:        "JNZ",
						ignoreCase: false,
						want:       "\"JNZ\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 69, offset: 8698},
						val:        "JNS",
						ignoreCase: false,
						want:       "\"JNS\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 77, offset: 8706},
						val:        "JNP",
						ignoreCase: false,
						want:       "\"JNP\"",
					},
					&litMatcher{
						pos:        position{line: 253, col: 85, offset: 8714},
						val:        "JNO",
						ignoreCase: false,
						want:       "\"JNO\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 5, offset: 8726},
						val:        "JNL",
						ignoreCase: false,
						want:       "\"JNL\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 13, offset: 8734},
						val:        "JNG",
						ignoreCase: false,
						want:       "\"JNG\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 21, offset: 8742},
						val:        "JNE",
						ignoreCase: false,
						want:       "\"JNE\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 29, offset: 8750},
						val:        "JNC",
						ignoreCase: false,
						want:       "\"JNC\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 37, offset: 8758},
						val:        "JNB",
						ignoreCase: false,
						want:       "\"JNB\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 45, offset: 8766},
						val:        "JNA",
						ignoreCase: false,
						want:       "\"JNA\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 53, offset: 8774},
						val:        "JMP",
						ignoreCase: false,
						want:       "\"JMP\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 61, offset: 8782},
						val:        "JLE",
						ignoreCase: false,
						want:       "\"JLE\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 69, offset: 8790},
						val:        "JGE",
						ignoreCase: false,
						want:       "\"JGE\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 77, offset: 8798},
						val:        "JBE",
						ignoreCase: false,
						want:       "\"JBE\"",
					},
					&litMatcher{
						pos:        position{line: 254, col: 85, offset: 8806},
						val:        "JAE",
						ignoreCase: false,
						want:       "\"JAE\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 5, offset: 8818},
						val:        "INT",
						ignoreCase: false,
						want:       "\"INT\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 13, offset: 8826},
						val:        "INC",
						ignoreCase: false,
						want:       "\"INC\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 21, offset: 8834},
						val:        "HLT",
						ignoreCase: false,
						want:       "\"HLT\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 29, offset: 8842},
						val:        "FST",
						ignoreCase: false,
						want:       "\"FST\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 37, offset: 8850},
						val:        "FLD",
						ignoreCase: false,
						want:       "\"FLD\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 45, offset: 8858},
						val:        "END",
						ignoreCase: false,
						want:       "\"END\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 53, offset: 8866},
						val:        "DIV",
						ignoreCase: false,
						want:       "\"DIV\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 61, offset: 8874},
						val:        "DEC",
						ignoreCase: false,
						want:       "\"DEC\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 69, offset: 8882},
						val:        "DAS",
						ignoreCase: false,
						want:       "\"DAS\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 77, offset: 8890},
						val:        "DAA",
						ignoreCase: false,
						want:       "\"DAA\"",
					},
					&litMatcher{
						pos:        position{line: 255, col: 85, offset: 8898},
						val:        "CWD",
						ignoreCase: false,
						want:       "\"CWD\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 5, offset: 8910},
						val:        "CMP",
						ignoreCase: false,
						want:       "\"CMP\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 13, offset: 8918},
						val:        "CMC",
						ignoreCase: false,
						want:       "\"CMC\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 21, offset: 8926},
						val:        "CLI",
						ignoreCase: false,
						want:       "\"CLI\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 29, offset: 8934},
						val:        "CLD",
						ignoreCase: false,
						want:       "\"CLD\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 37, offset: 8942},
						val:        "CLC",
						ignoreCase: false,
						want:       "\"CLC\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 45, offset: 8950},
						val:        "CDQ",
						ignoreCase: false,
						want:       "\"CDQ\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 53, offset: 8958},
						val:        "CBW",
						ignoreCase: false,
						want:       "\"CBW\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 61, offset: 8966},
						val:        "BTS",
						ignoreCase: false,
						want:       "\"BTS\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 69, offset: 8974},
						val:        "BTR",
						ignoreCase: false,
						want:       "\"BTR\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 77, offset: 8982},
						val:        "BTC",
						ignoreCase: false,
						want:       "\"BTC\"",
					},
					&litMatcher{
						pos:        position{line: 256, col: 85, offset: 8990},
						val:        "BSR",
						ignoreCase: false,
						want:       "\"BSR\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 5, offset: 9002},
						val:        "BSF",
						ignoreCase: false,
						want:       "\"BSF\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 13, offset: 9010},
						val:        "AND",
						ignoreCase: false,
						want:       "\"AND\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 21, offset: 9018},
						val:        "ADD",
						ignoreCase: false,
						want:       "\"ADD\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 29, offset: 9026},
						val:        "ADC",
						ignoreCase: false,
						want:       "\"ADC\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 37, offset: 9034},
						val:        "AAS",
						ignoreCase: false,
						want:       "\"AAS\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 45, offset: 9042},
						val:        "AAM",
						ignoreCase: false,
						want:       "\"AAM\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 53, offset: 9050},
						val:        "AAD",
						ignoreCase: false,
						want:       "\"AAD\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 61, offset: 9058},
						val:        "AAA",
						ignoreCase: false,
						want:       "\"AAA\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 69, offset: 9066},
						val:        "OR",
						ignoreCase: false,
						want:       "\"OR\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 76, offset: 9073},
						val:        "JZ",
						ignoreCase: false,
						want:       "\"JZ\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 83, offset: 9080},
						val:        "JS",
						ignoreCase: false,
						want:       "\"JS\"",
					},
					&litMatcher{
						pos:        position{line: 257, col: 90, offset: 9087},
						val:        "JP",
						ignoreCase: false,
						want:       "\"JP\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 5, offset: 9098},
						val:        "JO",
						ignoreCase: false,
						want:       "\"JO\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 12, offset: 9105},
						val:        "JL",
						ignoreCase: false,
						want:       "\"JL\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 19, offset: 9112},
						val:        "JG",
						ignoreCase: false,
						want:       "\"JG\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 26, offset: 9119},
						val:        "JE",
						ignoreCase: false,
						want:       "\"JE\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 33, offset: 9126},
						val:        "JC",
						ignoreCase: false,
						want:       "\"JC\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 40, offset: 9133},
						val:        "JB",
						ignoreCase: false,
						want:       "\"JB\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 47, offset: 9140},
						val:        "JA",
						ignoreCase: false,
						want:       "\"JA\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 54, offset: 9147},
						val:        "IN",
						ignoreCase: false,
						want:       "\"IN\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 61, offset: 9154},
						val:        "DW",
						ignoreCase: false,
						want:       "\"DW\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 68, offset: 9161},
						val:        "DT",
						ignoreCase: false,
						want:       "\"DT\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 75, offset: 9168},
						val:        "DQ",
						ignoreCase: false,
						want:       "\"DQ\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 82, offset: 9175},
						val:        "DD",
						ignoreCase: false,
						want:       "\"DD\"",
					},
					&litMatcher{
						pos:        position{line: 258, col: 89, offset: 9182},
						val:        "DB",
						ignoreCase: false,
						want:       "\"DB\"",
					},
					&litMatcher{
						pos:        position{line: 259, col: 5, offset: 9193},
						val:        "BT",
						ignoreCase: false,
						want:       "\"BT\"",
					},
				},
			},
		},
		{
			name: "DataType",
			pos:  position{line: 261, col: 1, offset: 9201},
			expr: &choiceExpr{
				pos: position{line: 261, col: 12, offset: 9212},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 261, col: 12, offset: 9212},
						val:        "BYTE",
						ignoreCase: false,
						want:       "\"BYTE\"",
					},
					&litMatcher{
						pos:        position{line: 261, col: 21, offset: 9221},
						val:        "WORD",
						ignoreCase: false,
						want:       "\"WORD\"",
					},
					&litMatcher{
						pos:        position{line: 261, col: 30, offset: 9230},
						val:        "DWORD",
						ignoreCase: false,
						want:       "\"DWORD\"",
					},
				},
			},
		},
		{
			name: "JumpType",
			pos:  position{line: 262, col: 1, offset: 9240},
			expr: &choiceExpr{
				pos: position{line: 262, col: 12, offset: 9251},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 262, col: 12, offset: 9251},
						val:        "SHORT",
						ignoreCase: false,
						want:       "\"SHORT\"",
					},
					&litMatcher{
						pos:        position{line: 262, col: 22, offset: 9261},
						val:        "NEAR",
						ignoreCase: false,
						want:       "\"NEAR\"",
					},
					&litMatcher{
						pos:        position{line: 262, col: 31, offset: 9270},
						val:        "FAR",
						ignoreCase: false,
						want:       "\"FAR\"",
					},
				},
			},
		},
		{
			name: "MemoryAddrExp",
			pos:  position{line: 264, col: 1, offset: 9279},
			expr: &actionExpr{
				pos: position{line: 264, col: 18, offset: 9296},
				run: (*parser).callonMemoryAddrExp1,
				expr: &seqExpr{
					pos: position{line: 264, col: 18, offset: 9296},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 264, col: 18, offset: 9296},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 21, offset: 9299},
							label: "d",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 23, offset: 9301},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 23, offset: 9301},
									name: "DataType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 33, offset: 9311},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 36, offset: 9314},
							label: "j",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 38, offset: 9316},
								expr: &ruleRefExpr{
									pos:  position{line: 264, col: 38, offset: 9316},
									name: "JumpType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 48, offset: 9326},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 264, col: 51, offset: 9329},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 264, col: 55, offset: 9333},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 58, offset: 9336},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 264, col: 60, offset: 9338},
								name: "AddExp",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 67, offset: 9345},
							label: "r",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 69, offset: 9347},
								expr: &seqExpr{
									pos: position{line: 264, col: 70, offset: 9348},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 264, col: 70, offset: 9348},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 264, col: 74, offset: 9352},
											name: "AddExp",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 264, col: 83, offset: 9361},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SegmentExp",
			pos:  position{line: 290, col: 1, offset: 10066},
			expr: &actionExpr{
				pos: position{line: 290, col: 15, offset: 10080},
				run: (*parser).callonSegmentExp1,
				expr: &seqExpr{
					pos: position{line: 290, col: 15, offset: 10080},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 290, col: 15, offset: 10080},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 290, col: 18, offset: 10083},
							label: "d",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 20, offset: 10085},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 20, offset: 10085},
									name: "DataType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 30, offset: 10095},
							name: "WS",
						},
						&labeledExpr{
							pos:   position{line: 290, col: 33, offset: 10098},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 35, offset: 10100},
								name: "AddExp",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 42, offset: 10107},
							label: "r",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 44, offset: 10109},
								expr: &seqExpr{
									pos: position{line: 290, col: 45, offset: 10110},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 290, col: 45, offset: 10110},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 290, col: 49, offset: 10114},
											name: "AddExp",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AddExp",
			pos:  position{line: 311, col: 1, offset: 10681},
			expr: &actionExpr{
				pos: position{line: 311, col: 11, offset: 10691},
				run: (*parser).callonAddExp1,
				expr: &seqExpr{
					pos: position{line: 311, col: 11, offset: 10691},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 311, col: 11, offset: 10691},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 16, offset: 10696},
								name: "MultExp",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 24, offset: 10704},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 311, col: 29, offset: 10709},
								expr: &seqExpr{
									pos: position{line: 311, col: 30, offset: 10710},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 311, col: 31, offset: 10711},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 311, col: 31, offset: 10711},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&litMatcher{
													pos:        position{line: 311, col: 37, offset: 10717},
													val:        "-",
													ignoreCase: false,
													want:       "\"-\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 311, col: 42, offset: 10722},
											name: "MultExp",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultExp",
			pos:  position{line: 340, col: 1, offset: 11448},
			expr: &actionExpr{
				pos: position{line: 340, col: 12, offset: 11459},
				run: (*parser).callonMultExp1,
				expr: &seqExpr{
					pos: position{line: 340, col: 12, offset: 11459},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 340, col: 12, offset: 11459},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 17, offset: 11464},
								name: "ImmExp",
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 24, offset: 11471},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 340, col: 29, offset: 11476},
								expr: &seqExpr{
									pos: position{line: 340, col: 30, offset: 11477},
									exprs: []any{
										&choiceExpr{
											pos: position{line: 340, col: 31, offset: 11478},
											alternatives: []any{
												&litMatcher{
													pos:        position{line: 340, col: 31, offset: 11478},
													val:        "*",
													ignoreCase: false,
													want:       "\"*\"",
												},
												&litMatcher{
													pos:        position{line: 340, col: 37, offset: 11484},
													val:        "/",
													ignoreCase: false,
													want:       "\"/\"",
												},
												&litMatcher{
													pos:        position{line: 340, col: 43, offset: 11490},
													val:        "%",
													ignoreCase: false,
													want:       "\"%\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 340, col: 48, offset: 11495},
											name: "ImmExp",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImmExp",
			pos:  position{line: 369, col: 1, offset: 12219},
			expr: &actionExpr{
				pos: position{line: 369, col: 11, offset: 12229},
				run: (*parser).callonImmExp1,
				expr: &labeledExpr{
					pos:   position{line: 369, col: 11, offset: 12229},
					label: "f",
					expr: &ruleRefExpr{
						pos:  position{line: 369, col: 13, offset: 12231},
						name: "Factor",
					},
				},
			},
		},
		{
			name: "Factor",
			pos:  position{line: 377, col: 1, offset: 12389},
			expr: &choiceExpr{
				pos: position{line: 377, col: 11, offset: 12399},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 377, col: 11, offset: 12399},
						name: "HexFactor",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 12415},
						name: "NumberFactor",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 5, offset: 12434},
						name: "IdentFactor",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 5, offset: 12452},
						name: "StringFactor",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 5, offset: 12471},
						name: "CharFactor",
					},
				},
			},
		},
		{
			name: "ReservedWord",
			pos:  position{line: 383, col: 1, offset: 12483},
			expr: &choiceExpr{
				pos: position{line: 383, col: 16, offset: 12498},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 383, col: 16, offset: 12498},
						val:        "EQU",
						ignoreCase: false,
						want:       "\"EQU\"",
					},
					&litMatcher{
						pos:        position{line: 383, col: 24, offset: 12506},
						val:        "GLOBAL",
						ignoreCase: false,
						want:       "\"GLOBAL\"",
					},
					&litMatcher{
						pos:        position{line: 383, col: 35, offset: 12517},
						val:        "EXTERN",
						ignoreCase: false,
						want:       "\"EXTERN\"",
					},
					&ruleRefExpr{
						pos:  position{line: 383, col: 46, offset: 12528},
						name: "DataType",
					},
				},
			},
		},
		{
			name: "IdentFactor",
			pos:  position{line: 385, col: 1, offset: 12540},
			expr: &actionExpr{
				pos: position{line: 385, col: 16, offset: 12555},
				run: (*parser).callonIdentFactor1,
				expr: &seqExpr{
					pos: position{line: 385, col: 16, offset: 12555},
					exprs: []any{
						&notExpr{
							pos: position{line: 385, col: 16, offset: 12555},
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 17, offset: 12556},
								name: "ReservedWord",
							},
						},
						&charClassMatcher{
							pos:        position{line: 385, col: 30, offset: 12569},
							val:        "[a-zA-Z$_.]",
							chars:      []rune{'$', '_', '.'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 385, col: 42, offset: 12581},
							expr: &charClassMatcher{
								pos:        position{line: 385, col: 43, offset: 12582},
								val:        "[a-zA-Z$_.0-9]",
								chars:      []rune{'$', '_', '.'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "HexFactor",
			pos:  position{line: 389, col: 1, offset: 12673},
			expr: &actionExpr{
				pos: position{line: 389, col: 14, offset: 12686},
				run: (*parser).callonHexFactor1,
				expr: &seqExpr{
					pos: position{line: 389, col: 14, offset: 12686},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 389, col: 14, offset: 12686},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&choiceExpr{
							pos: position{line: 389, col: 19, offset: 12691},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 389, col: 19, offset: 12691},
									val:        "x",
									ignoreCase: false,
									want:       "\"x\"",
								},
								&litMatcher{
									pos:        position{line: 389, col: 25, offset: 12697},
									val:        "X",
									ignoreCase: false,
									want:       "\"X\"",
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 389, col: 30, offset: 12702},
							expr: &choiceExpr{
								pos: position{line: 389, col: 31, offset: 12703},
								alternatives: []any{
									&charClassMatcher{
										pos:        position{line: 389, col: 31, offset: 12703},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 389, col: 39, offset: 12711},
										val:        "[\"abcdef\"]",
										chars:      []rune{'"', 'a', 'b', 'c', 'd', 'e', 'f', '"'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 389, col: 52, offset: 12724},
										val:        "[\"ABCDEF\"]",
										chars:      []rune{'"', 'A', 'B', 'C', 'D', 'E', 'F', '"'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringFactor",
			pos:  position{line: 393, col: 1, offset: 12809},
			expr: &actionExpr{
				pos: position{line: 393, col: 17, offset: 12825},
				run: (*parser).callonStringFactor1,
				expr: &seqExpr{
					pos: position{line: 393, col: 17, offset: 12825},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 393, col: 17, offset: 12825},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 393, col: 21, offset: 12829},
							expr: &choiceExpr{
								pos: position{line: 393, col: 23, offset: 12831},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 393, col: 23, offset: 12831},
										exprs: []any{
											&notExpr{
												pos: position{line: 393, col: 23, offset: 12831},
												expr: &ruleRefExpr{
													pos:  position{line: 393, col: 24, offset: 12832},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 393, col: 36, offset: 12844,
											},
										},
									},
									&seqExpr{
										pos: position{line: 393, col: 40, offset: 12848},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 393, col: 40, offset: 12848},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 393, col: 45, offset: 12853},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 63, offset: 12871},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 402, col: 1, offset: 13119},
			expr: &charClassMatcher{
				pos:        position{line: 402, col: 15, offset: 13135},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 403, col: 1, offset: 13150},
			expr: &choiceExpr{
				pos: position{line: 403, col: 18, offset: 13169},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 403, col: 18, offset: 13169},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 403, col: 37, offset: 13188},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "CharFactor",
			pos:  position{line: 405, col: 1, offset: 13203},
			expr: &actionExpr{
				pos: position{line: 405, col: 15, offset: 13217},
				run: (*parser).callonCharFactor1,
				expr: &seqExpr{
					pos: position{line: 405, col: 15, offset: 13217},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 405, col: 15, offset: 13217},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 20, offset: 13222},
							expr: &choiceExpr{
								pos: position{line: 405, col: 21, offset: 13223},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 405, col: 21, offset: 13223},
										name: "NormalChar",
									},
									&ruleRefExpr{
										pos:  position{line: 405, col: 34, offset: 13236},
										name: "SingleCharEscape",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 53, offset: 13255},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "NormalChar",
			pos:  position{line: 409, col: 1, offset: 13377},
			expr: &charClassMatcher{
				pos:        position{line: 409, col: 15, offset: 13391},
				val:        "[^'\\\\]",
				chars:      []rune{'\'', '\\'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 410, col: 1, offset: 13478},
			expr: &seqExpr{
				pos: position{line: 410, col: 21, offset: 13498},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 410, col: 21, offset: 13498},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&charClassMatcher{
						pos:        position{line: 410, col: 26, offset: 13503},
						val:        "[''\\\\/bfnrt']",
						chars:      []rune{'\'', '\'', '\\', '/', 'b', 'f', 'n', 'r', 't', '\''},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "NumberFactor",
			pos:  position{line: 412, col: 1, offset: 13553},
			expr: &actionExpr{
				pos: position{line: 412, col: 17, offset: 13569},
				run: (*parser).callonNumberFactor1,
				expr: &seqExpr{
					pos: position{line: 412, col: 17, offset: 13569},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 412, col: 17, offset: 13569},
							expr: &litMatcher{
								pos:        position{line: 412, col: 17, offset: 13569},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 412, col: 22, offset: 13574},
							expr: &charClassMatcher{
								pos:        position{line: 412, col: 22, offset: 13574},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 420, col: 1, offset: 13754},
			expr: &actionExpr{
				pos: position{line: 420, col: 12, offset: 13765},
				run: (*parser).callonComment1,
				expr: &seqExpr{
					pos: position{line: 420, col: 12, offset: 13765},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 420, col: 13, offset: 13766},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 420, col: 13, offset: 13766},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&litMatcher{
									pos:        position{line: 420, col: 19, offset: 13772},
									val:        ";",
									ignoreCase: false,
									want:       "\";\"",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 24, offset: 13777},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 24, offset: 13777},
								name: "Char",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 420, col: 30, offset: 13783},
							name: "END",
						},
					},
				},
			},
		},
		{
			name: "Char",
			pos:  position{line: 424, col: 1, offset: 13823},
			expr: &charClassMatcher{
				pos:        position{line: 424, col: 9, offset: 13831},
				val:        "[^\\n\\r]",
				chars:      []rune{'\n', '\r'},
				ignoreCase: false,
				inverted:   true,
			},
		},
		{
			name: "_",
			pos:  position{line: 426, col: 1, offset: 13840},
			expr: &zeroOrMoreExpr{
				pos: position{line: 426, col: 6, offset: 13845},
				expr: &choiceExpr{
					pos: position{line: 426, col: 7, offset: 13846},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 426, col: 7, offset: 13846},
							val:        "[ \\n\\t\\r]",
							chars:      []rune{' ', '\n', '\t', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 426, col: 19, offset: 13858},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 427, col: 1, offset: 13868},
			expr: &oneOrMoreExpr{
				pos: position{line: 427, col: 7, offset: 13874},
				expr: &choiceExpr{
					pos: position{line: 427, col: 8, offset: 13875},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 427, col: 8, offset: 13875},
							val:        "[ \\n\\t\\r]",
							chars:      []rune{' ', '\n', '\t', '\r'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 20, offset: 13887},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 428, col: 1, offset: 13897},
			expr: &zeroOrMoreExpr{
				pos: position{line: 428, col: 7, offset: 13903},
				expr: &charClassMatcher{
					pos:        position{line: 428, col: 7, offset: 13903},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "TrailingWsEOL",
			pos:  position{line: 429, col: 1, offset: 13910},
			expr: &seqExpr{
				pos: position{line: 429, col: 18, offset: 13927},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 429, col: 18, offset: 13927},
						expr: &charClassMatcher{
							pos:        position{line: 429, col: 18, offset: 13927},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 429, col: 25, offset: 13934},
						expr: &seqExpr{
							pos: position{line: 429, col: 26, offset: 13935},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 429, col: 27, offset: 13936},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 429, col: 27, offset: 13936},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&litMatcher{
											pos:        position{line: 429, col: 33, offset: 13942},
											val:        ";",
											ignoreCase: false,
											want:       "\";\"",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 429, col: 38, offset: 13947},
									expr: &ruleRefExpr{
										pos:  position{line: 429, col: 38, offset: 13947},
										name: "Char",
									},
								},
							},
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 429, col: 46, offset: 13955},
						expr: &ruleRefExpr{
							pos:  position{line: 429, col: 46, offset: 13955},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "END",
			pos:  position{line: 431, col: 1, offset: 13961},
			expr: &choiceExpr{
				pos: position{line: 431, col: 8, offset: 13968},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 431, col: 8, offset: 13968},
						name: "EOL",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 14, offset: 13974},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 433, col: 1, offset: 13979},
			expr: &choiceExpr{
				pos: position{line: 433, col: 8, offset: 13986},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 433, col: 8, offset: 13986},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
					&litMatcher{
						pos:        position{line: 433, col: 15, offset: 13993},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 433, col: 22, offset: 14000},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 435, col: 1, offset: 14008},
			expr: &notExpr{
				pos: position{line: 435, col: 8, offset: 14015},
				expr: &anyMatcher{
					line: 435, col: 9, offset: 14016,
				},
			},
		},
	},
}

func (c *current) onProgram1(list any) (any, error) {
	statements := make([]ast.Statement, 0)
	for _, anySlice := range toAnySlice(list) {
		stmt, ok := anySlice.(ast.Statement)
		if !ok {
			return nil, parseError("statement")
		}
		statements = append(statements, stmt)
	}
	return ast.NewProgram(statements), nil
}

func (p *parser) callonProgram1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProgram1(stack["list"])
}

func (c *current) onLabelStmt1(l any) (any, error) {
	label, ok := l.(string)
	if !ok {
		return nil, parseError("label")
	}
	return ast.NewLabelStmt(ast.BaseStatement{}, ast.NewIdentFactor(ast.BaseFactor{}, label)), nil
}

func (p *parser) callonLabelStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabelStmt1(stack["l"])
}

func (c *current) onLabel1(l any) (any, error) {
	label := ""
	value := toAnySlice(l)
	label += string(value[0].([]byte))
	for _, v := range toAnySlice(value[1]) {
		label += string(v.([]byte))
	}
	label += string(value[2].([]byte))
	return strings.TrimSpace(label), nil
}

func (p *parser) callonLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabel1(stack["l"])
}

func (c *current) onDeclareStmt1(f, e any) (any, error) {
	factor, ok := f.(*ast.IdentFactor)
	if !ok {
		return nil, parseError("declareStmt ident")
	}
	exp, ok := e.(ast.Exp)
	if !ok {
		return nil, parseError("declareStmt exp")
	}
	return ast.NewDeclareStmt(ast.BaseStatement{}, factor, exp), nil
}

func (p *parser) callonDeclareStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeclareStmt1(stack["f"], stack["e"])
}

func (c *current) onExportSymStmt1(head, tail any) (any, error) {
	factors := make([]*ast.IdentFactor, 0)
	f, ok := head.(*ast.IdentFactor)
	if !ok {
		return nil, parseError("exportSymStmt head")
	}
	factors = append(factors, f)

	for _, anySlice := range toAnySlice(tail) {
		tuple := toAnySlice(anySlice)
		if tuple == nil {
			return nil, parseError("exportSymStmt tail")
		}
		f, ok := tuple[3].(*ast.IdentFactor)
		if !ok {
			return nil, parseError("exportSymStmt tail")
		}
		factors = append(factors, f)
	}

	return ast.NewExportSymStmt(ast.BaseStatement{}, factors), nil
}

func (p *parser) callonExportSymStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExportSymStmt1(stack["head"], stack["tail"])
}

func (c *current) onExternSymStmt1(head, tail any) (any, error) {
	factors := make([]*ast.IdentFactor, 0)
	f, ok := head.(*ast.IdentFactor)
	if !ok {
		return nil, parseError("externSymStmt head")
	}
	factors = append(factors, f)

	for _, anySlice := range toAnySlice(tail) {
		tuple := toAnySlice(anySlice)
		if tuple == nil {
			return nil, parseError("externSymStmt tail")
		}
		f, ok := tuple[3].(*ast.IdentFactor)
		if !ok {
			return nil, parseError("externSymStmt tail")
		}
		factors = append(factors, f)
	}

	return ast.NewExternSymStmt(ast.BaseStatement{}, factors), nil
}

func (p *parser) callonExternSymStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternSymStmt1(stack["head"], stack["tail"])
}

func (c *current) onConfigStmt1(config, f any) (any, error) {
	configType, ok := config.(ast.ConfigType)
	if !ok {
		return nil, parseError("configStmt config")
	}
	factor, ok := f.(ast.Factor)
	if !ok {
		return nil, parseError("configStmt factor")
	}
	return ast.NewConfigStmt(ast.BaseStatement{}, configType, factor), nil
}

func (p *parser) callonConfigStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConfigStmt1(stack["config"], stack["f"])
}

func (c *current) onConfigType1(conf any) (any, error) {
	config, err := gats.ToString(conf)
	if err != nil {
		return nil, failure.Wrap(err)
	}
	configType, ok := ast.NewConfigType(config)
	if !ok {
		return nil, parseError("configType")
	}

	return configType, nil
}

func (p *parser) callonConfigType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConfigType1(stack["conf"])
}

func (c *current) onMnemonicStmt1(o, tail any) (any, error) {
	opcodeStr, err := gats.ToString(o)
	if err != nil {
		return nil, failure.Wrap(err)
	}
	opcode := ast.NewIdentFactor(ast.BaseFactor{}, opcodeStr)
	operands, ok := tail.([]ast.Exp)
	if !ok {
		return nil, parseError("mnemonicStmt tail")
	}

	return ast.NewMnemonicStmt(ast.BaseStatement{}, opcode, operands), nil
}

func (p *parser) callonMnemonicStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMnemonicStmt1(stack["o"], stack["tail"])
}

func (c *current) onOperandList1(head, tail any) (any, error) {
	operands := make([]ast.Exp, 0)

	e, _ := head.(ast.Exp)
	operands = append(operands, e)

	for _, s := range toAnySlice(tail) {
		tuple := toAnySlice(s)
		if tuple == nil {
			return nil, parseError("mnemonicStmt tail")
		}
		exp, ok := tuple[3].(ast.Exp)
		if !ok {
			return nil, parseError("mnemonicStmt tail")
		}
		operands = append(operands, exp)
	}

	return operands, nil
}

func (p *parser) callonOperandList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperandList1(stack["head"], stack["tail"])
}

func (c *current) onOpcodeStmt1(o any) (any, error) {
	opcodeStr, err := gats.ToString(o)
	if err != nil {
		return nil, failure.Wrap(err)
	}
	opcode := ast.NewIdentFactor(ast.BaseFactor{}, opcodeStr)
	return ast.NewMnemonicStmt(ast.BaseStatement{}, opcode, []ast.Exp{}), nil
}

func (p *parser) callonOpcodeStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpcodeStmt1(stack["o"])
}

func (c *current) onMemoryAddrExp1(d, j, l, r any) (any, error) {
	var dt ast.DataType
	if dts, err := gats.ToString(d); err == nil {
		dt, _ = ast.NewDataType(dts)
	}
	var jt ast.JumpType
	if jts, err := gats.ToString(j); err == nil {
		jt, _ = ast.NewJumpType(jts)
	}

	left, ok := l.(*ast.AddExp)
	if !ok {
		return nil, parseError("memoryAddrExp left")
	}
	tuple := toAnySlice(r)
	if tuple == nil || tuple[1] == nil {
		return ast.NewMemoryAddrExp(ast.BaseExp{}, dt, jt, left, nil), nil
	}
	right, ok := tuple[1].(*ast.AddExp)
	if !ok {
		return ast.NewMemoryAddrExp(ast.BaseExp{}, dt, jt, left, nil), nil
	}

	return ast.NewMemoryAddrExp(ast.BaseExp{}, dt, jt, left, right), nil
}

func (p *parser) callonMemoryAddrExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemoryAddrExp1(stack["d"], stack["j"], stack["l"], stack["r"])
}

func (c *current) onSegmentExp1(d, l, r any) (any, error) {
	var dt ast.DataType
	if dts, err := gats.ToString(d); err == nil {
		dt, _ = ast.NewDataType(dts)
	}
	left, ok := l.(*ast.AddExp)
	if !ok {
		return nil, parseError("segmentExp left")
	}
	tuple := toAnySlice(r)
	if tuple == nil || tuple[1] == nil {
		return ast.NewSegmentExp(ast.BaseExp{}, dt, left, nil), nil
	}
	right, ok := tuple[1].(*ast.AddExp)
	if !ok {
		return ast.NewSegmentExp(ast.BaseExp{}, dt, left, nil), nil
	}

	return ast.NewSegmentExp(ast.BaseExp{}, dt, left, right), nil
}

func (p *parser) callonSegmentExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSegmentExp1(stack["d"], stack["l"], stack["r"])
}

func (c *current) onAddExp1(head, tail any) (any, error) {
	mult, ok := head.(*ast.MultExp)
	if !ok {
		return nil, parseError("addExp head")
	}

	ops := make([]string, 0)
	exps := make([]*ast.MultExp, 0)

	for _, anySlice := range toAnySlice(tail) {
		tuple := toAnySlice(anySlice)
		if tuple == nil {
			return nil, parseError("addExp tail")
		}
		op, err := gats.ToString(tuple[0])
		if err != nil {
			return nil, failure.Wrap(err)
		}
		ops = append(ops, op)

		exp, ok := tuple[1].(*ast.MultExp)
		if !ok {
			return nil, parseError("addExp tail")
		}
		exps = append(exps, exp)
	}
	return ast.NewAddExp(ast.BaseExp{}, mult, ops, exps), nil
}

func (p *parser) callonAddExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddExp1(stack["head"], stack["tail"])
}

func (c *current) onMultExp1(head, tail any) (any, error) {
	imm, ok := head.(*ast.ImmExp)
	if !ok {
		return nil, parseError("multExp head")
	}

	ops := make([]string, 0)
	exps := make([]*ast.ImmExp, 0)

	for _, anySlice := range toAnySlice(tail) {
		tuple := toAnySlice(anySlice)
		if tuple == nil {
			return nil, parseError("multExp tail")
		}
		op, err := gats.ToString(tuple[0])
		if err != nil {
			return nil, failure.Wrap(err)
		}
		ops = append(ops, op)

		exp, ok := tuple[1].(*ast.ImmExp)
		if !ok {
			return nil, parseError("multExp tail")
		}
		exps = append(exps, exp)
	}
	return ast.NewMultExp(ast.BaseExp{}, imm, ops, exps), nil
}

func (p *parser) callonMultExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultExp1(stack["head"], stack["tail"])
}

func (c *current) onImmExp1(f any) (any, error) {
	factor, ok := f.(ast.Factor)
	if !ok {
		return nil, parseError("immExp")
	}
	return ast.NewImmExp(ast.BaseExp{}, factor), nil
}

func (p *parser) callonImmExp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImmExp1(stack["f"])
}

func (c *current) onIdentFactor1() (any, error) {
	return ast.NewIdentFactor(ast.BaseFactor{}, string(c.text)), nil
}

func (p *parser) callonIdentFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentFactor1()
}

func (c *current) onHexFactor1() (any, error) {
	return ast.NewHexFactor(ast.BaseFactor{}, string(c.text)), nil
}

func (p *parser) callonHexFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexFactor1()
}

func (c *current) onStringFactor1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	text, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, failure.Wrap(err)
	}
	return ast.NewStringFactor(ast.BaseFactor{}, text), nil
}

func (p *parser) callonStringFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringFactor1()
}

func (c *current) onCharFactor1() (any, error) {
	charSeq := string(c.text)
	return ast.NewCharFactor(ast.BaseFactor{}, charSeq[1:len(charSeq)-1]), nil
}

func (p *parser) callonCharFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharFactor1()
}

func (c *current) onNumberFactor1() (any, error) {
	val, err := strconv.Atoi(string(c.text))
	if err != nil {
		return nil, failure.Wrap(err)
	}
	return ast.NewNumberFactor(ast.BaseFactor{}, val), nil
}

func (p *parser) callonNumberFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberFactor1()
}

func (c *current) onComment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
