{
package gen


import (
	"github.com/hangingman/gosk/ast"
)

// part of the initializer code block omitted for brevity
}

Factor <- IntegerFactor / HexFactor / IdentFactor / StringFactor / CharFactor

IdentFactor <- [a-zA-Z$_.] ([a-zA-Z$_.0-9])* {
    return ast.NewIdentFactor(ast.BaseFactor{}, string(c.text)), nil
}

Label <- [a-zA-Z$_.] ([a-zA-Z$_.0-9])* ':' &(_) {
    return string(c.text), nil
}

HexFactor <- '0' ('x' / 'X') ([0-9] / ["abcdef"] / ["ABCDEF"])+ {
    return ast.NewHexFactor(ast.BaseFactor{}, string(c.text)), nil
}

StringFactor <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    text, err := strconv.Unquote(string(c.text))
    if err != nil {
        return nil, nil
    }
    return ast.NewStringFactor(ast.BaseFactor{}, text), nil
}

EscapedChar ← [\x00-\x1f"\\]
EscapeSequence ← SingleCharEscape / UnicodeEscape

CharFactor <- '\'' (NormalChar / SingleCharEscape)* '\'' {
    charSeq := string(c.text)
    return ast.NewCharFactor(ast.BaseFactor{}, charSeq[1 : len(charSeq) - 1]), nil
}
NormalChar <- [^'\\]  // シングルクォートとバックスラッシュ以外の任意の文字
SingleCharEscape <- '\\' [''\\/bfnrt']  // エスケープされた文字

Letter <- [a-zA-Z] {
    return []rune(string(c.text)), nil
}

NumberFactor <- '-'? [0-9]+ {
    val, err := strconv.Atoi(string(c.text))
    if err != nil {
        return nil, nil
    }
    return ast.NewNumberFactor(ast.BaseFactor{}, val), nil
}

_ "whitespace" <- [ \n\t\r]*

Comment <- ('#' / ';') Char* (EOL / EOF) {
    return "", nil
}

Char <- [^\n\r]

EOL <- '\n' / '\r' / "\r\n"

EOF <- !.
