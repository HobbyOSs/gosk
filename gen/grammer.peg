{
package gen

import (
    "strings"
    "github.com/morikuni/failure"
    "github.com/hangingman/gosk/ast"
    "github.com/harakeishi/gats"
)

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

func parseError(message string) error {
	return failure.New(ParseError,
		failure.Context{"message": message},
		failure.Message("Parse error"),
	)
}

func convertAnyToString(value any) string {
	v := reflect.ValueOf(value)
	switch v.Kind() {
	case reflect.Slice, reflect.Array:
		// 特別な処理: []byte型を検出した場合は文字列として変換
		if v.Type().Elem().Kind() == reflect.Uint8 {
			return string(value.([]byte))
		}

		var result []string // 文字列のスライスとして結果を保持
		for i := 0; i < v.Len(); i++ {
			// スライスまたは配列の各要素に対して再帰的にこの関数を適用
			elementStr := convertAnyToString(v.Index(i).Interface())
			result = append(result, elementStr)
		}
		return "[" + strings.Join(result, ", ") + "]"
	default:
		// スライスまたは配列でない場合は、fmt.Sprintfを使用して文字列に変換
		return fmt.Sprintf("%v", value)
	}
}

const (
	ParseError failure.StringCode = "ParseError"
)

}

Program <- list:Statement* END {
    statements := make([]ast.Statement, 0)
    for _, anySlice := range toAnySlice(list) {
        stmt, ok := anySlice.(ast.Statement)
        if !ok {
            return nil, parseError("statement")
        }
        statements = append(statements, stmt)
    }
    return ast.NewProgram(statements), nil
}

Statement <- LabelStmt /
    DeclareStmt /
    ExportSymStmt /
    ExternSymStmt /
    ConfigStmt /
    MnemonicStmt /
    OpcodeStmt

LabelStmt <- l:Label _ {
    label, ok := l.(string)
    if !ok {
        return nil, parseError("label")
    }
    return ast.NewLabelStmt(ast.BaseStatement{}, ast.NewIdentFactor(ast.BaseFactor{}, label)), nil
}

Label <- !ReservedWord !Opcode l:([a-zA-Z$_.] [a-zA-Z$_.0-9]* ':') TrailingWsEOL {
    return strings.TrimSpace(string(c.text)), nil
}

DeclareStmt <- _ f:IdentFactor _ "EQU" _ e:Exp _ {
    factor, ok := f.(*ast.IdentFactor)
    if !ok {
        return nil, parseError("declareStmt ident")
    }
    exp, ok := e.(ast.Exp)
    if !ok {
        return nil, parseError("declareStmt exp")
    }
    return ast.NewDeclareStmt(ast.BaseStatement{}, factor, exp), nil
}

ExportSymStmt <- _ "GLOBAL" _ head:IdentFactor _ tail:(_ ',' _ IdentFactor)* _ {
    factors := make([]*ast.IdentFactor, 0)
    f, ok := head.(*ast.IdentFactor)
    if !ok {
        return nil, parseError("exportSymStmt head")
    }
    factors = append(factors, f)

    for _, anySlice := range toAnySlice(tail) {
        tuple := toAnySlice(anySlice)
        if tuple == nil {
            return nil, parseError("exportSymStmt tail")
        }
        f, ok := tuple[3].(*ast.IdentFactor)
        if ! ok {
            return nil, parseError("exportSymStmt tail")
        }
        factors = append(factors, f)
    }

    return ast.NewExportSymStmt(ast.BaseStatement{}, factors), nil
}

ExternSymStmt <- _ "EXTERN" _ head:IdentFactor _ tail:(_ ',' _ IdentFactor)* _ {
    factors := make([]*ast.IdentFactor, 0)
    f, ok := head.(*ast.IdentFactor)
    if !ok {
        return nil, parseError("externSymStmt head")
    }
    factors = append(factors, f)

    for _, anySlice := range toAnySlice(tail) {
        tuple := toAnySlice(anySlice)
        if tuple == nil {
            return nil, parseError("externSymStmt tail")
        }
        f, ok := tuple[3].(*ast.IdentFactor)
        if ! ok {
            return nil, parseError("externSymStmt tail")
        }
        factors = append(factors, f)
    }

    return ast.NewExternSymStmt(ast.BaseStatement{}, factors), nil
}

ConfigStmt <- _ config:ConfigType _ f:Factor ']' _ {
    configType, ok := config.(ast.ConfigType)
    if !ok {
        return nil, parseError("configStmt config")
    }
    factor, ok := f.(ast.Factor)
    if !ok {
        return nil, parseError("configStmt factor")
    }
    return ast.NewConfigStmt(ast.BaseStatement{}, configType, factor), nil
}

ConfigType <- '[' conf:Conf &(_ Factor ']') {
    config, err := gats.ToString(conf)
    if err != nil {
        return nil, failure.Wrap(err)
    }
    configType, ok := ast.NewConfigType(config)
    if !ok {
        return nil, parseError("configType")
    }

    return configType, nil
}

Conf = "BITS" / "INSTRSET" / "OPTIMIZE" / "FORMAT" / "PADDING" / "PADSET" / "SECTION" / "ABSOLUTE" / "FILE" ;

MnemonicStmt <- _ o:Opcode WS tail:OperandList _ {
    opcodeStr, err := gats.ToString(o)
    if err != nil {
        return nil, failure.Wrap(err)
    }
    opcode := ast.NewIdentFactor(ast.BaseFactor{}, opcodeStr)
    operands, ok := tail.([]ast.Exp)
    if !ok {
        return nil, parseError("mnemonicStmt tail")
    }

    return ast.NewMnemonicStmt(ast.BaseStatement{}, opcode, operands), nil
}

OperandList <- head:Operand tail:(WS ',' WS Operand)* {
    operands := make([]ast.Exp, 0)

    e, _ := head.(ast.Exp)
    operands = append(operands, e)

    for _, s := range toAnySlice(tail) {
        tuple := toAnySlice(s)
        if tuple == nil {
            return nil, parseError("mnemonicStmt tail")
        }
        exp, ok := tuple[3].(ast.Exp)
        if !ok {
            return nil, parseError("mnemonicStmt tail")
        }
        operands = append(operands, exp)
    }

    return operands, nil
}

OpcodeStmt <- _ o:Opcode _ {
    opcodeStr, err := gats.ToString(o)
    if err != nil {
        return nil, failure.Wrap(err)
    }
    opcode := ast.NewIdentFactor(ast.BaseFactor{}, opcodeStr)
    return ast.NewMnemonicStmt(ast.BaseStatement{}, opcode, []ast.Exp{}), nil
}

Operand <- Exp

Exp <- MemoryAddrExp / SegmentExp

// オペコードを最も長いパターンにマッチさせるために、辞書順ではなく文字列長でソートしている
Opcode = "FYL2XP1" / "FXTRACT" / "FUCOMPP" / "FSINCOS" / "FRNDINT" / "FNSTENV" / "FINCSTP" /
    "FDECSTP" / "CMPXCHG" / "WBINVD" / "SETNLE" / "SETNGE" / "SETNBE" / "SETNAE" /
    "PUSHFW" / "PUSHFD" / "PUSHAW" / "PUSHAD" / "LOOPNZ" / "LOOPNE" / "INVLPG" / "FUCOMP" /
    "FSUBRP" / "FSTENV" / "FSETPM" / "FSCALE" / "FRSTOR" / "FPREM1" / "FPATAN" / "FNSTSW" /
    "FNSTCW" / "FNSAVE" / "FNINIT" / "FNDISI" / "FNCLEX" / "FLDLN2" / "FLDLG2" / "FLDL2T" /
    "FLDL2E" / "FLDENV" / "FISUBR" / "FIDIVR" / "FICOMP" / "FDIVRP" / "FCOMPP" / "ALIGNB" /
    "XLATB" / "WRMSR" / "TIMES" / "STOSW" / "STOSD" / "STOSB" / "SETPO" / "SETPE" / "SETNZ" /
    "SETNS" / "SETNP" / "SETNO" / "SETNL" / "SETNG" / "SETNE" / "SETNC" / "SETNB" / "SETNA" /
    "SETLE" / "SETGE" / "SETBE" / "SETAE" / "SCASW" / "SCASD" / "SCASB" / "REPNZ" / "REPNE" /
    "RDPMC" / "RDMSR" / "PUSHF" / "PUSHD" / "PUSHA" / "POPFW" / "POPFD" / "POPAW" / "POPAD" /
    "OUTSW" / "OUTSD" / "OUTSB" / "MOVZX" / "MOVSX" / "MOVSW" / "MOVSD" / "MOVSB" / "LOOPZ" /
    "LOOPE" / "LODSW" / "LODSD" / "LODSB" / "LEAVE" / "JECXZ" / "IRETW" / "IRETD" / "FYL2X" /
    "FUCOM" / "FSUBR" / "FSUBP" / "FSTSW" / "FSTCW" / "FSQRT" / "FSAVE" / "FPTAN" / "FPREM" /
    "FNENI" / "FMULP" / "FLDPI" / "FLDCW" / "FISUB" / "FISTP" / "FINIT" / "FIMUL" / "FIDIV" /
    "FICOM" / "FIADD" / "FFREE" / "FDIVR" / "FDIVP" / "FDISI" / "FCOMP" / "FCLEX" / "FBSTP" /
    "FADDP" / "F2XM1" / "ENTER" / "CPUID" / "CMPSW" / "CMPSD" / "CMPSB" / "BSWAP" / "BOUND" /
    "ALIGN" / "XCHG" / "XADD" / "WAIT" / "VERW" / "VERR" / "TEST" / "SMSW" / "SLDT" / "SIDT" /
    "SHRD" / "SHLD" / "SGDT" / "SETZ" / "SETS" / "SETP" / "SETO" / "SETL" / "SETG" / "SETE" /
    "SETC" / "SETB" / "SETA" / "SAHF" / "RETN" / "RETF" / "RESW" / "REST" / "RESQ" / "RESD" /
    "RESB" / "REPZ" / "REPE" / "PUSH" / "POPF" / "POPA" / "LOOP" / "LOCK" / "LMSW" / "LLDT" /
    "LIDT" / "LGDT" / "LAHF" / "JNLE" / "JNGE" / "JNBE" / "JNAE" / "JCXZ" / "IRET" / "INVD" /
    "INTO" / "INT3" / "INSW" / "INSD" / "INSB" / "INCO" / "IMUL" / "IDIV" / "FXCH" / "FXAM" /
    "FTST" / "FSUB" / "FSTP" / "FSIN" / "FNOP" / "FMUL" / "FLDZ" / "FLD1" / "FIST" / "FILD" /
    "FENI" / "FDIV" / "FCOS" / "FCOM" / "FCHS" / "FBLD" / "FADD" / "FABS" / "CWDE" / "CLTS" /
    "CALL" / "ARPL" / "XOR" / "UD2" / "SUB" / "STR" / "STI" / "STD" / "STC" / "SHR" / "SHL" /
    "SBB" / "SAR" / "SAL" / "RSM" / "ROR" / "ROL" / "RET" / "REP" / "RCR" / "RCL" / "POP" /
    "OUT" / "ORG" / "NOT" / "NOP" / "NEG" / "MUL" / "MOV" / "LTR" / "LSS" / "LSL" / "LGS" /
    "LFS" / "LES" / "LEA" / "LDS" / "LAR" / "JPO" / "JPE" / "JNZ" / "JNS" / "JNP" / "JNO" /
    "JNL" / "JNG" / "JNE" / "JNC" / "JNB" / "JNA" / "JMP" / "JLE" / "JGE" / "JBE" / "JAE" /
    "INT" / "INC" / "HLT" / "FST" / "FLD" / "END" / "DIV" / "DEC" / "DAS" / "DAA" / "CWD" /
    "CMP" / "CMC" / "CLI" / "CLD" / "CLC" / "CDQ" / "CBW" / "BTS" / "BTR" / "BTC" / "BSR" /
    "BSF" / "AND" / "ADD" / "ADC" / "AAS" / "AAM" / "AAD" / "AAA" / "OR" / "JZ" / "JS" / "JP" /
    "JO" / "JL" / "JG" / "JE" / "JC" / "JB" / "JA" / "IN" / "DW" / "DT" / "DQ" / "DD" / "DB" /
    "BT" ;

DataType = "BYTE" / "WORD" / "DWORD" ;

MemoryAddrExp <- WS d:DataType? WS '[' WS l:AddExp r:(':' AddExp)? ']' {
    var dt ast.DataType
    if dts, err := gats.ToString(d); err == nil {
        dt, _ = ast.NewDataType(dts)
    }
    left, ok := l.(*ast.AddExp)
    if !ok {
        return nil, parseError("memoryAddrExp left")
    }
    tuple := toAnySlice(r)
    if tuple == nil || tuple[1] == nil {
        return ast.NewMemoryAddrExp(ast.BaseExp{}, dt, left, nil), nil
    }
    right, ok := tuple[1].(*ast.AddExp)
    if !ok {
        return ast.NewMemoryAddrExp(ast.BaseExp{}, dt,left, nil), nil
    }

    return ast.NewMemoryAddrExp(ast.BaseExp{}, dt, left, right), nil
}

SegmentExp <- WS d:DataType? WS l:AddExp r:(':' AddExp)? {
    var dt ast.DataType
    if dts, err := gats.ToString(d); err == nil {
        dt, _ = ast.NewDataType(dts)
    }
    left, ok := l.(*ast.AddExp)
    if !ok {
        return nil, parseError("segmentExp left")
    }
    tuple := toAnySlice(r)
    if tuple == nil || tuple[1] == nil {
        return ast.NewSegmentExp(ast.BaseExp{}, dt, left, nil), nil
    }
    right, ok := tuple[1].(*ast.AddExp)
    if !ok {
        return ast.NewSegmentExp(ast.BaseExp{}, dt,left, nil), nil
    }

    return ast.NewSegmentExp(ast.BaseExp{}, dt, left, right), nil
}

AddExp <- head:MultExp tail:(('+' / '-') MultExp)* {
    mult, ok := head.(*ast.MultExp)
    if !ok {
        return nil, parseError("addExp head")
    }

    ops := make([]string, 0)
    exps := make([]*ast.MultExp, 0)

    for _, anySlice := range toAnySlice(tail) {
        tuple := toAnySlice(anySlice)
        if tuple == nil {
            return nil, parseError("addExp tail")
        }
        op, err := gats.ToString(tuple[0])
        if err != nil {
            return nil, failure.Wrap(err)
        }
        ops = append(ops, op)

        exp, ok := tuple[1].(*ast.MultExp)
        if !ok {
            return nil, parseError("addExp tail")
        }
        exps = append(exps, exp)
    }
    return ast.NewAddExp(ast.BaseExp{}, mult, ops, exps), nil
}

MultExp <- head:ImmExp tail:(('*' / '/' / '%') ImmExp)* {
    imm, ok := head.(*ast.ImmExp)
    if !ok {
        return nil, parseError("multExp head")
    }

    ops := make([]string, 0)
    exps := make([]*ast.ImmExp, 0)

    for _, anySlice := range toAnySlice(tail) {
        tuple := toAnySlice(anySlice)
        if tuple == nil {
            return nil, parseError("multExp tail")
        }
        op, err := gats.ToString(tuple[0])
        if err != nil {
            return nil, failure.Wrap(err)
        }
        ops = append(ops, op)

        exp, ok := tuple[1].(*ast.ImmExp)
        if !ok {
            return nil, parseError("multExp tail")
        }
        exps = append(exps, exp)
    }
    return ast.NewMultExp(ast.BaseExp{}, imm, ops, exps), nil
}

ImmExp <- f:Factor {
    factor, ok := f.(ast.Factor)
    if !ok {
        return nil, parseError("immExp")
    }
    return ast.NewImmExp(ast.BaseExp{}, factor), nil
}

Factor <- HexFactor /
    NumberFactor /
    IdentFactor /
    StringFactor /
    CharFactor

ReservedWord = "EQU" / "GLOBAL" / "EXTERN" / DataType ;

IdentFactor <- !ReservedWord [a-zA-Z$_.] ([a-zA-Z$_.0-9])* {
    return ast.NewIdentFactor(ast.BaseFactor{}, string(c.text)), nil
}

HexFactor <- '0' ('x' / 'X') ([0-9] / ["abcdef"] / ["ABCDEF"])+ {
    return ast.NewHexFactor(ast.BaseFactor{}, string(c.text)), nil
}

StringFactor <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
    text, err := strconv.Unquote(string(c.text))
    if err != nil {
        return nil, failure.Wrap(err)
    }
    return ast.NewStringFactor(ast.BaseFactor{}, text), nil
}

EscapedChar ← [\x00-\x1f"\\]
EscapeSequence ← SingleCharEscape / UnicodeEscape

CharFactor <- '\'' (NormalChar / SingleCharEscape)* '\'' {
    charSeq := string(c.text)
    return ast.NewCharFactor(ast.BaseFactor{}, charSeq[1 : len(charSeq) - 1]), nil
}
NormalChar <- [^'\\]  // シングルクォートとバックスラッシュ以外の任意の文字
SingleCharEscape <- '\\' [''\\/bfnrt']  // エスケープされた文字

NumberFactor <- '-'? [0-9]+ {
    val, err := strconv.Atoi(string(c.text))
    if err != nil {
        return nil, failure.Wrap(err)
    }
    return ast.NewNumberFactor(ast.BaseFactor{}, val), nil
}

Comment <- ('#' / ';') Char* END {
    return string(c.text), nil
}

Char <- [^\n\r]

_ <- ([ \n\t\r] / Comment)*
__ <- ([ \n\t\r] / Comment)+
WS <- [ \t]*
TrailingWsEOL <- [ \t]* EOL+

END <- EOL / EOF

EOL <- '\n' / '\r' / "\r\n"

EOF <- !.
