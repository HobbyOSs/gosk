// Code generated by pigeon; DO NOT EDIT.

package ng_operand // Changed package name

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/HobbyOSs/gosk/internal/ast" // ast パッケージをインポート
	"github.com/morikuni/failure"
	// cpu パッケージは不要
)

// --- Helper functions ---
func toInt(s string) int64 {
	// 10進数または16進数をパース
	if strings.HasPrefix(s, "0x") || strings.HasPrefix(s, "0X") {
		v, _ := strconv.ParseInt(s[2:], 16, 64)
		return v
	}
	// Handle character literal like 'A'
	if len(s) == 3 && s[0] == '\'' && s[2] == '\'' {
		return int64(s[1])
	}
	v, _ := strconv.ParseInt(s, 10, 64)
	return v
}

func isHex(s string) bool {
	return strings.HasPrefix(s, "0x") || strings.HasPrefix(s, "0X")
}

// getRegisterType と getImmediateSizeType は operand_types.go で定義想定
// ... 他のヘルパー関数 ...

var g = &grammar{
	rules: []*rule{
		{
			name: "OperandString",
			pos:  position{line: 39, col: 1, offset: 932},
			expr: &actionExpr{
				pos: position{line: 39, col: 18, offset: 949},
				run: (*parser).callonOperandString1,
				expr: &seqExpr{
					pos: position{line: 39, col: 18, offset: 949},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 39, col: 18, offset: 949},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 20, offset: 951},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 23, offset: 954},
								name: "Operand",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 31, offset: 962},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 33, offset: 964},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 53, col: 1, offset: 1594},
			expr: &choiceExpr{
				pos: position{line: 53, col: 12, offset: 1605},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 53, col: 12, offset: 1605},
						name: "MemoryAddress",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 28, offset: 1621},
						name: "SegmentedNonMemOperand",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 53, offset: 1646},
						name: "Register",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 64, offset: 1657},
						name: "Immediate",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 76, offset: 1669},
						name: "JumpLabel",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 88, offset: 1681},
						name: "Label",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 96, offset: 1689},
						name: "SegmentRegister",
					},
				},
			},
		},
		{
			name: "MemoryAddress",
			pos:  position{line: 58, col: 1, offset: 1845},
			expr: &actionExpr{
				pos: position{line: 58, col: 18, offset: 1862},
				run: (*parser).callonMemoryAddress1,
				expr: &seqExpr{
					pos: position{line: 58, col: 18, offset: 1862},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 58, col: 18, offset: 1862},
							label: "ptrQualifier",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 31, offset: 1875},
								expr: &seqExpr{
									pos: position{line: 58, col: 32, offset: 1876},
									exprs: []any{
										&zeroOrOneExpr{
											pos: position{line: 58, col: 32, offset: 1876},
											expr: &seqExpr{
												pos: position{line: 58, col: 33, offset: 1877},
												exprs: []any{
													&litMatcher{
														pos:        position{line: 58, col: 33, offset: 1877},
														val:        "FAR",
														ignoreCase: false,
														want:       "\"FAR\"",
													},
													&ruleRefExpr{
														pos:  position{line: 58, col: 39, offset: 1883},
														name: "_",
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 58, col: 43, offset: 1887},
											val:        "PTR",
											ignoreCase: false,
											want:       "\"PTR\"",
										},
										&ruleRefExpr{
											pos:  position{line: 58, col: 49, offset: 1893},
											name: "_",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 53, offset: 1897},
							label: "dt",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 56, offset: 1900},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 56, offset: 1900},
									name: "DataType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 66, offset: 1910},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 68, offset: 1912},
							label: "jt",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 71, offset: 1915},
								expr: &ruleRefExpr{
									pos:  position{line: 58, col: 71, offset: 1915},
									name: "JumpType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 81, offset: 1925},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 83, offset: 1927},
							label: "seg",
							expr: &zeroOrOneExpr{
								pos: position{line: 58, col: 87, offset: 1931},
								expr: &seqExpr{
									pos: position{line: 58, col: 88, offset: 1932},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 58, col: 88, offset: 1932},
											name: "SegmentRegisterName",
										},
										&ruleRefExpr{
											pos:  position{line: 58, col: 108, offset: 1952},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 58, col: 110, offset: 1954},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
										&ruleRefExpr{
											pos:  position{line: 58, col: 114, offset: 1958},
											name: "_",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 58, col: 118, offset: 1962},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 122, offset: 1966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 124, offset: 1968},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 129, offset: 1973},
								name: "MemoryBody",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 140, offset: 1984},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 58, col: 142, offset: 1986},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SegmentedNonMemOperand",
			pos:  position{line: 124, col: 1, offset: 4330},
			expr: &actionExpr{
				pos: position{line: 124, col: 27, offset: 4356},
				run: (*parser).callonSegmentedNonMemOperand1,
				expr: &seqExpr{
					pos: position{line: 124, col: 27, offset: 4356},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 124, col: 27, offset: 4356},
							label: "seg",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 31, offset: 4360},
								name: "SegmentRegisterName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 51, offset: 4380},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 124, col: 53, offset: 4382},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 124, col: 57, offset: 4386},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 59, offset: 4388},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 124, col: 63, offset: 4392},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 124, col: 63, offset: 4392},
										name: "Register",
									},
									&ruleRefExpr{
										pos:  position{line: 124, col: 74, offset: 4403},
										name: "Label",
									},
									&ruleRefExpr{
										pos:  position{line: 124, col: 82, offset: 4411},
										name: "Immediate",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MemoryBody",
			pos:  position{line: 133, col: 1, offset: 4792},
			expr: &choiceExpr{
				pos: position{line: 133, col: 15, offset: 4806},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 133, col: 15, offset: 4806},
						name: "BaseIndexScaleDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 36, offset: 4827},
						name: "BaseIndexDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 52, offset: 4843},
						name: "BaseScaleDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 68, offset: 4859},
						name: "IndexScaleDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 85, offset: 4876},
						name: "BaseDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 96, offset: 4887},
						name: "IndexDisp",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 108, offset: 4899},
						name: "BaseIndex",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 120, offset: 4911},
						name: "BaseOnly",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 131, offset: 4922},
						name: "IndexOnly",
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 143, offset: 4934},
						name: "DispOnly",
					},
				},
			},
		},
		{
			name: "BaseIndexScaleDisp",
			pos:  position{line: 136, col: 1, offset: 5023},
			expr: &actionExpr{
				pos: position{line: 136, col: 23, offset: 5045},
				run: (*parser).callonBaseIndexScaleDisp1,
				expr: &seqExpr{
					pos: position{line: 136, col: 23, offset: 5045},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 136, col: 23, offset: 5045},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 28, offset: 5050},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 41, offset: 5063},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 45, offset: 5067},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 51, offset: 5073},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 57, offset: 5079},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 70, offset: 5092},
							label: "scale",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 76, offset: 5098},
								name: "Scale",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 82, offset: 5104},
							label: "op2",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 86, offset: 5108},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 92, offset: 5114},
							label: "disp",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 97, offset: 5119},
								name: "ImmediateValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseIndexDisp",
			pos:  position{line: 147, col: 1, offset: 5663},
			expr: &actionExpr{
				pos: position{line: 147, col: 18, offset: 5680},
				run: (*parser).callonBaseIndexDisp1,
				expr: &seqExpr{
					pos: position{line: 147, col: 18, offset: 5680},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 147, col: 18, offset: 5680},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 23, offset: 5685},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 36, offset: 5698},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 40, offset: 5702},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 46, offset: 5708},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 52, offset: 5714},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 65, offset: 5727},
							label: "op2",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 69, offset: 5731},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 147, col: 75, offset: 5737},
							label: "disp",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 80, offset: 5742},
								name: "ImmediateValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseScaleDisp",
			pos:  position{line: 157, col: 1, offset: 6223},
			expr: &actionExpr{
				pos: position{line: 157, col: 18, offset: 6240},
				run: (*parser).callonBaseScaleDisp1,
				expr: &seqExpr{
					pos: position{line: 157, col: 18, offset: 6240},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 157, col: 18, offset: 6240},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 23, offset: 6245},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 36, offset: 6258},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 6262},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 46, offset: 6268},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 52, offset: 6274},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 65, offset: 6287},
							label: "scale",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 71, offset: 6293},
								name: "Scale",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexScaleDisp",
			pos:  position{line: 164, col: 1, offset: 6607},
			expr: &actionExpr{
				pos: position{line: 164, col: 19, offset: 6625},
				run: (*parser).callonIndexScaleDisp1,
				expr: &seqExpr{
					pos: position{line: 164, col: 19, offset: 6625},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 164, col: 19, offset: 6625},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 25, offset: 6631},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 38, offset: 6644},
							label: "scale",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 44, offset: 6650},
								name: "Scale",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 50, offset: 6656},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 54, offset: 6660},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 60, offset: 6666},
							label: "disp",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 65, offset: 6671},
								name: "ImmediateValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseDisp",
			pos:  position{line: 173, col: 1, offset: 7094},
			expr: &actionExpr{
				pos: position{line: 173, col: 13, offset: 7106},
				run: (*parser).callonBaseDisp1,
				expr: &seqExpr{
					pos: position{line: 173, col: 13, offset: 7106},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 173, col: 13, offset: 7106},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 18, offset: 7111},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 173, col: 31, offset: 7124},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 7128},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 173, col: 41, offset: 7134},
							label: "disp",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 46, offset: 7139},
								name: "ImmediateValue",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexDisp",
			pos:  position{line: 181, col: 1, offset: 7485},
			expr: &actionExpr{
				pos: position{line: 181, col: 14, offset: 7498},
				run: (*parser).callonIndexDisp1,
				expr: &seqExpr{
					pos: position{line: 181, col: 14, offset: 7498},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 181, col: 14, offset: 7498},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 20, offset: 7504},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 33, offset: 7517},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 37, offset: 7521},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 43, offset: 7527},
							label: "disp",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 48, offset: 7532},
								name: "ImmediateValue",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseIndex",
			pos:  position{line: 189, col: 1, offset: 7938},
			expr: &actionExpr{
				pos: position{line: 189, col: 14, offset: 7951},
				run: (*parser).callonBaseIndex1,
				expr: &seqExpr{
					pos: position{line: 189, col: 14, offset: 7951},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 189, col: 14, offset: 7951},
							label: "base",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 19, offset: 7956},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 32, offset: 7969},
							label: "op1",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 36, offset: 7973},
								name: "AddOp",
							},
						},
						&labeledExpr{
							pos:   position{line: 189, col: 42, offset: 7979},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 48, offset: 7985},
								name: "RegisterName",
							},
						},
					},
				},
			},
		},
		{
			name: "BaseOnly",
			pos:  position{line: 195, col: 1, offset: 8195},
			expr: &actionExpr{
				pos: position{line: 195, col: 13, offset: 8207},
				run: (*parser).callonBaseOnly1,
				expr: &labeledExpr{
					pos:   position{line: 195, col: 13, offset: 8207},
					label: "base",
					expr: &ruleRefExpr{
						pos:  position{line: 195, col: 18, offset: 8212},
						name: "RegisterName",
					},
				},
			},
		},
		{
			name: "IndexOnly",
			pos:  position{line: 199, col: 1, offset: 8311},
			expr: &actionExpr{
				pos: position{line: 199, col: 14, offset: 8324},
				run: (*parser).callonIndexOnly1,
				expr: &seqExpr{
					pos: position{line: 199, col: 14, offset: 8324},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 199, col: 14, offset: 8324},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 20, offset: 8330},
								name: "RegisterName",
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 33, offset: 8343},
							label: "scale",
							expr: &zeroOrOneExpr{
								pos: position{line: 199, col: 39, offset: 8349},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 39, offset: 8349},
									name: "Scale",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DispOnly",
			pos:  position{line: 209, col: 1, offset: 8663},
			expr: &actionExpr{
				pos: position{line: 209, col: 13, offset: 8675},
				run: (*parser).callonDispOnly1,
				expr: &labeledExpr{
					pos:   position{line: 209, col: 13, offset: 8675},
					label: "disp",
					expr: &ruleRefExpr{
						pos:  position{line: 209, col: 18, offset: 8680},
						name: "ImmediateValue",
					},
				},
			},
		},
		{
			name: "Scale",
			pos:  position{line: 217, col: 1, offset: 8878},
			expr: &actionExpr{
				pos: position{line: 217, col: 10, offset: 8887},
				run: (*parser).callonScale1,
				expr: &seqExpr{
					pos: position{line: 217, col: 10, offset: 8887},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 217, col: 10, offset: 8887},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 217, col: 12, offset: 8889},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&ruleRefExpr{
							pos:  position{line: 217, col: 16, offset: 8893},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 18, offset: 8895},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 217, col: 21, offset: 8898},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 217, col: 21, offset: 8898},
										val:        "1",
										ignoreCase: false,
										want:       "\"1\"",
									},
									&litMatcher{
										pos:        position{line: 217, col: 27, offset: 8904},
										val:        "2",
										ignoreCase: false,
										want:       "\"2\"",
									},
									&litMatcher{
										pos:        position{line: 217, col: 33, offset: 8910},
										val:        "4",
										ignoreCase: false,
										want:       "\"4\"",
									},
									&litMatcher{
										pos:        position{line: 217, col: 39, offset: 8916},
										val:        "8",
										ignoreCase: false,
										want:       "\"8\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AddOp",
			pos:  position{line: 218, col: 1, offset: 8939},
			expr: &actionExpr{
				pos: position{line: 218, col: 10, offset: 8948},
				run: (*parser).callonAddOp1,
				expr: &seqExpr{
					pos: position{line: 218, col: 10, offset: 8948},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 218, col: 10, offset: 8948},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 12, offset: 8950},
							label: "op",
							expr: &choiceExpr{
								pos: position{line: 218, col: 16, offset: 8954},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 218, col: 16, offset: 8954},
										val:        "+",
										ignoreCase: false,
										want:       "\"+\"",
									},
									&litMatcher{
										pos:        position{line: 218, col: 22, offset: 8960},
										val:        "-",
										ignoreCase: false,
										want:       "\"-\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 27, offset: 8965},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ImmediateValue",
			pos:  position{line: 219, col: 1, offset: 8986},
			expr: &actionExpr{
				pos: position{line: 219, col: 19, offset: 9004},
				run: (*parser).callonImmediateValue1,
				expr: &labeledExpr{
					pos:   position{line: 219, col: 19, offset: 9004},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 219, col: 24, offset: 9009},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 219, col: 24, offset: 9009},
								name: "HexFactor",
							},
							&ruleRefExpr{
								pos:  position{line: 219, col: 36, offset: 9021},
								name: "NumberFactor",
							},
							&ruleRefExpr{
								pos:  position{line: 219, col: 51, offset: 9036},
								name: "CharFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "Register",
			pos:  position{line: 223, col: 1, offset: 9255},
			expr: &actionExpr{
				pos: position{line: 223, col: 13, offset: 9267},
				run: (*parser).callonRegister1,
				expr: &labeledExpr{
					pos:   position{line: 223, col: 13, offset: 9267},
					label: "r",
					expr: &ruleRefExpr{
						pos:  position{line: 223, col: 15, offset: 9269},
						name: "RegisterName",
					},
				},
			},
		},
		{
			name: "RegisterName",
			pos:  position{line: 230, col: 1, offset: 9660},
			expr: &choiceExpr{
				pos: position{line: 230, col: 17, offset: 9676},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 230, col: 17, offset: 9676},
						name: "GeneralReg",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 30, offset: 9689},
						name: "SegmentRegisterName",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 52, offset: 9711},
						name: "MMXReg",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 61, offset: 9720},
						name: "XMMReg",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 70, offset: 9729},
						name: "YMMReg",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 79, offset: 9738},
						name: "ControlReg",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 92, offset: 9751},
						name: "DebugReg",
					},
					&actionExpr{
						pos: position{line: 230, col: 103, offset: 9762},
						run: (*parser).callonRegisterName9,
						expr: &ruleRefExpr{
							pos:  position{line: 230, col: 103, offset: 9762},
							name: "TestReg",
						},
					},
				},
			},
		},
		{
			name: "GeneralReg",
			pos:  position{line: 233, col: 1, offset: 9820},
			expr: &choiceExpr{
				pos: position{line: 233, col: 14, offset: 9833},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 233, col: 14, offset: 9833},
						val:        "RAX",
						ignoreCase: false,
						want:       "\"RAX\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 22, offset: 9841},
						val:        "RBX",
						ignoreCase: false,
						want:       "\"RBX\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 30, offset: 9849},
						val:        "RCX",
						ignoreCase: false,
						want:       "\"RCX\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 38, offset: 9857},
						val:        "RDX",
						ignoreCase: false,
						want:       "\"RDX\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 46, offset: 9865},
						val:        "RSI",
						ignoreCase: false,
						want:       "\"RSI\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 54, offset: 9873},
						val:        "RDI",
						ignoreCase: false,
						want:       "\"RDI\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 62, offset: 9881},
						val:        "RSP",
						ignoreCase: false,
						want:       "\"RSP\"",
					},
					&litMatcher{
						pos:        position{line: 233, col: 70, offset: 9889},
						val:        "RBP",
						ignoreCase: false,
						want:       "\"RBP\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 14, offset: 9910},
						val:        "R8",
						ignoreCase: false,
						want:       "\"R8\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 21, offset: 9917},
						val:        "R9",
						ignoreCase: false,
						want:       "\"R9\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 28, offset: 9924},
						val:        "R10",
						ignoreCase: false,
						want:       "\"R10\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 36, offset: 9932},
						val:        "R11",
						ignoreCase: false,
						want:       "\"R11\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 44, offset: 9940},
						val:        "R12",
						ignoreCase: false,
						want:       "\"R12\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 52, offset: 9948},
						val:        "R13",
						ignoreCase: false,
						want:       "\"R13\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 60, offset: 9956},
						val:        "R14",
						ignoreCase: false,
						want:       "\"R14\"",
					},
					&litMatcher{
						pos:        position{line: 234, col: 68, offset: 9964},
						val:        "R15",
						ignoreCase: false,
						want:       "\"R15\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 14, offset: 10020},
						val:        "EAX",
						ignoreCase: false,
						want:       "\"EAX\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 22, offset: 10028},
						val:        "EBX",
						ignoreCase: false,
						want:       "\"EBX\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 30, offset: 10036},
						val:        "ECX",
						ignoreCase: false,
						want:       "\"ECX\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 38, offset: 10044},
						val:        "EDX",
						ignoreCase: false,
						want:       "\"EDX\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 46, offset: 10052},
						val:        "ESI",
						ignoreCase: false,
						want:       "\"ESI\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 54, offset: 10060},
						val:        "EDI",
						ignoreCase: false,
						want:       "\"EDI\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 62, offset: 10068},
						val:        "ESP",
						ignoreCase: false,
						want:       "\"ESP\"",
					},
					&litMatcher{
						pos:        position{line: 235, col: 70, offset: 10076},
						val:        "EBP",
						ignoreCase: false,
						want:       "\"EBP\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 14, offset: 10097},
						val:        "AX",
						ignoreCase: false,
						want:       "\"AX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 21, offset: 10104},
						val:        "BX",
						ignoreCase: false,
						want:       "\"BX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 28, offset: 10111},
						val:        "CX",
						ignoreCase: false,
						want:       "\"CX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 35, offset: 10118},
						val:        "DX",
						ignoreCase: false,
						want:       "\"DX\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 42, offset: 10125},
						val:        "SI",
						ignoreCase: false,
						want:       "\"SI\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 49, offset: 10132},
						val:        "DI",
						ignoreCase: false,
						want:       "\"DI\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 56, offset: 10139},
						val:        "SP",
						ignoreCase: false,
						want:       "\"SP\"",
					},
					&litMatcher{
						pos:        position{line: 236, col: 63, offset: 10146},
						val:        "BP",
						ignoreCase: false,
						want:       "\"BP\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 14, offset: 10166},
						val:        "AL",
						ignoreCase: false,
						want:       "\"AL\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 21, offset: 10173},
						val:        "BL",
						ignoreCase: false,
						want:       "\"BL\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 28, offset: 10180},
						val:        "CL",
						ignoreCase: false,
						want:       "\"CL\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 35, offset: 10187},
						val:        "DL",
						ignoreCase: false,
						want:       "\"DL\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 42, offset: 10194},
						val:        "AH",
						ignoreCase: false,
						want:       "\"AH\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 49, offset: 10201},
						val:        "BH",
						ignoreCase: false,
						want:       "\"BH\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 56, offset: 10208},
						val:        "CH",
						ignoreCase: false,
						want:       "\"CH\"",
					},
					&litMatcher{
						pos:        position{line: 237, col: 63, offset: 10215},
						val:        "DH",
						ignoreCase: false,
						want:       "\"DH\"",
					},
				},
			},
		},
		{
			name: "SegmentRegisterName",
			pos:  position{line: 238, col: 1, offset: 10220},
			expr: &choiceExpr{
				pos: position{line: 238, col: 23, offset: 10242},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 238, col: 23, offset: 10242},
						val:        "CS",
						ignoreCase: false,
						want:       "\"CS\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 30, offset: 10249},
						val:        "DS",
						ignoreCase: false,
						want:       "\"DS\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 37, offset: 10256},
						val:        "ES",
						ignoreCase: false,
						want:       "\"ES\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 44, offset: 10263},
						val:        "FS",
						ignoreCase: false,
						want:       "\"FS\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 51, offset: 10270},
						val:        "GS",
						ignoreCase: false,
						want:       "\"GS\"",
					},
					&litMatcher{
						pos:        position{line: 238, col: 58, offset: 10277},
						val:        "SS",
						ignoreCase: false,
						want:       "\"SS\"",
					},
				},
			},
		},
		{
			name: "MMXReg",
			pos:  position{line: 239, col: 1, offset: 10311},
			expr: &choiceExpr{
				pos: position{line: 239, col: 10, offset: 10320},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 239, col: 10, offset: 10320},
						val:        "MM0",
						ignoreCase: false,
						want:       "\"MM0\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 18, offset: 10328},
						val:        "MM1",
						ignoreCase: false,
						want:       "\"MM1\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 26, offset: 10336},
						val:        "MM2",
						ignoreCase: false,
						want:       "\"MM2\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 34, offset: 10344},
						val:        "MM3",
						ignoreCase: false,
						want:       "\"MM3\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 42, offset: 10352},
						val:        "MM4",
						ignoreCase: false,
						want:       "\"MM4\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 50, offset: 10360},
						val:        "MM5",
						ignoreCase: false,
						want:       "\"MM5\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 58, offset: 10368},
						val:        "MM6",
						ignoreCase: false,
						want:       "\"MM6\"",
					},
					&litMatcher{
						pos:        position{line: 239, col: 66, offset: 10376},
						val:        "MM7",
						ignoreCase: false,
						want:       "\"MM7\"",
					},
				},
			},
		},
		{
			name: "XMMReg",
			pos:  position{line: 240, col: 1, offset: 10382},
			expr: &choiceExpr{
				pos: position{line: 240, col: 10, offset: 10391},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 240, col: 10, offset: 10391},
						val:        "XMM0",
						ignoreCase: false,
						want:       "\"XMM0\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 19, offset: 10400},
						val:        "XMM1",
						ignoreCase: false,
						want:       "\"XMM1\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 28, offset: 10409},
						val:        "XMM2",
						ignoreCase: false,
						want:       "\"XMM2\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 37, offset: 10418},
						val:        "XMM3",
						ignoreCase: false,
						want:       "\"XMM3\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 46, offset: 10427},
						val:        "XMM4",
						ignoreCase: false,
						want:       "\"XMM4\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 55, offset: 10436},
						val:        "XMM5",
						ignoreCase: false,
						want:       "\"XMM5\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 64, offset: 10445},
						val:        "XMM6",
						ignoreCase: false,
						want:       "\"XMM6\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 73, offset: 10454},
						val:        "XMM7",
						ignoreCase: false,
						want:       "\"XMM7\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 82, offset: 10463},
						val:        "XMM8",
						ignoreCase: false,
						want:       "\"XMM8\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 91, offset: 10472},
						val:        "XMM9",
						ignoreCase: false,
						want:       "\"XMM9\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 100, offset: 10481},
						val:        "XMM10",
						ignoreCase: false,
						want:       "\"XMM10\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 110, offset: 10491},
						val:        "XMM11",
						ignoreCase: false,
						want:       "\"XMM11\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 120, offset: 10501},
						val:        "XMM12",
						ignoreCase: false,
						want:       "\"XMM12\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 130, offset: 10511},
						val:        "XMM13",
						ignoreCase: false,
						want:       "\"XMM13\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 140, offset: 10521},
						val:        "XMM14",
						ignoreCase: false,
						want:       "\"XMM14\"",
					},
					&litMatcher{
						pos:        position{line: 240, col: 150, offset: 10531},
						val:        "XMM15",
						ignoreCase: false,
						want:       "\"XMM15\"",
					},
				},
			},
		},
		{
			name: "YMMReg",
			pos:  position{line: 241, col: 1, offset: 10539},
			expr: &choiceExpr{
				pos: position{line: 241, col: 10, offset: 10548},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 241, col: 10, offset: 10548},
						val:        "YMM0",
						ignoreCase: false,
						want:       "\"YMM0\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 19, offset: 10557},
						val:        "YMM1",
						ignoreCase: false,
						want:       "\"YMM1\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 28, offset: 10566},
						val:        "YMM2",
						ignoreCase: false,
						want:       "\"YMM2\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 37, offset: 10575},
						val:        "YMM3",
						ignoreCase: false,
						want:       "\"YMM3\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 46, offset: 10584},
						val:        "YMM4",
						ignoreCase: false,
						want:       "\"YMM4\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 55, offset: 10593},
						val:        "YMM5",
						ignoreCase: false,
						want:       "\"YMM5\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 64, offset: 10602},
						val:        "YMM6",
						ignoreCase: false,
						want:       "\"YMM6\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 73, offset: 10611},
						val:        "YMM7",
						ignoreCase: false,
						want:       "\"YMM7\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 82, offset: 10620},
						val:        "YMM8",
						ignoreCase: false,
						want:       "\"YMM8\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 91, offset: 10629},
						val:        "YMM9",
						ignoreCase: false,
						want:       "\"YMM9\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 100, offset: 10638},
						val:        "YMM10",
						ignoreCase: false,
						want:       "\"YMM10\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 110, offset: 10648},
						val:        "YMM11",
						ignoreCase: false,
						want:       "\"YMM11\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 120, offset: 10658},
						val:        "YMM12",
						ignoreCase: false,
						want:       "\"YMM12\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 130, offset: 10668},
						val:        "YMM13",
						ignoreCase: false,
						want:       "\"YMM13\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 140, offset: 10678},
						val:        "YMM14",
						ignoreCase: false,
						want:       "\"YMM14\"",
					},
					&litMatcher{
						pos:        position{line: 241, col: 150, offset: 10688},
						val:        "YMM15",
						ignoreCase: false,
						want:       "\"YMM15\"",
					},
				},
			},
		},
		{
			name: "ControlReg",
			pos:  position{line: 242, col: 1, offset: 10696},
			expr: &choiceExpr{
				pos: position{line: 242, col: 14, offset: 10709},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 242, col: 14, offset: 10709},
						val:        "CR0",
						ignoreCase: false,
						want:       "\"CR0\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 22, offset: 10717},
						val:        "CR1",
						ignoreCase: false,
						want:       "\"CR1\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 30, offset: 10725},
						val:        "CR2",
						ignoreCase: false,
						want:       "\"CR2\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 38, offset: 10733},
						val:        "CR3",
						ignoreCase: false,
						want:       "\"CR3\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 46, offset: 10741},
						val:        "CR4",
						ignoreCase: false,
						want:       "\"CR4\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 54, offset: 10749},
						val:        "CR5",
						ignoreCase: false,
						want:       "\"CR5\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 62, offset: 10757},
						val:        "CR6",
						ignoreCase: false,
						want:       "\"CR6\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 70, offset: 10765},
						val:        "CR7",
						ignoreCase: false,
						want:       "\"CR7\"",
					},
					&litMatcher{
						pos:        position{line: 242, col: 78, offset: 10773},
						val:        "CR8",
						ignoreCase: false,
						want:       "\"CR8\"",
					},
				},
			},
		},
		{
			name: "DebugReg",
			pos:  position{line: 243, col: 1, offset: 10779},
			expr: &choiceExpr{
				pos: position{line: 243, col: 12, offset: 10790},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 243, col: 12, offset: 10790},
						val:        "DR0",
						ignoreCase: false,
						want:       "\"DR0\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 20, offset: 10798},
						val:        "DR1",
						ignoreCase: false,
						want:       "\"DR1\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 28, offset: 10806},
						val:        "DR2",
						ignoreCase: false,
						want:       "\"DR2\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 36, offset: 10814},
						val:        "DR3",
						ignoreCase: false,
						want:       "\"DR3\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 44, offset: 10822},
						val:        "DR4",
						ignoreCase: false,
						want:       "\"DR4\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 52, offset: 10830},
						val:        "DR5",
						ignoreCase: false,
						want:       "\"DR5\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 60, offset: 10838},
						val:        "DR6",
						ignoreCase: false,
						want:       "\"DR6\"",
					},
					&litMatcher{
						pos:        position{line: 243, col: 68, offset: 10846},
						val:        "DR7",
						ignoreCase: false,
						want:       "\"DR7\"",
					},
				},
			},
		},
		{
			name: "TestReg",
			pos:  position{line: 244, col: 1, offset: 10852},
			expr: &choiceExpr{
				pos: position{line: 244, col: 11, offset: 10862},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 244, col: 11, offset: 10862},
						val:        "TR0",
						ignoreCase: false,
						want:       "\"TR0\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 19, offset: 10870},
						val:        "TR1",
						ignoreCase: false,
						want:       "\"TR1\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 27, offset: 10878},
						val:        "TR2",
						ignoreCase: false,
						want:       "\"TR2\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 35, offset: 10886},
						val:        "TR3",
						ignoreCase: false,
						want:       "\"TR3\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 43, offset: 10894},
						val:        "TR4",
						ignoreCase: false,
						want:       "\"TR4\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 51, offset: 10902},
						val:        "TR5",
						ignoreCase: false,
						want:       "\"TR5\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 59, offset: 10910},
						val:        "TR6",
						ignoreCase: false,
						want:       "\"TR6\"",
					},
					&litMatcher{
						pos:        position{line: 244, col: 67, offset: 10918},
						val:        "TR7",
						ignoreCase: false,
						want:       "\"TR7\"",
					},
				},
			},
		},
		{
			name: "Immediate",
			pos:  position{line: 248, col: 1, offset: 10947},
			expr: &actionExpr{
				pos: position{line: 248, col: 14, offset: 10960},
				run: (*parser).callonImmediate1,
				expr: &labeledExpr{
					pos:   position{line: 248, col: 14, offset: 10960},
					label: "val",
					expr: &choiceExpr{
						pos: position{line: 248, col: 19, offset: 10965},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 248, col: 19, offset: 10965},
								name: "HexFactor",
							},
							&ruleRefExpr{
								pos:  position{line: 248, col: 31, offset: 10977},
								name: "NumberFactor",
							},
							&ruleRefExpr{
								pos:  position{line: 248, col: 46, offset: 10992},
								name: "CharFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "HexFactor",
			pos:  position{line: 257, col: 1, offset: 11403},
			expr: &actionExpr{
				pos: position{line: 257, col: 14, offset: 11416},
				run: (*parser).callonHexFactor1,
				expr: &seqExpr{
					pos: position{line: 257, col: 14, offset: 11416},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 257, col: 14, offset: 11416},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&choiceExpr{
							pos: position{line: 257, col: 19, offset: 11421},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 257, col: 19, offset: 11421},
									val:        "x",
									ignoreCase: false,
									want:       "\"x\"",
								},
								&litMatcher{
									pos:        position{line: 257, col: 25, offset: 11427},
									val:        "X",
									ignoreCase: false,
									want:       "\"X\"",
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 257, col: 30, offset: 11432},
							expr: &charClassMatcher{
								pos:        position{line: 257, col: 30, offset: 11432},
								val:        "[0-9a-fA-F]",
								ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NumberFactor",
			pos:  position{line: 258, col: 1, offset: 11468},
			expr: &actionExpr{
				pos: position{line: 258, col: 17, offset: 11484},
				run: (*parser).callonNumberFactor1,
				expr: &seqExpr{
					pos: position{line: 258, col: 17, offset: 11484},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 258, col: 17, offset: 11484},
							expr: &litMatcher{
								pos:        position{line: 258, col: 17, offset: 11484},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 258, col: 22, offset: 11489},
							expr: &charClassMatcher{
								pos:        position{line: 258, col: 22, offset: 11489},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "CharFactor",
			pos:  position{line: 259, col: 1, offset: 11519},
			expr: &actionExpr{
				pos: position{line: 259, col: 15, offset: 11533},
				run: (*parser).callonCharFactor1,
				expr: &seqExpr{
					pos: position{line: 259, col: 15, offset: 11533},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 259, col: 15, offset: 11533},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 20, offset: 11538},
							label: "charVal",
							expr: &charClassMatcher{
								pos:        position{line: 259, col: 28, offset: 11546},
								val:        "[^']",
								chars:      []rune{'\''},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 33, offset: 11551},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "JumpLabel",
			pos:  position{line: 262, col: 1, offset: 11637},
			expr: &actionExpr{
				pos: position{line: 262, col: 14, offset: 11650},
				run: (*parser).callonJumpLabel1,
				expr: &seqExpr{
					pos: position{line: 262, col: 14, offset: 11650},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 262, col: 14, offset: 11650},
							label: "jt",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 17, offset: 11653},
								name: "JumpType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 26, offset: 11662},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 262, col: 28, offset: 11664},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 30, offset: 11666},
								name: "IdentFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "Label",
			pos:  position{line: 276, col: 1, offset: 12125},
			expr: &actionExpr{
				pos: position{line: 276, col: 10, offset: 12134},
				run: (*parser).callonLabel1,
				expr: &labeledExpr{
					pos:   position{line: 276, col: 10, offset: 12134},
					label: "l",
					expr: &ruleRefExpr{
						pos:  position{line: 276, col: 12, offset: 12136},
						name: "IdentFactor",
					},
				},
			},
		},
		{
			name: "IdentFactor",
			pos:  position{line: 283, col: 1, offset: 12488},
			expr: &actionExpr{
				pos: position{line: 283, col: 16, offset: 12503},
				run: (*parser).callonIdentFactor1,
				expr: &seqExpr{
					pos: position{line: 283, col: 16, offset: 12503},
					exprs: []any{
						&notExpr{
							pos: position{line: 283, col: 16, offset: 12503},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 17, offset: 12504},
								name: "ReservedWord",
							},
						},
						&notExpr{
							pos: position{line: 283, col: 30, offset: 12517},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 31, offset: 12518},
								name: "RegisterName",
							},
						},
						&charClassMatcher{
							pos:        position{line: 283, col: 44, offset: 12531},
							val:        "[a-zA-Z$_.]",
							chars:      []rune{'$', '_', '.'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 56, offset: 12543},
							expr: &charClassMatcher{
								pos:        position{line: 283, col: 56, offset: 12543},
								val:        "[a-zA-Z$_.0-9]",
								chars:      []rune{'$', '_', '.'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SegmentRegister",
			pos:  position{line: 286, col: 1, offset: 12684},
			expr: &actionExpr{
				pos: position{line: 286, col: 20, offset: 12703},
				run: (*parser).callonSegmentRegister1,
				expr: &labeledExpr{
					pos:   position{line: 286, col: 20, offset: 12703},
					label: "r",
					expr: &ruleRefExpr{
						pos:  position{line: 286, col: 22, offset: 12705},
						name: "SegmentRegisterName",
					},
				},
			},
		},
		{
			name: "DataType",
			pos:  position{line: 292, col: 1, offset: 12910},
			expr: &choiceExpr{
				pos: position{line: 292, col: 12, offset: 12921},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 292, col: 12, offset: 12921},
						val:        "BYTE",
						ignoreCase: false,
						want:       "\"BYTE\"",
					},
					&litMatcher{
						pos:        position{line: 292, col: 21, offset: 12930},
						val:        "WORD",
						ignoreCase: false,
						want:       "\"WORD\"",
					},
					&actionExpr{
						pos: position{line: 292, col: 30, offset: 12939},
						run: (*parser).callonDataType4,
						expr: &litMatcher{
							pos:        position{line: 292, col: 30, offset: 12939},
							val:        "DWORD",
							ignoreCase: false,
							want:       "\"DWORD\"",
						},
					},
				},
			},
		},
		{
			name: "JumpType",
			pos:  position{line: 293, col: 1, offset: 12998},
			expr: &choiceExpr{
				pos: position{line: 293, col: 12, offset: 13009},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 293, col: 12, offset: 13009},
						val:        "SHORT",
						ignoreCase: false,
						want:       "\"SHORT\"",
					},
					&litMatcher{
						pos:        position{line: 293, col: 22, offset: 13019},
						val:        "NEAR",
						ignoreCase: false,
						want:       "\"NEAR\"",
					},
					&actionExpr{
						pos: position{line: 293, col: 31, offset: 13028},
						run: (*parser).callonJumpType4,
						expr: &litMatcher{
							pos:        position{line: 293, col: 31, offset: 13028},
							val:        "FAR",
							ignoreCase: false,
							want:       "\"FAR\"",
						},
					},
				},
			},
		},
		{
			name: "ReservedWord",
			pos:  position{line: 294, col: 1, offset: 13057},
			expr: &choiceExpr{
				pos: position{line: 294, col: 16, offset: 13072},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 294, col: 16, offset: 13072},
						name: "DataType",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 27, offset: 13083},
						name: "JumpType",
					},
					&litMatcher{
						pos:        position{line: 294, col: 38, offset: 13094},
						val:        "PTR",
						ignoreCase: false,
						want:       "\"PTR\"",
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 297, col: 1, offset: 13167},
			expr: &zeroOrMoreExpr{
				pos: position{line: 297, col: 6, offset: 13172},
				expr: &charClassMatcher{
					pos:        position{line: 297, col: 6, offset: 13172},
					val:        "[ \\t\\n\\r]",
					chars:      []rune{' ', '\t', '\n', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 298, col: 1, offset: 13183},
			expr: &notExpr{
				pos: position{line: 298, col: 8, offset: 13190},
				expr: &anyMatcher{
					line: 298, col: 9, offset: 13191,
				},
			},
		},
	},
}

func (c *current) onOperandString1(op any) (any, error) {
	// パース結果を ParsedOperandPeg に設定
	// Handle potential nil return from Operand rules if parsing fails internally
	if op == nil {
		// This case might indicate an issue in sub-rules not returning errors correctly.
		// Return a generic error or handle based on context.
		return nil, failure.New(failure.StringCode("ParseError"), failure.Messagef("failed to parse operand: %s", string(c.text)))
	}
	operand := op.(*ParsedOperandPeg)
	operand.RawString = string(c.text) // 元の文字列を保持
	return operand, nil
}

func (p *parser) callonOperandString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperandString1(stack["op"])
}

func (c *current) onMemoryAddress1(ptrQualifier, dt, jt, seg, body any) (any, error) {
	memInfo := body.(*MemoryInfo)
	var dataType ast.DataType // ast.DataType を使用
	if dt != nil {
		// dt is []byte
		dtStr := string(dt.([]byte))
		dataType, _ = ast.NewDataType(dtStr) // ast.NewDataType を使用
	}
	var jumpType string
	if jt != nil {
		// jt is []byte
		jumpType = string(jt.([]byte))
	}
	var ptrPrefix string
	if ptrQualifier != nil {
		// ptrQualifier is []any{ maybeFar, ptrKeyword, _ } or []any{ ptrKeyword, _ }
		// Add nil check before type assertion
		if parts, ok := ptrQualifier.([]any); ok {
			// Extract "FAR PTR" or "PTR"
			if len(parts) == 3 { // FAR PTR
				// Ensure parts[0] is also []any before accessing its element
				if farPart, farOk := parts[0].([]any); farOk && len(farPart) > 0 {
					if farBytes, byteOk := farPart[0].([]byte); byteOk {
						ptrPrefix = string(farBytes) + " "
					}
				}
				// Append PTR part
				if ptrBytes, byteOk := parts[1].([]byte); byteOk {
					ptrPrefix += string(ptrBytes)
				}
			} else if len(parts) > 0 { // PTR
				if ptrBytes, byteOk := parts[0].([]byte); byteOk {
					ptrPrefix = string(ptrBytes)
				}
			}
		}
	}

	if seg != nil {
		// seg は []any{[]byte("ES"), _, []byte(":"), _} のような形になる
		segBytes := seg.([]any)[0].([]byte)
		memInfo.Segment = string(segBytes) // セグメントオーバーライド
	}

	// Determine memory type based on DataType or default (e.g., M32)
	memType := CodeM // Default
	switch dataType {
	case ast.Byte:
		memType = CodeM8
	case ast.Word:
		memType = CodeM16
	case ast.Dword:
		memType = CodeM32
		// Add QWORD etc. if needed
	}
	// TODO: Further refine type based on registers used if no explicit type

	return &ParsedOperandPeg{
		Type:      memType, // Use determined type
		Memory:    memInfo,
		DataType:  dataType,
		JumpType:  jumpType,
		PtrPrefix: ptrPrefix, // Store ptrPrefix
	}, nil
}

func (p *parser) callonMemoryAddress1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMemoryAddress1(stack["ptrQualifier"], stack["dt"], stack["jt"], stack["seg"], stack["body"])
}

func (c *current) onSegmentedNonMemOperand1(seg, op any) (any, error) {
	operand := op.(*ParsedOperandPeg)      // Get the parsed operand after ':'
	operand.Segment = string(seg.([]byte)) // Add segment info to the parsed operand
	// Type might need adjustment based on context (e.g., FAR jump)
	// For now, return the operand with segment info added.
	return operand, nil
}

func (p *parser) callonSegmentedNonMemOperand1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSegmentedNonMemOperand1(stack["seg"], stack["op"])
}

func (c *current) onBaseIndexScaleDisp1(base, op1, index, scale, op2, disp any) (any, error) {
	baseReg := string(base.([]byte))
	indexReg := string(index.([]byte))
	scaleVal, _ := strconv.Atoi(string(scale.([]byte)))
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	// op1/op2 are []byte containing '+' or '-'
	if string(op1.([]byte)) == "-" { /* index should not be subtracted? */
	}
	if string(op2.([]byte)) == "-" {
		dispVal = -dispVal
	}
	return &MemoryInfo{BaseReg: baseReg, IndexReg: indexReg, Scale: scaleVal, Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonBaseIndexScaleDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseIndexScaleDisp1(stack["base"], stack["op1"], stack["index"], stack["scale"], stack["op2"], stack["disp"])
}

func (c *current) onBaseIndexDisp1(base, op1, index, op2, disp any) (any, error) {
	baseReg := string(base.([]byte))
	indexReg := string(index.([]byte))
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	// op1/op2 are []byte containing '+' or '-'
	if string(op1.([]byte)) == "-" { /* index should not be subtracted? */
	}
	if string(op2.([]byte)) == "-" {
		dispVal = -dispVal
	}
	return &MemoryInfo{BaseReg: baseReg, IndexReg: indexReg, Scale: 1, Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonBaseIndexDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseIndexDisp1(stack["base"], stack["op1"], stack["index"], stack["op2"], stack["disp"])
}

func (c *current) onBaseScaleDisp1(base, op1, index, scale any) (any, error) {
	// Dispなしのパターン (例: [EAX+EBX*4]) - op1 is AddOp
	baseReg := string(base.([]byte))
	indexReg := string(index.([]byte))
	scaleVal, _ := strconv.Atoi(string(scale.([]byte)))
	// op1 is usually '+'
	return &MemoryInfo{BaseReg: baseReg, IndexReg: indexReg, Scale: scaleVal}, nil
}

func (p *parser) callonBaseScaleDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseScaleDisp1(stack["base"], stack["op1"], stack["index"], stack["scale"])
}

func (c *current) onIndexScaleDisp1(index, scale, op1, disp any) (any, error) {
	// op1 is AddOp
	indexReg := string(index.([]byte))
	scaleVal, _ := strconv.Atoi(string(scale.([]byte)))
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	// op1 is []byte containing '+' or '-'
	if string(op1.([]byte)) == "-" {
		dispVal = -dispVal
	}
	return &MemoryInfo{IndexReg: indexReg, Scale: scaleVal, Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonIndexScaleDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexScaleDisp1(stack["index"], stack["scale"], stack["op1"], stack["disp"])
}

func (c *current) onBaseDisp1(base, op1, disp any) (any, error) {
	// op1 is AddOp
	baseReg := string(base.([]byte))
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	// op1 is []byte containing '+' or '-'
	if string(op1.([]byte)) == "-" {
		dispVal = -dispVal
	}
	return &MemoryInfo{BaseReg: baseReg, Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonBaseDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseDisp1(stack["base"], stack["op1"], stack["disp"])
}

func (c *current) onIndexDisp1(index, op1, disp any) (any, error) {
	// Baseなし、Indexあり、Dispあり - op1 is AddOp
	indexReg := string(index.([]byte))
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	// op1 is []byte containing '+' or '-'
	if string(op1.([]byte)) == "-" {
		dispVal = -dispVal
	}
	return &MemoryInfo{IndexReg: indexReg, Scale: 1, Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonIndexDisp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexDisp1(stack["index"], stack["op1"], stack["disp"])
}

func (c *current) onBaseIndex1(base, op1, index any) (any, error) {
	// op1 is AddOp
	baseReg := string(base.([]byte))
	indexReg := string(index.([]byte))
	// op1 は通常 '+'
	return &MemoryInfo{BaseReg: baseReg, IndexReg: indexReg, Scale: 1}, nil
}

func (p *parser) callonBaseIndex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseIndex1(stack["base"], stack["op1"], stack["index"])
}

func (c *current) onBaseOnly1(base any) (any, error) {
	// base is []byte
	return &MemoryInfo{BaseReg: string(base.([]byte))}, nil
}

func (p *parser) callonBaseOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBaseOnly1(stack["base"])
}

func (c *current) onIndexOnly1(index, scale any) (any, error) {
	// Indexのみ、Scaleはオプショナル
	// index is []byte
	indexReg := string(index.([]byte))
	scaleVal := 1
	if scale != nil {
		// scale is []byte
		scaleVal, _ = strconv.Atoi(string(scale.([]byte)))
	}
	return &MemoryInfo{IndexReg: indexReg, Scale: scaleVal}, nil
}

func (p *parser) callonIndexOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOnly1(stack["index"], stack["scale"])
}

func (c *current) onDispOnly1(disp any) (any, error) {
	// disp is []byte
	dispVal := toInt(string(disp.([]byte)))
	isHex := isHex(string(disp.([]byte)))
	return &MemoryInfo{Displacement: dispVal, IsHexDisp: isHex}, nil
}

func (p *parser) callonDispOnly1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDispOnly1(stack["disp"])
}

func (c *current) onScale1(s any) (any, error) {
	return s, nil
}

func (p *parser) callonScale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScale1(stack["s"])
}

func (c *current) onAddOp1(op any) (any, error) {
	return op, nil
}

func (p *parser) callonAddOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddOp1(stack["op"])
}

func (c *current) onImmediateValue1(val any) (any, error) {
	return val, nil
}

func (p *parser) callonImmediateValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImmediateValue1(stack["val"])
}

func (c *current) onRegister1(r any) (any, error) {
	regName := string(r.([]byte))
	// レジスタの種類に応じて Type を設定 (CodeR8, CodeR16, CodeR32, CodeSREG など)
	regType := getRegisterType(regName) // getRegisterType は operand_types.go で定義想定
	return &ParsedOperandPeg{Type: regType, Register: regName}, nil
}

func (p *parser) callonRegister1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegister1(stack["r"])
}

func (c *current) onRegisterName9() (any, error) {
	return c.text, nil
}

func (p *parser) callonRegisterName9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegisterName9()
}

func (c *current) onImmediate1(val any) (any, error) {
	// val is []byte
	immStr := string(val.([]byte))
	value := toInt(immStr) // Use updated toInt
	hex := isHex(immStr)
	// 即値のサイズに応じて Type を設定 (CodeIMM8, CodeIMM16, CodeIMM32)
	immType := getImmediateSizeType(value) // getImmediateSizeType は operand_types.go で定義想定
	return &ParsedOperandPeg{Type: immType, Immediate: value, IsHex: hex}, nil
}

func (p *parser) callonImmediate1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImmediate1(stack["val"])
}

func (c *current) onHexFactor1() (any, error) {
	return c.text, nil
}

func (p *parser) callonHexFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexFactor1()
}

func (c *current) onNumberFactor1() (any, error) {
	return c.text, nil
}

func (p *parser) callonNumberFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberFactor1()
}

func (c *current) onCharFactor1(charVal any) (any, error) {
	return c.text, nil
}

func (p *parser) callonCharFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCharFactor1(stack["charVal"])
}

func (c *current) onJumpLabel1(jt, l any) (any, error) {
	labelName := string(l.([]byte))
	jumpTypeStr := string(jt.([]byte))
	// Determine type based on JumpType
	labelType := CodeREL32 // Default? Or determine based on jump type?
	if jumpTypeStr == "SHORT" {
		labelType = CodeREL8
	}
	// TODO: Handle NEAR/FAR if they imply different types than default Label
	return &ParsedOperandPeg{Type: labelType, Label: labelName, JumpType: jumpTypeStr}, nil
}

func (p *parser) callonJumpLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJumpLabel1(stack["jt"], stack["l"])
}

func (c *current) onLabel1(l any) (any, error) {
	// l is []byte
	labelName := string(l.([]byte))
	// ラベルのタイプ (REL8, REL16, REL32, IMM) はここでは決定せず、
	// 後続の処理 (asmdb検索など) で決定する想定。一旦 CodeLABEL などにするか？
	return &ParsedOperandPeg{Type: CodeLABEL, Label: labelName}, nil // CodeLABEL は仮
}

func (p *parser) callonLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabel1(stack["l"])
}

func (c *current) onIdentFactor1() (any, error) {
	return c.text, nil
}

func (p *parser) callonIdentFactor1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentFactor1()
}

func (c *current) onSegmentRegister1(r any) (any, error) {
	segName := string(r.([]byte))
	return &ParsedOperandPeg{Type: CodeSREG, Segment: segName}, nil
}

func (p *parser) callonSegmentRegister1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSegmentRegister1(stack["r"])
}

func (c *current) onDataType4() (any, error) {
	return c.text, nil
}

func (p *parser) callonDataType4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDataType4()
}

func (c *current) onJumpType4() (any, error) {
	return c.text, nil
}

func (p *parser) callonJumpType4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJumpType4()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
